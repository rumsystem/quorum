// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        (unknown)
// source: chain.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PackageType int32

const (
	PackageType_TRX   PackageType = 0
	PackageType_BLOCK PackageType = 1
)

// Enum value maps for PackageType.
var (
	PackageType_name = map[int32]string{
		0: "TRX",
		1: "BLOCK",
	}
	PackageType_value = map[string]int32{
		"TRX":   0,
		"BLOCK": 1,
	}
)

func (x PackageType) Enum() *PackageType {
	p := new(PackageType)
	*p = x
	return p
}

func (x PackageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PackageType) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[0].Descriptor()
}

func (PackageType) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[0]
}

func (x PackageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PackageType.Descriptor instead.
func (PackageType) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{0}
}

type TrxType int32

const (
	TrxType_POST           TrxType = 0 // post to group
	TrxType_AUTH           TrxType = 1 // group auth update
	TrxType_REQ_BLOCK      TrxType = 2 // request next block
	TrxType_REQ_BLOCK_RESP TrxType = 3 // response request next block
	TrxType_CHALLENGE      TrxType = 4 // initial a round of CHALLENGE
	TrxType_CHALLENGE_RESP TrxType = 5 // challenge response
	TrxType_NEW_BLOCK_RESP TrxType = 6 // accept block response
)

// Enum value maps for TrxType.
var (
	TrxType_name = map[int32]string{
		0: "POST",
		1: "AUTH",
		2: "REQ_BLOCK",
		3: "REQ_BLOCK_RESP",
		4: "CHALLENGE",
		5: "CHALLENGE_RESP",
		6: "NEW_BLOCK_RESP",
	}
	TrxType_value = map[string]int32{
		"POST":           0,
		"AUTH":           1,
		"REQ_BLOCK":      2,
		"REQ_BLOCK_RESP": 3,
		"CHALLENGE":      4,
		"CHALLENGE_RESP": 5,
		"NEW_BLOCK_RESP": 6,
	}
)

func (x TrxType) Enum() *TrxType {
	p := new(TrxType)
	*p = x
	return p
}

func (x TrxType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrxType) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[1].Descriptor()
}

func (TrxType) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[1]
}

func (x TrxType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrxType.Descriptor instead.
func (TrxType) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{1}
}

type NewBlockRespResult int32

const (
	NewBlockRespResult_BLOCK_ACCEPTED NewBlockRespResult = 0
	NewBlockRespResult_BLOCK_REJECTED NewBlockRespResult = 1
)

// Enum value maps for NewBlockRespResult.
var (
	NewBlockRespResult_name = map[int32]string{
		0: "BLOCK_ACCEPTED",
		1: "BLOCK_REJECTED",
	}
	NewBlockRespResult_value = map[string]int32{
		"BLOCK_ACCEPTED": 0,
		"BLOCK_REJECTED": 1,
	}
)

func (x NewBlockRespResult) Enum() *NewBlockRespResult {
	p := new(NewBlockRespResult)
	*p = x
	return p
}

func (x NewBlockRespResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NewBlockRespResult) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[2].Descriptor()
}

func (NewBlockRespResult) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[2]
}

func (x NewBlockRespResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NewBlockRespResult.Descriptor instead.
func (NewBlockRespResult) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{2}
}

type ReqBlkResult int32

const (
	ReqBlkResult_BLOCK_IN_TRX ReqBlkResult = 0 //block data in trx
	ReqBlkResult_BLOCK_ON_TOP ReqBlkResult = 1 //top block, no new block, block in trx is empty
)

// Enum value maps for ReqBlkResult.
var (
	ReqBlkResult_name = map[int32]string{
		0: "BLOCK_IN_TRX",
		1: "BLOCK_ON_TOP",
	}
	ReqBlkResult_value = map[string]int32{
		"BLOCK_IN_TRX": 0,
		"BLOCK_ON_TOP": 1,
	}
)

func (x ReqBlkResult) Enum() *ReqBlkResult {
	p := new(ReqBlkResult)
	*p = x
	return p
}

func (x ReqBlkResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReqBlkResult) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[3].Descriptor()
}

func (ReqBlkResult) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[3]
}

func (x ReqBlkResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReqBlkResult.Descriptor instead.
func (ReqBlkResult) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{3}
}

type Package struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type PackageType `protobuf:"varint,1,opt,name=type,proto3,enum=quorum.pb.PackageType" json:"type,omitempty"`
	Data []byte      `protobuf:"bytes,2,opt,name=Data,json=data,proto3" json:"Data,omitempty"`
}

func (x *Package) Reset() {
	*x = Package{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Package) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package) ProtoMessage() {}

func (x *Package) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package.ProtoReflect.Descriptor instead.
func (*Package) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{0}
}

func (x *Package) GetType() PackageType {
	if x != nil {
		return x.Type
	}
	return PackageType_TRX
}

func (x *Package) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Trx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrxId     string  `protobuf:"bytes,1,opt,name=TrxId,json=trxId,proto3" json:"TrxId,omitempty"`
	Type      TrxType `protobuf:"varint,2,opt,name=type,proto3,enum=quorum.pb.TrxType" json:"type,omitempty"`
	GroupId   string  `protobuf:"bytes,3,opt,name=GroupId,json=groupId,proto3" json:"GroupId,omitempty"`
	Sender    string  `protobuf:"bytes,4,opt,name=Sender,json=sender,proto3" json:"Sender,omitempty"`
	Pubkey    string  `protobuf:"bytes,5,opt,name=Pubkey,json=pubkey,proto3" json:"Pubkey,omitempty"`
	Data      []byte  `protobuf:"bytes,6,opt,name=Data,json=data,proto3" json:"Data,omitempty"`
	TimeStamp int64   `protobuf:"varint,7,opt,name=TimeStamp,json=timeStamp,proto3" json:"TimeStamp,omitempty"`
	Version   string  `protobuf:"bytes,8,opt,name=Version,json=version,proto3" json:"Version,omitempty"`
	Expired   int64   `protobuf:"varint,9,opt,name=Expired,json=expired,proto3" json:"Expired,omitempty"`
	Signature []byte  `protobuf:"bytes,10,opt,name=Signature,json=signature,proto3" json:"Signature,omitempty"`
}

func (x *Trx) Reset() {
	*x = Trx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trx) ProtoMessage() {}

func (x *Trx) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trx.ProtoReflect.Descriptor instead.
func (*Trx) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{1}
}

func (x *Trx) GetTrxId() string {
	if x != nil {
		return x.TrxId
	}
	return ""
}

func (x *Trx) GetType() TrxType {
	if x != nil {
		return x.Type
	}
	return TrxType_POST
}

func (x *Trx) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *Trx) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *Trx) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *Trx) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Trx) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *Trx) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Trx) GetExpired() int64 {
	if x != nil {
		return x.Expired
	}
	return 0
}

func (x *Trx) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockId        string `protobuf:"bytes,1,opt,name=BlockId,json=blockId,proto3" json:"BlockId,omitempty"`
	GroupId        string `protobuf:"bytes,2,opt,name=GroupId,json=groupId,proto3" json:"GroupId,omitempty"`
	PrevBlockId    string `protobuf:"bytes,3,opt,name=PrevBlockId,json=prevBlockId,proto3" json:"PrevBlockId,omitempty"`
	BlockNum       int64  `protobuf:"varint,4,opt,name=BlockNum,json=blockNum,proto3" json:"BlockNum,omitempty"`
	Timestamp      int64  `protobuf:"varint,5,opt,name=Timestamp,json=timestamp,proto3" json:"Timestamp,omitempty"`
	PreviousHash   []byte `protobuf:"bytes,6,opt,name=PreviousHash,json=previousHash,proto3" json:"PreviousHash,omitempty"`
	ProducerId     string `protobuf:"bytes,7,opt,name=ProducerId,json=producerId,proto3" json:"ProducerId,omitempty"`
	ProducerPubKey string `protobuf:"bytes,8,opt,name=ProducerPubKey,json=producerPubKey,proto3" json:"ProducerPubKey,omitempty"`
	Trxs           []*Trx `protobuf:"bytes,9,rep,name=Trxs,json=trxs,proto3" json:"Trxs,omitempty"`
	Hash           []byte `protobuf:"bytes,10,opt,name=Hash,json=hash,proto3" json:"Hash,omitempty"`
	Signature      []byte `protobuf:"bytes,11,opt,name=Signature,json=signature,proto3" json:"Signature,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{2}
}

func (x *Block) GetBlockId() string {
	if x != nil {
		return x.BlockId
	}
	return ""
}

func (x *Block) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *Block) GetPrevBlockId() string {
	if x != nil {
		return x.PrevBlockId
	}
	return ""
}

func (x *Block) GetBlockNum() int64 {
	if x != nil {
		return x.BlockNum
	}
	return 0
}

func (x *Block) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Block) GetPreviousHash() []byte {
	if x != nil {
		return x.PreviousHash
	}
	return nil
}

func (x *Block) GetProducerId() string {
	if x != nil {
		return x.ProducerId
	}
	return ""
}

func (x *Block) GetProducerPubKey() string {
	if x != nil {
		return x.ProducerPubKey
	}
	return ""
}

func (x *Block) GetTrxs() []*Trx {
	if x != nil {
		return x.Trxs
	}
	return nil
}

func (x *Block) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *Block) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type NewBLockResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockId    string             `protobuf:"bytes,1,opt,name=BlockId,json=blockId,proto3" json:"BlockId,omitempty"`
	GroupId    string             `protobuf:"bytes,2,opt,name=GroupId,json=groupId,proto3" json:"GroupId,omitempty"`
	ProducerId string             `protobuf:"bytes,3,opt,name=ProducerId,json=producerId,proto3" json:"ProducerId,omitempty"`
	Receiver   string             `protobuf:"bytes,4,opt,name=Receiver,json=receiver,proto3" json:"Receiver,omitempty"`
	Result     NewBlockRespResult `protobuf:"varint,7,opt,name=Result,json=result,proto3,enum=quorum.pb.NewBlockRespResult" json:"Result,omitempty"`
}

func (x *NewBLockResp) Reset() {
	*x = NewBLockResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewBLockResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewBLockResp) ProtoMessage() {}

func (x *NewBLockResp) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewBLockResp.ProtoReflect.Descriptor instead.
func (*NewBLockResp) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{3}
}

func (x *NewBLockResp) GetBlockId() string {
	if x != nil {
		return x.BlockId
	}
	return ""
}

func (x *NewBLockResp) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *NewBLockResp) GetProducerId() string {
	if x != nil {
		return x.ProducerId
	}
	return ""
}

func (x *NewBLockResp) GetReceiver() string {
	if x != nil {
		return x.Receiver
	}
	return ""
}

func (x *NewBLockResp) GetResult() NewBlockRespResult {
	if x != nil {
		return x.Result
	}
	return NewBlockRespResult_BLOCK_ACCEPTED
}

type ReqBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockId string `protobuf:"bytes,1,opt,name=BlockId,json=blockId,proto3" json:"BlockId,omitempty"` //block id
	GroupId string `protobuf:"bytes,2,opt,name=GroupId,json=groupId,proto3" json:"GroupId,omitempty"` //group id
	UserId  string `protobuf:"bytes,3,opt,name=UserId,json=userId,proto3" json:"UserId,omitempty"`    //requester
}

func (x *ReqBlock) Reset() {
	*x = ReqBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBlock) ProtoMessage() {}

func (x *ReqBlock) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBlock.ProtoReflect.Descriptor instead.
func (*ReqBlock) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{4}
}

func (x *ReqBlock) GetBlockId() string {
	if x != nil {
		return x.BlockId
	}
	return ""
}

func (x *ReqBlock) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *ReqBlock) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type ReqBlockResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    ReqBlkResult `protobuf:"varint,1,opt,name=Result,json=result,proto3,enum=quorum.pb.ReqBlkResult" json:"Result,omitempty"`
	Provider  string       `protobuf:"bytes,2,opt,name=Provider,json=provider,proto3" json:"Provider,omitempty"`
	Requester string       `protobuf:"bytes,3,opt,name=Requester,json=requester,proto3" json:"Requester,omitempty"`
	GroupId   string       `protobuf:"bytes,4,opt,name=GroupId,json=groupId,proto3" json:"GroupId,omitempty"`
	BlockId   string       `protobuf:"bytes,5,opt,name=BlockId,json=blockId,proto3" json:"BlockId,omitempty"`
	Block     []byte       `protobuf:"bytes,6,opt,name=Block,json=block,proto3" json:"Block,omitempty"`
}

func (x *ReqBlockResp) Reset() {
	*x = ReqBlockResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBlockResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBlockResp) ProtoMessage() {}

func (x *ReqBlockResp) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBlockResp.ProtoReflect.Descriptor instead.
func (*ReqBlockResp) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{5}
}

func (x *ReqBlockResp) GetResult() ReqBlkResult {
	if x != nil {
		return x.Result
	}
	return ReqBlkResult_BLOCK_IN_TRX
}

func (x *ReqBlockResp) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *ReqBlockResp) GetRequester() string {
	if x != nil {
		return x.Requester
	}
	return ""
}

func (x *ReqBlockResp) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *ReqBlockResp) GetBlockId() string {
	if x != nil {
		return x.BlockId
	}
	return ""
}

func (x *ReqBlockResp) GetBlock() []byte {
	if x != nil {
		return x.Block
	}
	return nil
}

type PostItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrxId     string `protobuf:"bytes,1,opt,name=TrxId,json=trxId,proto3" json:"TrxId,omitempty"`
	Publisher string `protobuf:"bytes,2,opt,name=Publisher,json=publisher,proto3" json:"Publisher,omitempty"`
	Content   []byte `protobuf:"bytes,3,opt,name=Content,json=content,proto3" json:"Content,omitempty"`
	TimeStamp int64  `protobuf:"varint,4,opt,name=TimeStamp,json=timeStamp,proto3" json:"TimeStamp,omitempty"`
}

func (x *PostItem) Reset() {
	*x = PostItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostItem) ProtoMessage() {}

func (x *PostItem) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostItem.ProtoReflect.Descriptor instead.
func (*PostItem) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{6}
}

func (x *PostItem) GetTrxId() string {
	if x != nil {
		return x.TrxId
	}
	return ""
}

func (x *PostItem) GetPublisher() string {
	if x != nil {
		return x.Publisher
	}
	return ""
}

func (x *PostItem) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *PostItem) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

type BlockListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string `protobuf:"bytes,1,opt,name=UserId,json=userId,proto3" json:"UserId,omitempty"`
	GroupId     string `protobuf:"bytes,2,opt,name=GroupId,json=groupId,proto3" json:"GroupId,omitempty"`
	OwnerPubkey string `protobuf:"bytes,3,opt,name=OwnerPubkey,json=ownerPubkey,proto3" json:"OwnerPubkey,omitempty"`
	OwnerSign   string `protobuf:"bytes,4,opt,name=OwnerSign,json=ownerSign,proto3" json:"OwnerSign,omitempty"`
	Memo        string `protobuf:"bytes,5,opt,name=Memo,json=memo,proto3" json:"Memo,omitempty"`
	TimeStamp   int64  `protobuf:"varint,6,opt,name=TimeStamp,json=timeStamp,proto3" json:"TimeStamp,omitempty"`
}

func (x *BlockListItem) Reset() {
	*x = BlockListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockListItem) ProtoMessage() {}

func (x *BlockListItem) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockListItem.ProtoReflect.Descriptor instead.
func (*BlockListItem) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{7}
}

func (x *BlockListItem) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BlockListItem) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *BlockListItem) GetOwnerPubkey() string {
	if x != nil {
		return x.OwnerPubkey
	}
	return ""
}

func (x *BlockListItem) GetOwnerSign() string {
	if x != nil {
		return x.OwnerSign
	}
	return ""
}

func (x *BlockListItem) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *BlockListItem) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

type GroupItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId        string `protobuf:"bytes,1,opt,name=GroupId,json=groupId,proto3" json:"GroupId,omitempty"`
	GroupName      string `protobuf:"bytes,2,opt,name=GroupName,json=groupName,proto3" json:"GroupName,omitempty"`
	OwnerPubKey    string `protobuf:"bytes,3,opt,name=OwnerPubKey,json=ownerPubKey,proto3" json:"OwnerPubKey,omitempty"`
	LastUpdate     int64  `protobuf:"varint,4,opt,name=LastUpdate,json=lastUpdate,proto3" json:"LastUpdate,omitempty"`
	LatestBlockNum int64  `protobuf:"varint,5,opt,name=LatestBlockNum,json=latestBlockNum,proto3" json:"LatestBlockNum,omitempty"`
	LatestBlockId  string `protobuf:"bytes,6,opt,name=LatestBlockId,json=latestBlockId,proto3" json:"LatestBlockId,omitempty"`
	GenesisBlock   *Block `protobuf:"bytes,7,opt,name=GenesisBlock,json=genesisBlock,proto3" json:"GenesisBlock,omitempty"`
}

func (x *GroupItem) Reset() {
	*x = GroupItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupItem) ProtoMessage() {}

func (x *GroupItem) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupItem.ProtoReflect.Descriptor instead.
func (*GroupItem) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{8}
}

func (x *GroupItem) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GroupItem) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *GroupItem) GetOwnerPubKey() string {
	if x != nil {
		return x.OwnerPubKey
	}
	return ""
}

func (x *GroupItem) GetLastUpdate() int64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

func (x *GroupItem) GetLatestBlockNum() int64 {
	if x != nil {
		return x.LatestBlockNum
	}
	return 0
}

func (x *GroupItem) GetLatestBlockId() string {
	if x != nil {
		return x.LatestBlockId
	}
	return ""
}

func (x *GroupItem) GetGenesisBlock() *Block {
	if x != nil {
		return x.GenesisBlock
	}
	return nil
}

type ChallengeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Challenger    string `protobuf:"bytes,1,opt,name=Challenger,json=challenger,proto3" json:"Challenger,omitempty"`
	ChallengeSeed int64  `protobuf:"varint,2,opt,name=ChallengeSeed,json=challengeSeed,proto3" json:"ChallengeSeed,omitempty"`
}

func (x *ChallengeItem) Reset() {
	*x = ChallengeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeItem) ProtoMessage() {}

func (x *ChallengeItem) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeItem.ProtoReflect.Descriptor instead.
func (*ChallengeItem) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{9}
}

func (x *ChallengeItem) GetChallenger() string {
	if x != nil {
		return x.Challenger
	}
	return ""
}

func (x *ChallengeItem) GetChallengeSeed() int64 {
	if x != nil {
		return x.ChallengeSeed
	}
	return 0
}

var File_chain_proto protoreflect.FileDescriptor

var file_chain_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x71,
	0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x22, 0x49, 0x0a, 0x07, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x91, 0x02, 0x0a, 0x03, 0x54, 0x72, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x72, 0x78, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x72, 0x78, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x78, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x50,
	0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62,
	0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xd9, 0x02, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x76, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a,
	0x04, 0x54, 0x72, 0x78, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x71, 0x75,
	0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x78, 0x52, 0x04, 0x74, 0x72, 0x78,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x0c, 0x4e, 0x65, 0x77, 0x42, 0x4c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62,
	0x2e, 0x4e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x56, 0x0a, 0x08, 0x52,
	0x65, 0x71, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0xc3, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x71, 0x42, 0x6c, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x76, 0x0a, 0x08, 0x50, 0x6f, 0x73,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x72, 0x78, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x72, 0x78, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0xb3, 0x01, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x53, 0x69, 0x67, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x89, 0x02, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75,
	0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x34, 0x0a,
	0x0c, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x22, 0x55, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x53, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x65, 0x64, 0x2a, 0x21, 0x0a, 0x0b, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x52, 0x58,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x01, 0x2a, 0x77, 0x0a,
	0x07, 0x54, 0x72, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x55, 0x54, 0x48, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x52, 0x45, 0x51, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x52,
	0x45, 0x51, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x03, 0x12,
	0x0d, 0x0a, 0x09, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x10, 0x04, 0x12, 0x12,
	0x0a, 0x0e, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50,
	0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x45, 0x57, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f,
	0x52, 0x45, 0x53, 0x50, 0x10, 0x06, 0x2a, 0x3c, 0x0a, 0x12, 0x4e, 0x65, 0x77, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x0e,
	0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x01, 0x2a, 0x32, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x42, 0x6c, 0x6b, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x49, 0x4e,
	0x5f, 0x54, 0x52, 0x58, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f,
	0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x50, 0x10, 0x01, 0x42, 0x2a, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x75, 0x6f, 0x2d, 0x6a, 0x75, 0x2f, 0x71, 0x75,
	0x6f, 0x72, 0x75, 0x6d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chain_proto_rawDescOnce sync.Once
	file_chain_proto_rawDescData = file_chain_proto_rawDesc
)

func file_chain_proto_rawDescGZIP() []byte {
	file_chain_proto_rawDescOnce.Do(func() {
		file_chain_proto_rawDescData = protoimpl.X.CompressGZIP(file_chain_proto_rawDescData)
	})
	return file_chain_proto_rawDescData
}

var file_chain_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_chain_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_chain_proto_goTypes = []interface{}{
	(PackageType)(0),        // 0: quorum.pb.PackageType
	(TrxType)(0),            // 1: quorum.pb.TrxType
	(NewBlockRespResult)(0), // 2: quorum.pb.NewBlockRespResult
	(ReqBlkResult)(0),       // 3: quorum.pb.ReqBlkResult
	(*Package)(nil),         // 4: quorum.pb.Package
	(*Trx)(nil),             // 5: quorum.pb.Trx
	(*Block)(nil),           // 6: quorum.pb.Block
	(*NewBLockResp)(nil),    // 7: quorum.pb.NewBLockResp
	(*ReqBlock)(nil),        // 8: quorum.pb.ReqBlock
	(*ReqBlockResp)(nil),    // 9: quorum.pb.ReqBlockResp
	(*PostItem)(nil),        // 10: quorum.pb.PostItem
	(*BlockListItem)(nil),   // 11: quorum.pb.BlockListItem
	(*GroupItem)(nil),       // 12: quorum.pb.GroupItem
	(*ChallengeItem)(nil),   // 13: quorum.pb.ChallengeItem
}
var file_chain_proto_depIdxs = []int32{
	0, // 0: quorum.pb.Package.type:type_name -> quorum.pb.PackageType
	1, // 1: quorum.pb.Trx.type:type_name -> quorum.pb.TrxType
	5, // 2: quorum.pb.Block.Trxs:type_name -> quorum.pb.Trx
	2, // 3: quorum.pb.NewBLockResp.Result:type_name -> quorum.pb.NewBlockRespResult
	3, // 4: quorum.pb.ReqBlockResp.Result:type_name -> quorum.pb.ReqBlkResult
	6, // 5: quorum.pb.GroupItem.GenesisBlock:type_name -> quorum.pb.Block
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_chain_proto_init() }
func file_chain_proto_init() {
	if File_chain_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chain_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Package); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewBLockResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBlockResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chain_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chain_proto_goTypes,
		DependencyIndexes: file_chain_proto_depIdxs,
		EnumInfos:         file_chain_proto_enumTypes,
		MessageInfos:      file_chain_proto_msgTypes,
	}.Build()
	File_chain_proto = out.File
	file_chain_proto_rawDesc = nil
	file_chain_proto_goTypes = nil
	file_chain_proto_depIdxs = nil
}
