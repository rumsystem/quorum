// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: chain.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PackageType int32

const (
	PackageType_TRX   PackageType = 0
	PackageType_BLOCK PackageType = 1
)

// Enum value maps for PackageType.
var (
	PackageType_name = map[int32]string{
		0: "TRX",
		1: "BLOCK",
	}
	PackageType_value = map[string]int32{
		"TRX":   0,
		"BLOCK": 1,
	}
)

func (x PackageType) Enum() *PackageType {
	p := new(PackageType)
	*p = x
	return p
}

func (x PackageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PackageType) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[0].Descriptor()
}

func (PackageType) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[0]
}

func (x PackageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PackageType.Descriptor instead.
func (PackageType) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{0}
}

type TrxType int32

const (
	TrxType_POST               TrxType = 0  // post to group
	TrxType_AUTH               TrxType = 1  // group auth update
	TrxType_SCHEMA             TrxType = 2  // group schema
	TrxType_PRODUCER           TrxType = 3  // update group producer
	TrxType_ANNOUNCE           TrxType = 4  // self announce, producer or user)
	TrxType_REQ_BLOCK_FORWARD  TrxType = 5  // request next block
	TrxType_REQ_BLOCK_BACKWARD TrxType = 6  // request previous block
	TrxType_REQ_BLOCK_RESP     TrxType = 7  // response request next block
	TrxType_BLOCK_SYNCED       TrxType = 8  // block for producer to sync (old block)
	TrxType_BLOCK_PRODUCED     TrxType = 9  // block for producer to merge (newly produced block)
	TrxType_USER               TrxType = 10 // update group user
	TrxType_ASK_PEERID         TrxType = 11 // ask owner/producer peerid
	TrxType_ASK_PEERID_RESP    TrxType = 12 // response ask peerid
	TrxType_GROUP_CONFIG       TrxType = 13 // update group configuration
)

// Enum value maps for TrxType.
var (
	TrxType_name = map[int32]string{
		0:  "POST",
		1:  "AUTH",
		2:  "SCHEMA",
		3:  "PRODUCER",
		4:  "ANNOUNCE",
		5:  "REQ_BLOCK_FORWARD",
		6:  "REQ_BLOCK_BACKWARD",
		7:  "REQ_BLOCK_RESP",
		8:  "BLOCK_SYNCED",
		9:  "BLOCK_PRODUCED",
		10: "USER",
		11: "ASK_PEERID",
		12: "ASK_PEERID_RESP",
		13: "GROUP_CONFIG",
	}
	TrxType_value = map[string]int32{
		"POST":               0,
		"AUTH":               1,
		"SCHEMA":             2,
		"PRODUCER":           3,
		"ANNOUNCE":           4,
		"REQ_BLOCK_FORWARD":  5,
		"REQ_BLOCK_BACKWARD": 6,
		"REQ_BLOCK_RESP":     7,
		"BLOCK_SYNCED":       8,
		"BLOCK_PRODUCED":     9,
		"USER":               10,
		"ASK_PEERID":         11,
		"ASK_PEERID_RESP":    12,
		"GROUP_CONFIG":       13,
	}
)

func (x TrxType) Enum() *TrxType {
	p := new(TrxType)
	*p = x
	return p
}

func (x TrxType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrxType) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[1].Descriptor()
}

func (TrxType) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[1]
}

func (x TrxType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrxType.Descriptor instead.
func (TrxType) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{1}
}

type AnnounceType int32

const (
	AnnounceType_AS_USER         AnnounceType = 0
	AnnounceType_AS_PRODUCER     AnnounceType = 1
	AnnounceType_AS_USER_ENCRYPT AnnounceType = 2
)

// Enum value maps for AnnounceType.
var (
	AnnounceType_name = map[int32]string{
		0: "AS_USER",
		1: "AS_PRODUCER",
		2: "AS_USER_ENCRYPT",
	}
	AnnounceType_value = map[string]int32{
		"AS_USER":         0,
		"AS_PRODUCER":     1,
		"AS_USER_ENCRYPT": 2,
	}
)

func (x AnnounceType) Enum() *AnnounceType {
	p := new(AnnounceType)
	*p = x
	return p
}

func (x AnnounceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AnnounceType) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[2].Descriptor()
}

func (AnnounceType) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[2]
}

func (x AnnounceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AnnounceType.Descriptor instead.
func (AnnounceType) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{2}
}

type ApproveType int32

const (
	ApproveType_ANNOUNCED ApproveType = 0
	ApproveType_APPROVED  ApproveType = 1
	ApproveType_REJECTED  ApproveType = 2
)

// Enum value maps for ApproveType.
var (
	ApproveType_name = map[int32]string{
		0: "ANNOUNCED",
		1: "APPROVED",
		2: "REJECTED",
	}
	ApproveType_value = map[string]int32{
		"ANNOUNCED": 0,
		"APPROVED":  1,
		"REJECTED":  2,
	}
)

func (x ApproveType) Enum() *ApproveType {
	p := new(ApproveType)
	*p = x
	return p
}

func (x ApproveType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApproveType) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[3].Descriptor()
}

func (ApproveType) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[3]
}

func (x ApproveType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApproveType.Descriptor instead.
func (ApproveType) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{3}
}

type ActionType int32

const (
	ActionType_ADD    ActionType = 0
	ActionType_REMOVE ActionType = 1
)

// Enum value maps for ActionType.
var (
	ActionType_name = map[int32]string{
		0: "ADD",
		1: "REMOVE",
	}
	ActionType_value = map[string]int32{
		"ADD":    0,
		"REMOVE": 1,
	}
)

func (x ActionType) Enum() *ActionType {
	p := new(ActionType)
	*p = x
	return p
}

func (x ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[4].Descriptor()
}

func (ActionType) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[4]
}

func (x ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionType.Descriptor instead.
func (ActionType) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{4}
}

type ReqBlkResult int32

const (
	ReqBlkResult_BLOCK_IN_TRX    ReqBlkResult = 0 //block data in trx
	ReqBlkResult_BLOCK_NOT_FOUND ReqBlkResult = 1 //block not found
)

// Enum value maps for ReqBlkResult.
var (
	ReqBlkResult_name = map[int32]string{
		0: "BLOCK_IN_TRX",
		1: "BLOCK_NOT_FOUND",
	}
	ReqBlkResult_value = map[string]int32{
		"BLOCK_IN_TRX":    0,
		"BLOCK_NOT_FOUND": 1,
	}
)

func (x ReqBlkResult) Enum() *ReqBlkResult {
	p := new(ReqBlkResult)
	*p = x
	return p
}

func (x ReqBlkResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReqBlkResult) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[5].Descriptor()
}

func (ReqBlkResult) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[5]
}

func (x ReqBlkResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReqBlkResult.Descriptor instead.
func (ReqBlkResult) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{5}
}

type GroupEncryptType int32

const (
	GroupEncryptType_PUBLIC  GroupEncryptType = 0 //public group
	GroupEncryptType_PRIVATE GroupEncryptType = 1 //private group
)

// Enum value maps for GroupEncryptType.
var (
	GroupEncryptType_name = map[int32]string{
		0: "PUBLIC",
		1: "PRIVATE",
	}
	GroupEncryptType_value = map[string]int32{
		"PUBLIC":  0,
		"PRIVATE": 1,
	}
)

func (x GroupEncryptType) Enum() *GroupEncryptType {
	p := new(GroupEncryptType)
	*p = x
	return p
}

func (x GroupEncryptType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupEncryptType) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[6].Descriptor()
}

func (GroupEncryptType) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[6]
}

func (x GroupEncryptType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupEncryptType.Descriptor instead.
func (GroupEncryptType) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{6}
}

type GroupConsenseType int32

const (
	GroupConsenseType_POA GroupConsenseType = 0 //proof of authen
	GroupConsenseType_POS GroupConsenseType = 1
)

// Enum value maps for GroupConsenseType.
var (
	GroupConsenseType_name = map[int32]string{
		0: "POA",
		1: "POS",
	}
	GroupConsenseType_value = map[string]int32{
		"POA": 0,
		"POS": 1,
	}
)

func (x GroupConsenseType) Enum() *GroupConsenseType {
	p := new(GroupConsenseType)
	*p = x
	return p
}

func (x GroupConsenseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupConsenseType) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[7].Descriptor()
}

func (GroupConsenseType) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[7]
}

func (x GroupConsenseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupConsenseType.Descriptor instead.
func (GroupConsenseType) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{7}
}

type RoleV0 int32

const (
	RoleV0_GROUP_PRODUCER RoleV0 = 0
	RoleV0_GROUP_USER     RoleV0 = 1
)

// Enum value maps for RoleV0.
var (
	RoleV0_name = map[int32]string{
		0: "GROUP_PRODUCER",
		1: "GROUP_USER",
	}
	RoleV0_value = map[string]int32{
		"GROUP_PRODUCER": 0,
		"GROUP_USER":     1,
	}
)

func (x RoleV0) Enum() *RoleV0 {
	p := new(RoleV0)
	*p = x
	return p
}

func (x RoleV0) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoleV0) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[8].Descriptor()
}

func (RoleV0) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[8]
}

func (x RoleV0) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoleV0.Descriptor instead.
func (RoleV0) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{8}
}

type GroupConfigType int32

const (
	GroupConfigType_INT    GroupConfigType = 0
	GroupConfigType_BOOL   GroupConfigType = 1
	GroupConfigType_STRING GroupConfigType = 2
)

// Enum value maps for GroupConfigType.
var (
	GroupConfigType_name = map[int32]string{
		0: "INT",
		1: "BOOL",
		2: "STRING",
	}
	GroupConfigType_value = map[string]int32{
		"INT":    0,
		"BOOL":   1,
		"STRING": 2,
	}
)

func (x GroupConfigType) Enum() *GroupConfigType {
	p := new(GroupConfigType)
	*p = x
	return p
}

func (x GroupConfigType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupConfigType) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[9].Descriptor()
}

func (GroupConfigType) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[9]
}

func (x GroupConfigType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupConfigType.Descriptor instead.
func (GroupConfigType) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{9}
}

type Package struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type PackageType `protobuf:"varint,1,opt,name=type,proto3,enum=quorum.pb.PackageType" json:"type,omitempty"`
	Data []byte      `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *Package) Reset() {
	*x = Package{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Package) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package) ProtoMessage() {}

func (x *Package) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package.ProtoReflect.Descriptor instead.
func (*Package) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{0}
}

func (x *Package) GetType() PackageType {
	if x != nil {
		return x.Type
	}
	return PackageType_TRX
}

func (x *Package) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Trx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrxId        string  `protobuf:"bytes,1,opt,name=TrxId,proto3" json:"TrxId,omitempty"`
	Type         TrxType `protobuf:"varint,2,opt,name=Type,proto3,enum=quorum.pb.TrxType" json:"Type,omitempty"`
	GroupId      string  `protobuf:"bytes,3,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	Data         []byte  `protobuf:"bytes,4,opt,name=Data,proto3" json:"Data,omitempty"`
	TimeStamp    int64   `protobuf:"varint,5,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty,string"`
	Version      string  `protobuf:"bytes,6,opt,name=Version,proto3" json:"Version,omitempty"`
	Expired      int64   `protobuf:"varint,7,opt,name=Expired,proto3" json:"Expired,omitempty"`
	ResendCount  int64   `protobuf:"varint,8,opt,name=ResendCount,proto3" json:"ResendCount,omitempty"`
	Nonce        int64   `protobuf:"varint,9,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	SenderPubkey string  `protobuf:"bytes,10,opt,name=SenderPubkey,proto3" json:"SenderPubkey,omitempty"`
	SenderSign   []byte  `protobuf:"bytes,11,opt,name=SenderSign,proto3" json:"SenderSign,omitempty"`
}

func (x *Trx) Reset() {
	*x = Trx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trx) ProtoMessage() {}

func (x *Trx) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trx.ProtoReflect.Descriptor instead.
func (*Trx) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{1}
}

func (x *Trx) GetTrxId() string {
	if x != nil {
		return x.TrxId
	}
	return ""
}

func (x *Trx) GetType() TrxType {
	if x != nil {
		return x.Type
	}
	return TrxType_POST
}

func (x *Trx) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *Trx) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Trx) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *Trx) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Trx) GetExpired() int64 {
	if x != nil {
		return x.Expired
	}
	return 0
}

func (x *Trx) GetResendCount() int64 {
	if x != nil {
		return x.ResendCount
	}
	return 0
}

func (x *Trx) GetNonce() int64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *Trx) GetSenderPubkey() string {
	if x != nil {
		return x.SenderPubkey
	}
	return ""
}

func (x *Trx) GetSenderSign() []byte {
	if x != nil {
		return x.SenderSign
	}
	return nil
}

type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockId        string `protobuf:"bytes,1,opt,name=BlockId,proto3" json:"BlockId,omitempty"`
	GroupId        string `protobuf:"bytes,2,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	PrevBlockId    string `protobuf:"bytes,3,opt,name=PrevBlockId,proto3" json:"PrevBlockId,omitempty"`
	PreviousHash   []byte `protobuf:"bytes,4,opt,name=PreviousHash,proto3" json:"PreviousHash,omitempty"`
	Trxs           []*Trx `protobuf:"bytes,5,rep,name=Trxs,proto3" json:"Trxs,omitempty"`
	ProducerPubKey string `protobuf:"bytes,6,opt,name=ProducerPubKey,proto3" json:"ProducerPubKey,omitempty"`
	Hash           []byte `protobuf:"bytes,7,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Signature      []byte `protobuf:"bytes,8,opt,name=Signature,proto3" json:"Signature,omitempty"`
	TimeStamp      int64  `protobuf:"varint,9,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty,string"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{2}
}

func (x *Block) GetBlockId() string {
	if x != nil {
		return x.BlockId
	}
	return ""
}

func (x *Block) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *Block) GetPrevBlockId() string {
	if x != nil {
		return x.PrevBlockId
	}
	return ""
}

func (x *Block) GetPreviousHash() []byte {
	if x != nil {
		return x.PreviousHash
	}
	return nil
}

func (x *Block) GetTrxs() []*Trx {
	if x != nil {
		return x.Trxs
	}
	return nil
}

func (x *Block) GetProducerPubKey() string {
	if x != nil {
		return x.ProducerPubKey
	}
	return ""
}

func (x *Block) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *Block) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Block) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

type BlockDbChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockId       string   `protobuf:"bytes,1,opt,name=BlockId,proto3" json:"BlockId,omitempty"`
	BlockItem     *Block   `protobuf:"bytes,2,opt,name=BlockItem,proto3" json:"BlockItem,omitempty"`
	ParentBlockId string   `protobuf:"bytes,3,opt,name=ParentBlockId,proto3" json:"ParentBlockId,omitempty"`
	SubBlockId    []string `protobuf:"bytes,4,rep,name=SubBlockId,proto3" json:"SubBlockId,omitempty"`
	Height        int64    `protobuf:"varint,6,opt,name=Height,proto3" json:"Height,omitempty"`
}

func (x *BlockDbChunk) Reset() {
	*x = BlockDbChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockDbChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockDbChunk) ProtoMessage() {}

func (x *BlockDbChunk) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockDbChunk.ProtoReflect.Descriptor instead.
func (*BlockDbChunk) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{3}
}

func (x *BlockDbChunk) GetBlockId() string {
	if x != nil {
		return x.BlockId
	}
	return ""
}

func (x *BlockDbChunk) GetBlockItem() *Block {
	if x != nil {
		return x.BlockItem
	}
	return nil
}

func (x *BlockDbChunk) GetParentBlockId() string {
	if x != nil {
		return x.ParentBlockId
	}
	return ""
}

func (x *BlockDbChunk) GetSubBlockId() []string {
	if x != nil {
		return x.SubBlockId
	}
	return nil
}

func (x *BlockDbChunk) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

type ReqBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockId string `protobuf:"bytes,1,opt,name=BlockId,proto3" json:"BlockId,omitempty"` //block id
	GroupId string `protobuf:"bytes,2,opt,name=GroupId,proto3" json:"GroupId,omitempty"` //group id
	UserId  string `protobuf:"bytes,3,opt,name=UserId,proto3" json:"UserId,omitempty"`   //requester
}

func (x *ReqBlock) Reset() {
	*x = ReqBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBlock) ProtoMessage() {}

func (x *ReqBlock) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBlock.ProtoReflect.Descriptor instead.
func (*ReqBlock) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{4}
}

func (x *ReqBlock) GetBlockId() string {
	if x != nil {
		return x.BlockId
	}
	return ""
}

func (x *ReqBlock) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *ReqBlock) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type BlockSynced struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockItem *Block `protobuf:"bytes,1,opt,name=BlockItem,proto3" json:"BlockItem,omitempty"`
}

func (x *BlockSynced) Reset() {
	*x = BlockSynced{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockSynced) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockSynced) ProtoMessage() {}

func (x *BlockSynced) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockSynced.ProtoReflect.Descriptor instead.
func (*BlockSynced) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{5}
}

func (x *BlockSynced) GetBlockItem() *Block {
	if x != nil {
		return x.BlockItem
	}
	return nil
}

type AskPeerId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId    string `protobuf:"bytes,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	UserPeerId string `protobuf:"bytes,2,opt,name=UserPeerId,proto3" json:"UserPeerId,omitempty"`
	UserPubkey string `protobuf:"bytes,3,opt,name=UserPubkey,proto3" json:"UserPubkey,omitempty"`
	UserSign   string `protobuf:"bytes,4,opt,name=UserSign,proto3" json:"UserSign,omitempty"`
	Memo       string `protobuf:"bytes,5,opt,name=Memo,proto3" json:"Memo,omitempty"`
}

func (x *AskPeerId) Reset() {
	*x = AskPeerId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskPeerId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskPeerId) ProtoMessage() {}

func (x *AskPeerId) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskPeerId.ProtoReflect.Descriptor instead.
func (*AskPeerId) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{6}
}

func (x *AskPeerId) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *AskPeerId) GetUserPeerId() string {
	if x != nil {
		return x.UserPeerId
	}
	return ""
}

func (x *AskPeerId) GetUserPubkey() string {
	if x != nil {
		return x.UserPubkey
	}
	return ""
}

func (x *AskPeerId) GetUserSign() string {
	if x != nil {
		return x.UserSign
	}
	return ""
}

func (x *AskPeerId) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

type AskPeerIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId           string `protobuf:"bytes,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	RespPeerId        string `protobuf:"bytes,2,opt,name=RespPeerId,proto3" json:"RespPeerId,omitempty"`
	RespPeerPubkey    string `protobuf:"bytes,3,opt,name=RespPeerPubkey,proto3" json:"RespPeerPubkey,omitempty"`
	RespSign          string `protobuf:"bytes,4,opt,name=RespSign,proto3" json:"RespSign,omitempty"`
	IsDirectConnected bool   `protobuf:"varint,5,opt,name=IsDirectConnected,proto3" json:"IsDirectConnected,omitempty"`
}

func (x *AskPeerIdResp) Reset() {
	*x = AskPeerIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskPeerIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskPeerIdResp) ProtoMessage() {}

func (x *AskPeerIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskPeerIdResp.ProtoReflect.Descriptor instead.
func (*AskPeerIdResp) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{7}
}

func (x *AskPeerIdResp) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *AskPeerIdResp) GetRespPeerId() string {
	if x != nil {
		return x.RespPeerId
	}
	return ""
}

func (x *AskPeerIdResp) GetRespPeerPubkey() string {
	if x != nil {
		return x.RespPeerPubkey
	}
	return ""
}

func (x *AskPeerIdResp) GetRespSign() string {
	if x != nil {
		return x.RespSign
	}
	return ""
}

func (x *AskPeerIdResp) GetIsDirectConnected() bool {
	if x != nil {
		return x.IsDirectConnected
	}
	return false
}

type BlockProduced struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockItem *Block `protobuf:"bytes,1,opt,name=BlockItem,proto3" json:"BlockItem,omitempty"`
}

func (x *BlockProduced) Reset() {
	*x = BlockProduced{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockProduced) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockProduced) ProtoMessage() {}

func (x *BlockProduced) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockProduced.ProtoReflect.Descriptor instead.
func (*BlockProduced) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{8}
}

func (x *BlockProduced) GetBlockItem() *Block {
	if x != nil {
		return x.BlockItem
	}
	return nil
}

type ReqBlockResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result          ReqBlkResult `protobuf:"varint,1,opt,name=Result,proto3,enum=quorum.pb.ReqBlkResult" json:"Result,omitempty"`
	ProviderPubkey  string       `protobuf:"bytes,2,opt,name=ProviderPubkey,proto3" json:"ProviderPubkey,omitempty"`
	RequesterPubkey string       `protobuf:"bytes,3,opt,name=RequesterPubkey,proto3" json:"RequesterPubkey,omitempty"`
	GroupId         string       `protobuf:"bytes,4,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	BlockId         string       `protobuf:"bytes,5,opt,name=BlockId,proto3" json:"BlockId,omitempty"`
	Block           []byte       `protobuf:"bytes,6,opt,name=Block,proto3" json:"Block,omitempty"`
}

func (x *ReqBlockResp) Reset() {
	*x = ReqBlockResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBlockResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBlockResp) ProtoMessage() {}

func (x *ReqBlockResp) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBlockResp.ProtoReflect.Descriptor instead.
func (*ReqBlockResp) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{9}
}

func (x *ReqBlockResp) GetResult() ReqBlkResult {
	if x != nil {
		return x.Result
	}
	return ReqBlkResult_BLOCK_IN_TRX
}

func (x *ReqBlockResp) GetProviderPubkey() string {
	if x != nil {
		return x.ProviderPubkey
	}
	return ""
}

func (x *ReqBlockResp) GetRequesterPubkey() string {
	if x != nil {
		return x.RequesterPubkey
	}
	return ""
}

func (x *ReqBlockResp) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *ReqBlockResp) GetBlockId() string {
	if x != nil {
		return x.BlockId
	}
	return ""
}

func (x *ReqBlockResp) GetBlock() []byte {
	if x != nil {
		return x.Block
	}
	return nil
}

type PostItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrxId           string `protobuf:"bytes,1,opt,name=TrxId,proto3" json:"TrxId,omitempty"`
	PublisherPubkey string `protobuf:"bytes,2,opt,name=PublisherPubkey,proto3" json:"PublisherPubkey,omitempty"`
	Content         []byte `protobuf:"bytes,3,opt,name=Content,proto3" json:"Content,omitempty"`
	TimeStamp       int64  `protobuf:"varint,4,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty,string"`
}

func (x *PostItem) Reset() {
	*x = PostItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostItem) ProtoMessage() {}

func (x *PostItem) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostItem.ProtoReflect.Descriptor instead.
func (*PostItem) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{10}
}

func (x *PostItem) GetTrxId() string {
	if x != nil {
		return x.TrxId
	}
	return ""
}

func (x *PostItem) GetPublisherPubkey() string {
	if x != nil {
		return x.PublisherPubkey
	}
	return ""
}

func (x *PostItem) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *PostItem) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

type DenyUserItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId          string `protobuf:"bytes,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	PeerId           string `protobuf:"bytes,2,opt,name=PeerId,proto3" json:"PeerId,omitempty"`
	GroupOwnerPubkey string `protobuf:"bytes,3,opt,name=GroupOwnerPubkey,proto3" json:"GroupOwnerPubkey,omitempty"`
	GroupOwnerSign   string `protobuf:"bytes,4,opt,name=GroupOwnerSign,proto3" json:"GroupOwnerSign,omitempty"`
	TimeStamp        int64  `protobuf:"varint,5,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty,string"`
	Action           string `protobuf:"bytes,6,opt,name=Action,proto3" json:"Action,omitempty"`
	Memo             string `protobuf:"bytes,7,opt,name=Memo,proto3" json:"Memo,omitempty"`
}

func (x *DenyUserItem) Reset() {
	*x = DenyUserItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DenyUserItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DenyUserItem) ProtoMessage() {}

func (x *DenyUserItem) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DenyUserItem.ProtoReflect.Descriptor instead.
func (*DenyUserItem) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{11}
}

func (x *DenyUserItem) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *DenyUserItem) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

func (x *DenyUserItem) GetGroupOwnerPubkey() string {
	if x != nil {
		return x.GroupOwnerPubkey
	}
	return ""
}

func (x *DenyUserItem) GetGroupOwnerSign() string {
	if x != nil {
		return x.GroupOwnerSign
	}
	return ""
}

func (x *DenyUserItem) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *DenyUserItem) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *DenyUserItem) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

type ProducerItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId          string     `protobuf:"bytes,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	ProducerPubkey   string     `protobuf:"bytes,2,opt,name=ProducerPubkey,proto3" json:"ProducerPubkey,omitempty"`
	GroupOwnerPubkey string     `protobuf:"bytes,3,opt,name=GroupOwnerPubkey,proto3" json:"GroupOwnerPubkey,omitempty"`
	GroupOwnerSign   string     `protobuf:"bytes,4,opt,name=GroupOwnerSign,proto3" json:"GroupOwnerSign,omitempty"`
	TimeStamp        int64      `protobuf:"varint,5,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty,string"`
	Action           ActionType `protobuf:"varint,6,opt,name=Action,proto3,enum=quorum.pb.ActionType" json:"Action,omitempty"`
	BlockProduced    int64      `protobuf:"varint,7,opt,name=BlockProduced,proto3" json:"BlockProduced,omitempty"`
	Memo             string     `protobuf:"bytes,8,opt,name=Memo,proto3" json:"Memo,omitempty"`
}

func (x *ProducerItem) Reset() {
	*x = ProducerItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProducerItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProducerItem) ProtoMessage() {}

func (x *ProducerItem) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProducerItem.ProtoReflect.Descriptor instead.
func (*ProducerItem) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{12}
}

func (x *ProducerItem) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *ProducerItem) GetProducerPubkey() string {
	if x != nil {
		return x.ProducerPubkey
	}
	return ""
}

func (x *ProducerItem) GetGroupOwnerPubkey() string {
	if x != nil {
		return x.GroupOwnerPubkey
	}
	return ""
}

func (x *ProducerItem) GetGroupOwnerSign() string {
	if x != nil {
		return x.GroupOwnerSign
	}
	return ""
}

func (x *ProducerItem) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *ProducerItem) GetAction() ActionType {
	if x != nil {
		return x.Action
	}
	return ActionType_ADD
}

func (x *ProducerItem) GetBlockProduced() int64 {
	if x != nil {
		return x.BlockProduced
	}
	return 0
}

func (x *ProducerItem) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

type UserItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId          string     `protobuf:"bytes,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	UserPubkey       string     `protobuf:"bytes,2,opt,name=UserPubkey,proto3" json:"UserPubkey,omitempty"`
	EncryptPubkey    string     `protobuf:"bytes,3,opt,name=EncryptPubkey,proto3" json:"EncryptPubkey,omitempty"`
	GroupOwnerPubkey string     `protobuf:"bytes,4,opt,name=GroupOwnerPubkey,proto3" json:"GroupOwnerPubkey,omitempty"`
	GroupOwnerSign   string     `protobuf:"bytes,5,opt,name=GroupOwnerSign,proto3" json:"GroupOwnerSign,omitempty"`
	TimeStamp        int64      `protobuf:"varint,6,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty,string"`
	Action           ActionType `protobuf:"varint,7,opt,name=Action,proto3,enum=quorum.pb.ActionType" json:"Action,omitempty"`
	Memo             string     `protobuf:"bytes,8,opt,name=Memo,proto3" json:"Memo,omitempty"`
}

func (x *UserItem) Reset() {
	*x = UserItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserItem) ProtoMessage() {}

func (x *UserItem) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserItem.ProtoReflect.Descriptor instead.
func (*UserItem) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{13}
}

func (x *UserItem) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *UserItem) GetUserPubkey() string {
	if x != nil {
		return x.UserPubkey
	}
	return ""
}

func (x *UserItem) GetEncryptPubkey() string {
	if x != nil {
		return x.EncryptPubkey
	}
	return ""
}

func (x *UserItem) GetGroupOwnerPubkey() string {
	if x != nil {
		return x.GroupOwnerPubkey
	}
	return ""
}

func (x *UserItem) GetGroupOwnerSign() string {
	if x != nil {
		return x.GroupOwnerSign
	}
	return ""
}

func (x *UserItem) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *UserItem) GetAction() ActionType {
	if x != nil {
		return x.Action
	}
	return ActionType_ADD
}

func (x *UserItem) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

type AnnounceItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId            string       `protobuf:"bytes,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	SignPubkey         string       `protobuf:"bytes,2,opt,name=SignPubkey,proto3" json:"SignPubkey,omitempty"`
	EncryptPubkey      string       `protobuf:"bytes,3,opt,name=EncryptPubkey,proto3" json:"EncryptPubkey,omitempty"`
	AnnouncerSignature string       `protobuf:"bytes,4,opt,name=AnnouncerSignature,proto3" json:"AnnouncerSignature,omitempty"`
	Type               AnnounceType `protobuf:"varint,5,opt,name=Type,proto3,enum=quorum.pb.AnnounceType" json:"Type,omitempty"`
	OwnerPubkey        string       `protobuf:"bytes,6,opt,name=OwnerPubkey,proto3" json:"OwnerPubkey,omitempty"`
	OwnerSignature     string       `protobuf:"bytes,7,opt,name=OwnerSignature,proto3" json:"OwnerSignature,omitempty"`
	Result             ApproveType  `protobuf:"varint,8,opt,name=Result,proto3,enum=quorum.pb.ApproveType" json:"Result,omitempty"`
	TimeStamp          int64        `protobuf:"varint,9,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty,string"`
	Action             ActionType   `protobuf:"varint,10,opt,name=Action,proto3,enum=quorum.pb.ActionType" json:"Action,omitempty"`
	Memo               string       `protobuf:"bytes,11,opt,name=Memo,proto3" json:"Memo,omitempty"`
}

func (x *AnnounceItem) Reset() {
	*x = AnnounceItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnounceItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnounceItem) ProtoMessage() {}

func (x *AnnounceItem) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnounceItem.ProtoReflect.Descriptor instead.
func (*AnnounceItem) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{14}
}

func (x *AnnounceItem) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *AnnounceItem) GetSignPubkey() string {
	if x != nil {
		return x.SignPubkey
	}
	return ""
}

func (x *AnnounceItem) GetEncryptPubkey() string {
	if x != nil {
		return x.EncryptPubkey
	}
	return ""
}

func (x *AnnounceItem) GetAnnouncerSignature() string {
	if x != nil {
		return x.AnnouncerSignature
	}
	return ""
}

func (x *AnnounceItem) GetType() AnnounceType {
	if x != nil {
		return x.Type
	}
	return AnnounceType_AS_USER
}

func (x *AnnounceItem) GetOwnerPubkey() string {
	if x != nil {
		return x.OwnerPubkey
	}
	return ""
}

func (x *AnnounceItem) GetOwnerSignature() string {
	if x != nil {
		return x.OwnerSignature
	}
	return ""
}

func (x *AnnounceItem) GetResult() ApproveType {
	if x != nil {
		return x.Result
	}
	return ApproveType_ANNOUNCED
}

func (x *AnnounceItem) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *AnnounceItem) GetAction() ActionType {
	if x != nil {
		return x.Action
	}
	return ActionType_ADD
}

func (x *AnnounceItem) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

type SchemaItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId          string     `protobuf:"bytes,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	GroupOwnerPubkey string     `protobuf:"bytes,2,opt,name=GroupOwnerPubkey,proto3" json:"GroupOwnerPubkey,omitempty"`
	GroupOwnerSign   string     `protobuf:"bytes,3,opt,name=GroupOwnerSign,proto3" json:"GroupOwnerSign,omitempty"`
	Type             string     `protobuf:"bytes,4,opt,name=Type,proto3" json:"Type,omitempty"`
	Rule             string     `protobuf:"bytes,5,opt,name=Rule,proto3" json:"Rule,omitempty"`
	TimeStamp        int64      `protobuf:"varint,6,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty,string"`
	Action           ActionType `protobuf:"varint,7,opt,name=Action,proto3,enum=quorum.pb.ActionType" json:"Action,omitempty"`
}

func (x *SchemaItem) Reset() {
	*x = SchemaItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaItem) ProtoMessage() {}

func (x *SchemaItem) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaItem.ProtoReflect.Descriptor instead.
func (*SchemaItem) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{15}
}

func (x *SchemaItem) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *SchemaItem) GetGroupOwnerPubkey() string {
	if x != nil {
		return x.GroupOwnerPubkey
	}
	return ""
}

func (x *SchemaItem) GetGroupOwnerSign() string {
	if x != nil {
		return x.GroupOwnerSign
	}
	return ""
}

func (x *SchemaItem) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SchemaItem) GetRule() string {
	if x != nil {
		return x.Rule
	}
	return ""
}

func (x *SchemaItem) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *SchemaItem) GetAction() ActionType {
	if x != nil {
		return x.Action
	}
	return ActionType_ADD
}

type GroupItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId           string            `protobuf:"bytes,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	GroupName         string            `protobuf:"bytes,2,opt,name=GroupName,proto3" json:"GroupName,omitempty"`
	OwnerPubKey       string            `protobuf:"bytes,3,opt,name=OwnerPubKey,proto3" json:"OwnerPubKey,omitempty"`
	UserSignPubkey    string            `protobuf:"bytes,4,opt,name=UserSignPubkey,proto3" json:"UserSignPubkey,omitempty"`
	UserEncryptPubkey string            `protobuf:"bytes,5,opt,name=UserEncryptPubkey,proto3" json:"UserEncryptPubkey,omitempty"`
	LastUpdate        int64             `protobuf:"varint,6,opt,name=LastUpdate,proto3" json:"LastUpdate,omitempty"`
	HighestHeight     int64             `protobuf:"varint,7,opt,name=HighestHeight,proto3" json:"HighestHeight,omitempty"`
	HighestBlockId    string            `protobuf:"bytes,8,opt,name=HighestBlockId,proto3" json:"HighestBlockId,omitempty"`
	GenesisBlock      *Block            `protobuf:"bytes,9,opt,name=GenesisBlock,proto3" json:"GenesisBlock,omitempty"`
	EncryptType       GroupEncryptType  `protobuf:"varint,10,opt,name=EncryptType,proto3,enum=quorum.pb.GroupEncryptType" json:"EncryptType,omitempty"`
	ConsenseType      GroupConsenseType `protobuf:"varint,11,opt,name=ConsenseType,proto3,enum=quorum.pb.GroupConsenseType" json:"ConsenseType,omitempty"`
	CipherKey         string            `protobuf:"bytes,12,opt,name=CipherKey,proto3" json:"CipherKey,omitempty"`
	AppKey            string            `protobuf:"bytes,13,opt,name=AppKey,proto3" json:"AppKey,omitempty"`
}

func (x *GroupItem) Reset() {
	*x = GroupItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupItem) ProtoMessage() {}

func (x *GroupItem) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupItem.ProtoReflect.Descriptor instead.
func (*GroupItem) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{16}
}

func (x *GroupItem) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GroupItem) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *GroupItem) GetOwnerPubKey() string {
	if x != nil {
		return x.OwnerPubKey
	}
	return ""
}

func (x *GroupItem) GetUserSignPubkey() string {
	if x != nil {
		return x.UserSignPubkey
	}
	return ""
}

func (x *GroupItem) GetUserEncryptPubkey() string {
	if x != nil {
		return x.UserEncryptPubkey
	}
	return ""
}

func (x *GroupItem) GetLastUpdate() int64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

func (x *GroupItem) GetHighestHeight() int64 {
	if x != nil {
		return x.HighestHeight
	}
	return 0
}

func (x *GroupItem) GetHighestBlockId() string {
	if x != nil {
		return x.HighestBlockId
	}
	return ""
}

func (x *GroupItem) GetGenesisBlock() *Block {
	if x != nil {
		return x.GenesisBlock
	}
	return nil
}

func (x *GroupItem) GetEncryptType() GroupEncryptType {
	if x != nil {
		return x.EncryptType
	}
	return GroupEncryptType_PUBLIC
}

func (x *GroupItem) GetConsenseType() GroupConsenseType {
	if x != nil {
		return x.ConsenseType
	}
	return GroupConsenseType_POA
}

func (x *GroupItem) GetCipherKey() string {
	if x != nil {
		return x.CipherKey
	}
	return ""
}

func (x *GroupItem) GetAppKey() string {
	if x != nil {
		return x.AppKey
	}
	return ""
}

type GroupItemV0 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId           string            `protobuf:"bytes,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	GroupName         string            `protobuf:"bytes,2,opt,name=GroupName,proto3" json:"GroupName,omitempty"`
	OwnerPubKey       string            `protobuf:"bytes,3,opt,name=OwnerPubKey,proto3" json:"OwnerPubKey,omitempty"`
	UserSignPubkey    string            `protobuf:"bytes,4,opt,name=UserSignPubkey,proto3" json:"UserSignPubkey,omitempty"`
	UserEncryptPubkey string            `protobuf:"bytes,5,opt,name=UserEncryptPubkey,proto3" json:"UserEncryptPubkey,omitempty"`
	UserRole          RoleV0            `protobuf:"varint,6,opt,name=UserRole,proto3,enum=quorum.pb.RoleV0" json:"UserRole,omitempty"`
	LastUpdate        int64             `protobuf:"varint,7,opt,name=LastUpdate,proto3" json:"LastUpdate,omitempty"`
	HighestHeight     int64             `protobuf:"varint,8,opt,name=HighestHeight,proto3" json:"HighestHeight,omitempty"`
	HighestBlockId    string            `protobuf:"bytes,9,opt,name=HighestBlockId,proto3" json:"HighestBlockId,omitempty"`
	GenesisBlock      *Block            `protobuf:"bytes,10,opt,name=GenesisBlock,proto3" json:"GenesisBlock,omitempty"`
	EncryptType       GroupEncryptType  `protobuf:"varint,11,opt,name=EncryptType,proto3,enum=quorum.pb.GroupEncryptType" json:"EncryptType,omitempty"`
	ConsenseType      GroupConsenseType `protobuf:"varint,12,opt,name=ConsenseType,proto3,enum=quorum.pb.GroupConsenseType" json:"ConsenseType,omitempty"`
	CipherKey         string            `protobuf:"bytes,13,opt,name=CipherKey,proto3" json:"CipherKey,omitempty"`
	AppKey            string            `protobuf:"bytes,14,opt,name=AppKey,proto3" json:"AppKey,omitempty"`
}

func (x *GroupItemV0) Reset() {
	*x = GroupItemV0{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupItemV0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupItemV0) ProtoMessage() {}

func (x *GroupItemV0) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupItemV0.ProtoReflect.Descriptor instead.
func (*GroupItemV0) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{17}
}

func (x *GroupItemV0) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GroupItemV0) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *GroupItemV0) GetOwnerPubKey() string {
	if x != nil {
		return x.OwnerPubKey
	}
	return ""
}

func (x *GroupItemV0) GetUserSignPubkey() string {
	if x != nil {
		return x.UserSignPubkey
	}
	return ""
}

func (x *GroupItemV0) GetUserEncryptPubkey() string {
	if x != nil {
		return x.UserEncryptPubkey
	}
	return ""
}

func (x *GroupItemV0) GetUserRole() RoleV0 {
	if x != nil {
		return x.UserRole
	}
	return RoleV0_GROUP_PRODUCER
}

func (x *GroupItemV0) GetLastUpdate() int64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

func (x *GroupItemV0) GetHighestHeight() int64 {
	if x != nil {
		return x.HighestHeight
	}
	return 0
}

func (x *GroupItemV0) GetHighestBlockId() string {
	if x != nil {
		return x.HighestBlockId
	}
	return ""
}

func (x *GroupItemV0) GetGenesisBlock() *Block {
	if x != nil {
		return x.GenesisBlock
	}
	return nil
}

func (x *GroupItemV0) GetEncryptType() GroupEncryptType {
	if x != nil {
		return x.EncryptType
	}
	return GroupEncryptType_PUBLIC
}

func (x *GroupItemV0) GetConsenseType() GroupConsenseType {
	if x != nil {
		return x.ConsenseType
	}
	return GroupConsenseType_POA
}

func (x *GroupItemV0) GetCipherKey() string {
	if x != nil {
		return x.CipherKey
	}
	return ""
}

func (x *GroupItemV0) GetAppKey() string {
	if x != nil {
		return x.AppKey
	}
	return ""
}

type GroupConfigItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId     string          `protobuf:"bytes,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	Action      ActionType      `protobuf:"varint,2,opt,name=Action,proto3,enum=quorum.pb.ActionType" json:"Action,omitempty"`
	Name        string          `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Type        GroupConfigType `protobuf:"varint,4,opt,name=Type,proto3,enum=quorum.pb.GroupConfigType" json:"Type,omitempty"`
	Value       string          `protobuf:"bytes,5,opt,name=Value,proto3" json:"Value,omitempty"`
	OwnerPubkey string          `protobuf:"bytes,6,opt,name=OwnerPubkey,proto3" json:"OwnerPubkey,omitempty"`
	OwnerSign   string          `protobuf:"bytes,7,opt,name=OwnerSign,proto3" json:"OwnerSign,omitempty"`
	Memo        string          `protobuf:"bytes,8,opt,name=Memo,proto3" json:"Memo,omitempty"`
	TimeStamp   int64           `protobuf:"varint,9,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty,string"`
}

func (x *GroupConfigItem) Reset() {
	*x = GroupConfigItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupConfigItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupConfigItem) ProtoMessage() {}

func (x *GroupConfigItem) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupConfigItem.ProtoReflect.Descriptor instead.
func (*GroupConfigItem) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{18}
}

func (x *GroupConfigItem) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GroupConfigItem) GetAction() ActionType {
	if x != nil {
		return x.Action
	}
	return ActionType_ADD
}

func (x *GroupConfigItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GroupConfigItem) GetType() GroupConfigType {
	if x != nil {
		return x.Type
	}
	return GroupConfigType_INT
}

func (x *GroupConfigItem) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *GroupConfigItem) GetOwnerPubkey() string {
	if x != nil {
		return x.OwnerPubkey
	}
	return ""
}

func (x *GroupConfigItem) GetOwnerSign() string {
	if x != nil {
		return x.OwnerSign
	}
	return ""
}

func (x *GroupConfigItem) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *GroupConfigItem) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

type PSPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seqnum    int32  `protobuf:"varint,1,opt,name=Seqnum,proto3" json:"Seqnum,omitempty"`
	IsResp    bool   `protobuf:"varint,2,opt,name=IsResp,proto3" json:"IsResp,omitempty"`
	TimeStamp int64  `protobuf:"varint,3,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty,string"`
	Payload   []byte `protobuf:"bytes,4,opt,name=Payload,proto3" json:"Payload,omitempty"`
}

func (x *PSPing) Reset() {
	*x = PSPing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PSPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PSPing) ProtoMessage() {}

func (x *PSPing) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PSPing.ProtoReflect.Descriptor instead.
func (*PSPing) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{19}
}

func (x *PSPing) GetSeqnum() int32 {
	if x != nil {
		return x.Seqnum
	}
	return 0
}

func (x *PSPing) GetIsResp() bool {
	if x != nil {
		return x.IsResp
	}
	return false
}

func (x *PSPing) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *PSPing) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type GroupSeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GenesisBlock   *Block `protobuf:"bytes,1,opt,name=GenesisBlock,proto3" json:"GenesisBlock,omitempty"`
	GroupId        string `protobuf:"bytes,2,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	GroupName      string `protobuf:"bytes,3,opt,name=GroupName,proto3" json:"GroupName,omitempty"`
	OwnerPubkey    string `protobuf:"bytes,4,opt,name=OwnerPubkey,proto3" json:"OwnerPubkey,omitempty"`
	ConsensusType  string `protobuf:"bytes,5,opt,name=ConsensusType,proto3" json:"ConsensusType,omitempty"`
	EncryptionType string `protobuf:"bytes,6,opt,name=EncryptionType,proto3" json:"EncryptionType,omitempty"`
	CipherKey      string `protobuf:"bytes,7,opt,name=CipherKey,proto3" json:"CipherKey,omitempty"`
	AppKey         string `protobuf:"bytes,8,opt,name=AppKey,proto3" json:"AppKey,omitempty"`
	Signature      string `protobuf:"bytes,9,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (x *GroupSeed) Reset() {
	*x = GroupSeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupSeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupSeed) ProtoMessage() {}

func (x *GroupSeed) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupSeed.ProtoReflect.Descriptor instead.
func (*GroupSeed) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{20}
}

func (x *GroupSeed) GetGenesisBlock() *Block {
	if x != nil {
		return x.GenesisBlock
	}
	return nil
}

func (x *GroupSeed) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GroupSeed) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *GroupSeed) GetOwnerPubkey() string {
	if x != nil {
		return x.OwnerPubkey
	}
	return ""
}

func (x *GroupSeed) GetConsensusType() string {
	if x != nil {
		return x.ConsensusType
	}
	return ""
}

func (x *GroupSeed) GetEncryptionType() string {
	if x != nil {
		return x.EncryptionType
	}
	return ""
}

func (x *GroupSeed) GetCipherKey() string {
	if x != nil {
		return x.CipherKey
	}
	return ""
}

func (x *GroupSeed) GetAppKey() string {
	if x != nil {
		return x.AppKey
	}
	return ""
}

func (x *GroupSeed) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

var File_chain_proto protoreflect.FileDescriptor

var file_chain_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x71,
	0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x22, 0x49, 0x0a, 0x07, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x22, 0xbf, 0x02, 0x0a, 0x03, 0x54, 0x72, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x72, 0x78, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x72, 0x78, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x78, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x73,
	0x65, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4e,
	0x6f, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4e, 0x6f, 0x6e, 0x63,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50,
	0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53,
	0x69, 0x67, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x53, 0x69, 0x67, 0x6e, 0x22, 0x9d, 0x02, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x18, 0x0a, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x76, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x65, 0x76, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x04, 0x54, 0x72, 0x78,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d,
	0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x78, 0x52, 0x04, 0x54, 0x72, 0x78, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x50,
	0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xb6, 0x01, 0x0a, 0x0c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44,
	0x62, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x75, 0x62, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x56,
	0x0a, 0x08, 0x52, 0x65, 0x71, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x79, 0x6e, 0x63, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x74,
	0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75,
	0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x95, 0x01, 0x0a, 0x09, 0x41, 0x73, 0x6b, 0x50, 0x65, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x65, 0x6d,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x22, 0xbb, 0x01,
	0x0a, 0x0d, 0x41, 0x73, 0x6b, 0x50, 0x65, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x73,
	0x70, 0x50, 0x65, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52,
	0x65, 0x73, 0x70, 0x50, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x73,
	0x70, 0x50, 0x65, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x50, 0x65, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x2c, 0x0a,
	0x11, 0x49, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x49, 0x73, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x3f, 0x0a, 0x0d, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x09,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x22, 0xdb, 0x01, 0x0a,
	0x0c, 0x52, 0x65, 0x71, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x42, 0x6c, 0x6b,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x82, 0x01, 0x0a, 0x08, 0x50,
	0x6f, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x72, 0x78, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x72, 0x78, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x0f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0xde, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6e, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x65,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x65, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x26,
	0x0a, 0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x4d, 0x65, 0x6d, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x65, 0x6d, 0x6f,
	0x22, 0xab, 0x02, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x50, 0x75, 0x62,
	0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12,
	0x26, 0x0a, 0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x53, 0x69, 0x67,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2d, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70,
	0x62, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x65,
	0x6d, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x22, 0x9f,
	0x02, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2d, 0x0a,
	0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x4d, 0x65, 0x6d, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x65, 0x6d, 0x6f,
	0x22, 0xa6, 0x03, 0x0a, 0x0c, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x53,
	0x69, 0x67, 0x6e, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x50, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x12, 0x2e, 0x0a, 0x12, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x41,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x2b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x6e, 0x6e, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79,
	0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75,
	0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2d, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e,
	0x70, 0x62, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x22, 0xef, 0x01, 0x0a, 0x0a, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x26,
	0x0a, 0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x75,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2d, 0x0a, 0x06,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x71,
	0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x96, 0x04, 0x0a, 0x09,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62,
	0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x50,
	0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x55,
	0x73, 0x65, 0x72, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x4c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x48, 0x69, 0x67,
	0x68, 0x65, 0x73, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x26, 0x0a, 0x0e, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x73,
	0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x0c, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3d, 0x0a,
	0x0b, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0c,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x70,
	0x70, 0x4b, 0x65, 0x79, 0x22, 0xc7, 0x04, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x74,
	0x65, 0x6d, 0x56, 0x30, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x26,
	0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e,
	0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x50, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x56, 0x30, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x6f, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x48, 0x69, 0x67, 0x68,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x48, 0x69, 0x67,
	0x68, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49,
	0x64, 0x12, 0x34, 0x0a, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d,
	0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x73,
	0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3d, 0x0a, 0x0b, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x71,
	0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x71,
	0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x69, 0x70, 0x68,
	0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x69, 0x70,
	0x68, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x22, 0xa6,
	0x02, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x06,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x71,
	0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x53, 0x69, 0x67, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x70, 0x0a, 0x06, 0x50, 0x53, 0x50, 0x69, 0x6e,
	0x67, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x71, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x53, 0x65, 0x71, 0x6e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xbd, 0x02, 0x0a, 0x09, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x65, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x73,
	0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x0c, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x18, 0x0a,
	0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72,
	0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2a, 0x21, 0x0a, 0x0b, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x52, 0x58, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x01, 0x2a, 0xef, 0x01, 0x0a,
	0x07, 0x54, 0x72, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x55, 0x54, 0x48, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x44,
	0x55, 0x43, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4e, 0x4e, 0x4f, 0x55, 0x4e,
	0x43, 0x45, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x51, 0x5f, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x52,
	0x45, 0x51, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x57, 0x41, 0x52,
	0x44, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x51, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x4c, 0x4f, 0x43, 0x4b,
	0x5f, 0x53, 0x59, 0x4e, 0x43, 0x45, 0x44, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x4c, 0x4f,
	0x43, 0x4b, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x44, 0x10, 0x09, 0x12, 0x08, 0x0a,
	0x04, 0x55, 0x53, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x53, 0x4b, 0x5f, 0x50,
	0x45, 0x45, 0x52, 0x49, 0x44, 0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x53, 0x4b, 0x5f, 0x50,
	0x45, 0x45, 0x52, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x0c, 0x12, 0x10, 0x0a, 0x0c,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x0d, 0x2a, 0x41,
	0x0a, 0x0c, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x41, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41,
	0x53, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x52, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x41, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x10,
	0x02, 0x2a, 0x38, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0d, 0x0a, 0x09, 0x41, 0x4e, 0x4e, 0x4f, 0x55, 0x4e, 0x43, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x21, 0x0a, 0x0a, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x44,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x01, 0x2a, 0x35,
	0x0a, 0x0c, 0x52, 0x65, 0x71, 0x42, 0x6c, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x10,
	0x0a, 0x0c, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x49, 0x4e, 0x5f, 0x54, 0x52, 0x58, 0x10, 0x00,
	0x12, 0x13, 0x0a, 0x0f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x01, 0x2a, 0x2b, 0x0a, 0x10, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55, 0x42,
	0x4c, 0x49, 0x43, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45,
	0x10, 0x01, 0x2a, 0x25, 0x0a, 0x11, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x4f, 0x41, 0x10, 0x00,
	0x12, 0x07, 0x0a, 0x03, 0x50, 0x4f, 0x53, 0x10, 0x01, 0x2a, 0x2c, 0x0a, 0x06, 0x52, 0x6f, 0x6c,
	0x65, 0x56, 0x30, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x50, 0x52, 0x4f,
	0x44, 0x55, 0x43, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x2a, 0x30, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e,
	0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x75, 0x6d, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chain_proto_rawDescOnce sync.Once
	file_chain_proto_rawDescData = file_chain_proto_rawDesc
)

func file_chain_proto_rawDescGZIP() []byte {
	file_chain_proto_rawDescOnce.Do(func() {
		file_chain_proto_rawDescData = protoimpl.X.CompressGZIP(file_chain_proto_rawDescData)
	})
	return file_chain_proto_rawDescData
}

var file_chain_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_chain_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_chain_proto_goTypes = []interface{}{
	(PackageType)(0),        // 0: quorum.pb.PackageType
	(TrxType)(0),            // 1: quorum.pb.TrxType
	(AnnounceType)(0),       // 2: quorum.pb.AnnounceType
	(ApproveType)(0),        // 3: quorum.pb.ApproveType
	(ActionType)(0),         // 4: quorum.pb.ActionType
	(ReqBlkResult)(0),       // 5: quorum.pb.ReqBlkResult
	(GroupEncryptType)(0),   // 6: quorum.pb.GroupEncryptType
	(GroupConsenseType)(0),  // 7: quorum.pb.GroupConsenseType
	(RoleV0)(0),             // 8: quorum.pb.RoleV0
	(GroupConfigType)(0),    // 9: quorum.pb.GroupConfigType
	(*Package)(nil),         // 10: quorum.pb.Package
	(*Trx)(nil),             // 11: quorum.pb.Trx
	(*Block)(nil),           // 12: quorum.pb.Block
	(*BlockDbChunk)(nil),    // 13: quorum.pb.BlockDbChunk
	(*ReqBlock)(nil),        // 14: quorum.pb.ReqBlock
	(*BlockSynced)(nil),     // 15: quorum.pb.BlockSynced
	(*AskPeerId)(nil),       // 16: quorum.pb.AskPeerId
	(*AskPeerIdResp)(nil),   // 17: quorum.pb.AskPeerIdResp
	(*BlockProduced)(nil),   // 18: quorum.pb.BlockProduced
	(*ReqBlockResp)(nil),    // 19: quorum.pb.ReqBlockResp
	(*PostItem)(nil),        // 20: quorum.pb.PostItem
	(*DenyUserItem)(nil),    // 21: quorum.pb.DenyUserItem
	(*ProducerItem)(nil),    // 22: quorum.pb.ProducerItem
	(*UserItem)(nil),        // 23: quorum.pb.UserItem
	(*AnnounceItem)(nil),    // 24: quorum.pb.AnnounceItem
	(*SchemaItem)(nil),      // 25: quorum.pb.SchemaItem
	(*GroupItem)(nil),       // 26: quorum.pb.GroupItem
	(*GroupItemV0)(nil),     // 27: quorum.pb.GroupItemV0
	(*GroupConfigItem)(nil), // 28: quorum.pb.GroupConfigItem
	(*PSPing)(nil),          // 29: quorum.pb.PSPing
	(*GroupSeed)(nil),       // 30: quorum.pb.GroupSeed
}
var file_chain_proto_depIdxs = []int32{
	0,  // 0: quorum.pb.Package.type:type_name -> quorum.pb.PackageType
	1,  // 1: quorum.pb.Trx.Type:type_name -> quorum.pb.TrxType
	11, // 2: quorum.pb.Block.Trxs:type_name -> quorum.pb.Trx
	12, // 3: quorum.pb.BlockDbChunk.BlockItem:type_name -> quorum.pb.Block
	12, // 4: quorum.pb.BlockSynced.BlockItem:type_name -> quorum.pb.Block
	12, // 5: quorum.pb.BlockProduced.BlockItem:type_name -> quorum.pb.Block
	5,  // 6: quorum.pb.ReqBlockResp.Result:type_name -> quorum.pb.ReqBlkResult
	4,  // 7: quorum.pb.ProducerItem.Action:type_name -> quorum.pb.ActionType
	4,  // 8: quorum.pb.UserItem.Action:type_name -> quorum.pb.ActionType
	2,  // 9: quorum.pb.AnnounceItem.Type:type_name -> quorum.pb.AnnounceType
	3,  // 10: quorum.pb.AnnounceItem.Result:type_name -> quorum.pb.ApproveType
	4,  // 11: quorum.pb.AnnounceItem.Action:type_name -> quorum.pb.ActionType
	4,  // 12: quorum.pb.SchemaItem.Action:type_name -> quorum.pb.ActionType
	12, // 13: quorum.pb.GroupItem.GenesisBlock:type_name -> quorum.pb.Block
	6,  // 14: quorum.pb.GroupItem.EncryptType:type_name -> quorum.pb.GroupEncryptType
	7,  // 15: quorum.pb.GroupItem.ConsenseType:type_name -> quorum.pb.GroupConsenseType
	8,  // 16: quorum.pb.GroupItemV0.UserRole:type_name -> quorum.pb.RoleV0
	12, // 17: quorum.pb.GroupItemV0.GenesisBlock:type_name -> quorum.pb.Block
	6,  // 18: quorum.pb.GroupItemV0.EncryptType:type_name -> quorum.pb.GroupEncryptType
	7,  // 19: quorum.pb.GroupItemV0.ConsenseType:type_name -> quorum.pb.GroupConsenseType
	4,  // 20: quorum.pb.GroupConfigItem.Action:type_name -> quorum.pb.ActionType
	9,  // 21: quorum.pb.GroupConfigItem.Type:type_name -> quorum.pb.GroupConfigType
	12, // 22: quorum.pb.GroupSeed.GenesisBlock:type_name -> quorum.pb.Block
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_chain_proto_init() }
func file_chain_proto_init() {
	if File_chain_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chain_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Package); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockDbChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockSynced); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AskPeerId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AskPeerIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockProduced); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBlockResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DenyUserItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProducerItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnounceItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemaItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupItemV0); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupConfigItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PSPing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupSeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chain_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chain_proto_goTypes,
		DependencyIndexes: file_chain_proto_depIdxs,
		EnumInfos:         file_chain_proto_enumTypes,
		MessageInfos:      file_chain_proto_msgTypes,
	}.Build()
	File_chain_proto = out.File
	file_chain_proto_rawDesc = nil
	file_chain_proto_goTypes = nil
	file_chain_proto_depIdxs = nil
}
