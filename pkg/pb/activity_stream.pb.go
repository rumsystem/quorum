// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.18.1
// source: activity_stream.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type File_Compression int32

const (
	File_none File_Compression = 0
	File_gz   File_Compression = 1
	File_zip  File_Compression = 2
	File_zstd File_Compression = 3
)

// Enum value maps for File_Compression.
var (
	File_Compression_name = map[int32]string{
		0: "none",
		1: "gz",
		2: "zip",
		3: "zstd",
	}
	File_Compression_value = map[string]int32{
		"none": 0,
		"gz":   1,
		"zip":  2,
		"zstd": 3,
	}
)

func (x File_Compression) Enum() *File_Compression {
	p := new(File_Compression)
	*p = x
	return p
}

func (x File_Compression) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (File_Compression) Descriptor() protoreflect.EnumDescriptor {
	return file_activity_stream_proto_enumTypes[0].Descriptor()
}

func (File_Compression) Type() protoreflect.EnumType {
	return &file_activity_stream_proto_enumTypes[0]
}

func (x File_Compression) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use File_Compression.Descriptor instead.
func (File_Compression) EnumDescriptor() ([]byte, []int) {
	return file_activity_stream_proto_rawDescGZIP(), []int{5, 0}
}

type AnyObj struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Any *anypb.Any `protobuf:"bytes,1,opt,name=any,proto3" json:"any,omitempty"`
}

func (x *AnyObj) Reset() {
	*x = AnyObj{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_stream_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnyObj) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnyObj) ProtoMessage() {}

func (x *AnyObj) ProtoReflect() protoreflect.Message {
	mi := &file_activity_stream_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnyObj.ProtoReflect.Descriptor instead.
func (*AnyObj) Descriptor() ([]byte, []int) {
	return file_activity_stream_proto_rawDescGZIP(), []int{0}
}

func (x *AnyObj) GetAny() *anypb.Any {
	if x != nil {
		return x.Any
	}
	return nil
}

type Object struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type         string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Attachments  []*Object              `protobuf:"bytes,3,rep,name=attachments,proto3" json:"attachments,omitempty"`
	AttributedTo []*Object              `protobuf:"bytes,4,rep,name=attributedTo,proto3" json:"attributedTo,omitempty"`
	Audience     *Object                `protobuf:"bytes,5,opt,name=audience,proto3" json:"audience,omitempty"`
	Content      string                 `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
	Context      *Object                `protobuf:"bytes,7,opt,name=context,proto3" json:"context,omitempty"`
	Name         string                 `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	Endtime      *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=endtime,proto3" json:"endtime,omitempty"`
	Generator    *Object                `protobuf:"bytes,10,opt,name=generator,proto3" json:"generator,omitempty"`
	Icon         []*Object              `protobuf:"bytes,11,rep,name=icon,proto3" json:"icon,omitempty"`
	Image        []*Image               `protobuf:"bytes,12,rep,name=image,proto3" json:"image,omitempty"`
	Inreplyto    *Reply                 `protobuf:"bytes,13,opt,name=inreplyto,proto3" json:"inreplyto,omitempty"`
	Location     *Object                `protobuf:"bytes,14,opt,name=location,proto3" json:"location,omitempty"`
	Preview      *Object                `protobuf:"bytes,15,opt,name=preview,proto3" json:"preview,omitempty"`
	Published    *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=published,proto3" json:"published,omitempty"`
	Replies      *Object                `protobuf:"bytes,17,opt,name=replies,proto3" json:"replies,omitempty"`
	StartTime    *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=startTime,proto3" json:"startTime,omitempty"`
	Summary      string                 `protobuf:"bytes,19,opt,name=summary,proto3" json:"summary,omitempty"`
	Tag          []*Object              `protobuf:"bytes,20,rep,name=tag,proto3" json:"tag,omitempty"`
	Updated      *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=updated,proto3" json:"updated,omitempty"`
	Url          []*Link                `protobuf:"bytes,22,rep,name=url,proto3" json:"url,omitempty"`
	To           []*Object              `protobuf:"bytes,23,rep,name=to,proto3" json:"to,omitempty"`
	Bto          []*Object              `protobuf:"bytes,24,rep,name=bto,proto3" json:"bto,omitempty"`
	Cc           []*Object              `protobuf:"bytes,25,rep,name=cc,proto3" json:"cc,omitempty"`
	Bcc          []*Object              `protobuf:"bytes,26,rep,name=bcc,proto3" json:"bcc,omitempty"`
	MediaType    string                 `protobuf:"bytes,27,opt,name=mediaType,proto3" json:"mediaType,omitempty"`
	Duration     string                 `protobuf:"bytes,28,opt,name=duration,proto3" json:"duration,omitempty"`
	File         *File                  `protobuf:"bytes,29,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *Object) Reset() {
	*x = Object{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_stream_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Object) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Object) ProtoMessage() {}

func (x *Object) ProtoReflect() protoreflect.Message {
	mi := &file_activity_stream_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Object.ProtoReflect.Descriptor instead.
func (*Object) Descriptor() ([]byte, []int) {
	return file_activity_stream_proto_rawDescGZIP(), []int{1}
}

func (x *Object) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Object) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Object) GetAttachments() []*Object {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *Object) GetAttributedTo() []*Object {
	if x != nil {
		return x.AttributedTo
	}
	return nil
}

func (x *Object) GetAudience() *Object {
	if x != nil {
		return x.Audience
	}
	return nil
}

func (x *Object) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Object) GetContext() *Object {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *Object) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Object) GetEndtime() *timestamppb.Timestamp {
	if x != nil {
		return x.Endtime
	}
	return nil
}

func (x *Object) GetGenerator() *Object {
	if x != nil {
		return x.Generator
	}
	return nil
}

func (x *Object) GetIcon() []*Object {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *Object) GetImage() []*Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Object) GetInreplyto() *Reply {
	if x != nil {
		return x.Inreplyto
	}
	return nil
}

func (x *Object) GetLocation() *Object {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Object) GetPreview() *Object {
	if x != nil {
		return x.Preview
	}
	return nil
}

func (x *Object) GetPublished() *timestamppb.Timestamp {
	if x != nil {
		return x.Published
	}
	return nil
}

func (x *Object) GetReplies() *Object {
	if x != nil {
		return x.Replies
	}
	return nil
}

func (x *Object) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Object) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *Object) GetTag() []*Object {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *Object) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *Object) GetUrl() []*Link {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *Object) GetTo() []*Object {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *Object) GetBto() []*Object {
	if x != nil {
		return x.Bto
	}
	return nil
}

func (x *Object) GetCc() []*Object {
	if x != nil {
		return x.Cc
	}
	return nil
}

func (x *Object) GetBcc() []*Object {
	if x != nil {
		return x.Bcc
	}
	return nil
}

func (x *Object) GetMediaType() string {
	if x != nil {
		return x.MediaType
	}
	return ""
}

func (x *Object) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *Object) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

type Link struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Href      string   `protobuf:"bytes,1,opt,name=href,proto3" json:"href,omitempty"`
	Rel       []string `protobuf:"bytes,2,rep,name=rel,proto3" json:"rel,omitempty"`
	MediaType string   `protobuf:"bytes,3,opt,name=mediaType,proto3" json:"mediaType,omitempty"`
	Name      string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Hreflang  string   `protobuf:"bytes,5,opt,name=hreflang,proto3" json:"hreflang,omitempty"`
	Height    uint32   `protobuf:"varint,6,opt,name=height,proto3" json:"height,omitempty"`
	Width     uint32   `protobuf:"varint,7,opt,name=width,proto3" json:"width,omitempty"`
	Preview   *Object  `protobuf:"bytes,8,opt,name=preview,proto3" json:"preview,omitempty"`
}

func (x *Link) Reset() {
	*x = Link{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_stream_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Link) ProtoMessage() {}

func (x *Link) ProtoReflect() protoreflect.Message {
	mi := &file_activity_stream_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Link.ProtoReflect.Descriptor instead.
func (*Link) Descriptor() ([]byte, []int) {
	return file_activity_stream_proto_rawDescGZIP(), []int{2}
}

func (x *Link) GetHref() string {
	if x != nil {
		return x.Href
	}
	return ""
}

func (x *Link) GetRel() []string {
	if x != nil {
		return x.Rel
	}
	return nil
}

func (x *Link) GetMediaType() string {
	if x != nil {
		return x.MediaType
	}
	return ""
}

func (x *Link) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Link) GetHreflang() string {
	if x != nil {
		return x.Hreflang
	}
	return ""
}

func (x *Link) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Link) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Link) GetPreview() *Object {
	if x != nil {
		return x.Preview
	}
	return nil
}

type Reply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trxid   string `protobuf:"bytes,1,opt,name=trxid,proto3" json:"trxid,omitempty"`
	Groupid string `protobuf:"bytes,2,opt,name=groupid,proto3" json:"groupid,omitempty"`
}

func (x *Reply) Reset() {
	*x = Reply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_stream_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reply) ProtoMessage() {}

func (x *Reply) ProtoReflect() protoreflect.Message {
	mi := &file_activity_stream_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reply.ProtoReflect.Descriptor instead.
func (*Reply) Descriptor() ([]byte, []int) {
	return file_activity_stream_proto_rawDescGZIP(), []int{3}
}

func (x *Reply) GetTrxid() string {
	if x != nil {
		return x.Trxid
	}
	return ""
}

func (x *Reply) GetGroupid() string {
	if x != nil {
		return x.Groupid
	}
	return ""
}

type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MediaType string `protobuf:"bytes,3,opt,name=mediaType,proto3" json:"mediaType,omitempty"`
	Content   []byte `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	Url       string `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Image) Reset() {
	*x = Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_stream_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_activity_stream_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_activity_stream_proto_rawDescGZIP(), []int{4}
}

func (x *Image) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Image) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Image) GetMediaType() string {
	if x != nil {
		return x.MediaType
	}
	return ""
}

func (x *Image) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Image) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MediaType   string           `protobuf:"bytes,3,opt,name=mediaType,proto3" json:"mediaType,omitempty"`
	Compression File_Compression `protobuf:"varint,4,opt,name=compression,proto3,enum=quorum.pb.File_Compression" json:"compression,omitempty"`
	Content     []byte           `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	Url         string           `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_stream_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_activity_stream_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_activity_stream_proto_rawDescGZIP(), []int{5}
}

func (x *File) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *File) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *File) GetMediaType() string {
	if x != nil {
		return x.MediaType
	}
	return ""
}

func (x *File) GetCompression() File_Compression {
	if x != nil {
		return x.Compression
	}
	return File_none
}

func (x *File) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *File) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type Person struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Image  *Image     `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	Wallet []*Payment `protobuf:"bytes,11,rep,name=wallet,proto3" json:"wallet,omitempty"`
}

func (x *Person) Reset() {
	*x = Person{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_stream_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Person) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Person) ProtoMessage() {}

func (x *Person) ProtoReflect() protoreflect.Message {
	mi := &file_activity_stream_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Person.ProtoReflect.Descriptor instead.
func (*Person) Descriptor() ([]byte, []int) {
	return file_activity_stream_proto_rawDescGZIP(), []int{6}
}

func (x *Person) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Person) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Person) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Person) GetWallet() []*Payment {
	if x != nil {
		return x.Wallet
	}
	return nil
}

type Payment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Payment) Reset() {
	*x = Payment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_stream_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Payment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payment) ProtoMessage() {}

func (x *Payment) ProtoReflect() protoreflect.Message {
	mi := &file_activity_stream_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payment.ProtoReflect.Descriptor instead.
func (*Payment) Descriptor() ([]byte, []int) {
	return file_activity_stream_proto_rawDescGZIP(), []int{7}
}

func (x *Payment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Payment) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Payment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Activity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type         string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Attachments  []*Object              `protobuf:"bytes,3,rep,name=attachments,proto3" json:"attachments,omitempty"`
	AttributedTo []*Object              `protobuf:"bytes,4,rep,name=attributedTo,proto3" json:"attributedTo,omitempty"`
	Audience     *Object                `protobuf:"bytes,5,opt,name=audience,proto3" json:"audience,omitempty"`
	Content      string                 `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
	Context      *Object                `protobuf:"bytes,7,opt,name=context,proto3" json:"context,omitempty"`
	Name         string                 `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	Endtime      *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=endtime,proto3" json:"endtime,omitempty"`
	Generator    *Object                `protobuf:"bytes,10,opt,name=generator,proto3" json:"generator,omitempty"`
	Icon         []*Object              `protobuf:"bytes,11,rep,name=icon,proto3" json:"icon,omitempty"`
	Image        []*Object              `protobuf:"bytes,12,rep,name=image,proto3" json:"image,omitempty"`
	InReplyTo    *Object                `protobuf:"bytes,13,opt,name=inReplyTo,proto3" json:"inReplyTo,omitempty"`
	Location     *Object                `protobuf:"bytes,14,opt,name=location,proto3" json:"location,omitempty"`
	Preview      *Object                `protobuf:"bytes,15,opt,name=preview,proto3" json:"preview,omitempty"`
	Published    *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=published,proto3" json:"published,omitempty"`
	Replies      *Object                `protobuf:"bytes,17,opt,name=replies,proto3" json:"replies,omitempty"`
	StartTime    *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=startTime,proto3" json:"startTime,omitempty"`
	Summary      string                 `protobuf:"bytes,19,opt,name=summary,proto3" json:"summary,omitempty"`
	Tag          []*Object              `protobuf:"bytes,20,rep,name=tag,proto3" json:"tag,omitempty"`
	Updated      *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=updated,proto3" json:"updated,omitempty"`
	Url          []*Link                `protobuf:"bytes,22,rep,name=url,proto3" json:"url,omitempty"`
	To           []*Object              `protobuf:"bytes,23,rep,name=to,proto3" json:"to,omitempty"`
	Bto          []*Object              `protobuf:"bytes,24,rep,name=bto,proto3" json:"bto,omitempty"`
	Cc           []*Object              `protobuf:"bytes,25,rep,name=cc,proto3" json:"cc,omitempty"`
	Bcc          []*Object              `protobuf:"bytes,26,rep,name=bcc,proto3" json:"bcc,omitempty"`
	MediaType    string                 `protobuf:"bytes,27,opt,name=mediaType,proto3" json:"mediaType,omitempty"`
	Duration     string                 `protobuf:"bytes,28,opt,name=duration,proto3" json:"duration,omitempty"`
	Actor        *Object                `protobuf:"bytes,29,opt,name=actor,proto3" json:"actor,omitempty"`
	Object       *Object                `protobuf:"bytes,30,opt,name=object,proto3" json:"object,omitempty"`
	Target       *Object                `protobuf:"bytes,31,opt,name=target,proto3" json:"target,omitempty"`
	Result       *Object                `protobuf:"bytes,32,opt,name=result,proto3" json:"result,omitempty"`
	Origin       *Object                `protobuf:"bytes,33,opt,name=origin,proto3" json:"origin,omitempty"`
	Instrument   *Object                `protobuf:"bytes,34,opt,name=instrument,proto3" json:"instrument,omitempty"`
	Person       *Person                `protobuf:"bytes,35,opt,name=person,proto3" json:"person,omitempty"`
}

func (x *Activity) Reset() {
	*x = Activity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_stream_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Activity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Activity) ProtoMessage() {}

func (x *Activity) ProtoReflect() protoreflect.Message {
	mi := &file_activity_stream_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Activity.ProtoReflect.Descriptor instead.
func (*Activity) Descriptor() ([]byte, []int) {
	return file_activity_stream_proto_rawDescGZIP(), []int{8}
}

func (x *Activity) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Activity) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Activity) GetAttachments() []*Object {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *Activity) GetAttributedTo() []*Object {
	if x != nil {
		return x.AttributedTo
	}
	return nil
}

func (x *Activity) GetAudience() *Object {
	if x != nil {
		return x.Audience
	}
	return nil
}

func (x *Activity) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Activity) GetContext() *Object {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *Activity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Activity) GetEndtime() *timestamppb.Timestamp {
	if x != nil {
		return x.Endtime
	}
	return nil
}

func (x *Activity) GetGenerator() *Object {
	if x != nil {
		return x.Generator
	}
	return nil
}

func (x *Activity) GetIcon() []*Object {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *Activity) GetImage() []*Object {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Activity) GetInReplyTo() *Object {
	if x != nil {
		return x.InReplyTo
	}
	return nil
}

func (x *Activity) GetLocation() *Object {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Activity) GetPreview() *Object {
	if x != nil {
		return x.Preview
	}
	return nil
}

func (x *Activity) GetPublished() *timestamppb.Timestamp {
	if x != nil {
		return x.Published
	}
	return nil
}

func (x *Activity) GetReplies() *Object {
	if x != nil {
		return x.Replies
	}
	return nil
}

func (x *Activity) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Activity) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *Activity) GetTag() []*Object {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *Activity) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *Activity) GetUrl() []*Link {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *Activity) GetTo() []*Object {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *Activity) GetBto() []*Object {
	if x != nil {
		return x.Bto
	}
	return nil
}

func (x *Activity) GetCc() []*Object {
	if x != nil {
		return x.Cc
	}
	return nil
}

func (x *Activity) GetBcc() []*Object {
	if x != nil {
		return x.Bcc
	}
	return nil
}

func (x *Activity) GetMediaType() string {
	if x != nil {
		return x.MediaType
	}
	return ""
}

func (x *Activity) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *Activity) GetActor() *Object {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *Activity) GetObject() *Object {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *Activity) GetTarget() *Object {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *Activity) GetResult() *Object {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *Activity) GetOrigin() *Object {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *Activity) GetInstrument() *Object {
	if x != nil {
		return x.Instrument
	}
	return nil
}

func (x *Activity) GetPerson() *Person {
	if x != nil {
		return x.Person
	}
	return nil
}

var File_activity_stream_proto protoreflect.FileDescriptor

var file_activity_stream_proto_rawDesc = []byte{
	0x0a, 0x15, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e,
	0x70, 0x62, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x30,
	0x0a, 0x06, 0x41, 0x6e, 0x79, 0x4f, 0x62, 0x6a, 0x12, 0x26, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x03, 0x61, 0x6e, 0x79,
	0x22, 0x8c, 0x09, 0x0a, 0x06, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x33, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x64, 0x54, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x75, 0x6f,
	0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0c, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x12, 0x2d, 0x0a, 0x08, 0x61,
	0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x08, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70,
	0x62, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x75, 0x6f,
	0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x69,
	0x6e, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x74, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x52, 0x09, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x74, 0x6f, 0x12, 0x2d, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x75,
	0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x12, 0x2b, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x38,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x23, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x34, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x71, 0x75, 0x6f,
	0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x21, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71,
	0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x02, 0x74, 0x6f, 0x12, 0x23, 0x0a, 0x03, 0x62, 0x74, 0x6f, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x03, 0x62, 0x74, 0x6f, 0x12, 0x21, 0x0a, 0x02, 0x63, 0x63, 0x18, 0x19,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x02, 0x63, 0x63, 0x12, 0x23, 0x0a, 0x03, 0x62,
	0x63, 0x63, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75,
	0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x03, 0x62, 0x63, 0x63,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x04, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75,
	0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22,
	0xd5, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x72, 0x65, 0x66,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x72, 0x65, 0x66, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x6c, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x68, 0x72, 0x65, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x68, 0x72, 0x65, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x75,
	0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x22, 0x37, 0x0a, 0x05, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x72, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x72, 0x78, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64,
	0x22, 0x75, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xe7, 0x01, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x32, 0x0a,
	0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04,
	0x6e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x67, 0x7a, 0x10, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x7a, 0x69, 0x70, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x7a, 0x73, 0x74, 0x64, 0x10,
	0x03, 0x22, 0x80, 0x01, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75,
	0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x22, 0x41, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x9e, 0x0b, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x35, 0x0a,
	0x0c, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x64, 0x54, 0x6f, 0x12, 0x2d, 0x0a, 0x08, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e,
	0x70, 0x62, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x61, 0x75, 0x64, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34,
	0x0a, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d,
	0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x09, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x75,
	0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x54, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75,
	0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x09, 0x69, 0x6e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x12, 0x2d, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75,
	0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e,
	0x70, 0x62, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x07,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x23, 0x0a,
	0x03, 0x74, 0x61, 0x67, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x75, 0x6f,
	0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x03, 0x74,
	0x61, 0x67, 0x12, 0x34, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70,
	0x62, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x02, 0x74,
	0x6f, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d,
	0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x23,
	0x0a, 0x03, 0x62, 0x74, 0x6f, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x75,
	0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x03,
	0x62, 0x74, 0x6f, 0x12, 0x21, 0x0a, 0x02, 0x63, 0x63, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x02, 0x63, 0x63, 0x12, 0x23, 0x0a, 0x03, 0x62, 0x63, 0x63, 0x18, 0x1a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x03, 0x62, 0x63, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x29,
	0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x75, 0x6f, 0x72,
	0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x29, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x31, 0x0a, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a,
	0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x52, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x42, 0x2a, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x75, 0x6d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x72, 0x75, 0x6d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_activity_stream_proto_rawDescOnce sync.Once
	file_activity_stream_proto_rawDescData = file_activity_stream_proto_rawDesc
)

func file_activity_stream_proto_rawDescGZIP() []byte {
	file_activity_stream_proto_rawDescOnce.Do(func() {
		file_activity_stream_proto_rawDescData = protoimpl.X.CompressGZIP(file_activity_stream_proto_rawDescData)
	})
	return file_activity_stream_proto_rawDescData
}

var file_activity_stream_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_activity_stream_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_activity_stream_proto_goTypes = []interface{}{
	(File_Compression)(0),         // 0: quorum.pb.File.Compression
	(*AnyObj)(nil),                // 1: quorum.pb.AnyObj
	(*Object)(nil),                // 2: quorum.pb.Object
	(*Link)(nil),                  // 3: quorum.pb.Link
	(*Reply)(nil),                 // 4: quorum.pb.Reply
	(*Image)(nil),                 // 5: quorum.pb.Image
	(*File)(nil),                  // 6: quorum.pb.File
	(*Person)(nil),                // 7: quorum.pb.Person
	(*Payment)(nil),               // 8: quorum.pb.Payment
	(*Activity)(nil),              // 9: quorum.pb.Activity
	(*anypb.Any)(nil),             // 10: google.protobuf.Any
	(*timestamppb.Timestamp)(nil), // 11: google.protobuf.Timestamp
}
var file_activity_stream_proto_depIdxs = []int32{
	10, // 0: quorum.pb.AnyObj.any:type_name -> google.protobuf.Any
	2,  // 1: quorum.pb.Object.attachments:type_name -> quorum.pb.Object
	2,  // 2: quorum.pb.Object.attributedTo:type_name -> quorum.pb.Object
	2,  // 3: quorum.pb.Object.audience:type_name -> quorum.pb.Object
	2,  // 4: quorum.pb.Object.context:type_name -> quorum.pb.Object
	11, // 5: quorum.pb.Object.endtime:type_name -> google.protobuf.Timestamp
	2,  // 6: quorum.pb.Object.generator:type_name -> quorum.pb.Object
	2,  // 7: quorum.pb.Object.icon:type_name -> quorum.pb.Object
	5,  // 8: quorum.pb.Object.image:type_name -> quorum.pb.Image
	4,  // 9: quorum.pb.Object.inreplyto:type_name -> quorum.pb.Reply
	2,  // 10: quorum.pb.Object.location:type_name -> quorum.pb.Object
	2,  // 11: quorum.pb.Object.preview:type_name -> quorum.pb.Object
	11, // 12: quorum.pb.Object.published:type_name -> google.protobuf.Timestamp
	2,  // 13: quorum.pb.Object.replies:type_name -> quorum.pb.Object
	11, // 14: quorum.pb.Object.startTime:type_name -> google.protobuf.Timestamp
	2,  // 15: quorum.pb.Object.tag:type_name -> quorum.pb.Object
	11, // 16: quorum.pb.Object.updated:type_name -> google.protobuf.Timestamp
	3,  // 17: quorum.pb.Object.url:type_name -> quorum.pb.Link
	2,  // 18: quorum.pb.Object.to:type_name -> quorum.pb.Object
	2,  // 19: quorum.pb.Object.bto:type_name -> quorum.pb.Object
	2,  // 20: quorum.pb.Object.cc:type_name -> quorum.pb.Object
	2,  // 21: quorum.pb.Object.bcc:type_name -> quorum.pb.Object
	6,  // 22: quorum.pb.Object.file:type_name -> quorum.pb.File
	2,  // 23: quorum.pb.Link.preview:type_name -> quorum.pb.Object
	0,  // 24: quorum.pb.File.compression:type_name -> quorum.pb.File.Compression
	5,  // 25: quorum.pb.Person.image:type_name -> quorum.pb.Image
	8,  // 26: quorum.pb.Person.wallet:type_name -> quorum.pb.Payment
	2,  // 27: quorum.pb.Activity.attachments:type_name -> quorum.pb.Object
	2,  // 28: quorum.pb.Activity.attributedTo:type_name -> quorum.pb.Object
	2,  // 29: quorum.pb.Activity.audience:type_name -> quorum.pb.Object
	2,  // 30: quorum.pb.Activity.context:type_name -> quorum.pb.Object
	11, // 31: quorum.pb.Activity.endtime:type_name -> google.protobuf.Timestamp
	2,  // 32: quorum.pb.Activity.generator:type_name -> quorum.pb.Object
	2,  // 33: quorum.pb.Activity.icon:type_name -> quorum.pb.Object
	2,  // 34: quorum.pb.Activity.image:type_name -> quorum.pb.Object
	2,  // 35: quorum.pb.Activity.inReplyTo:type_name -> quorum.pb.Object
	2,  // 36: quorum.pb.Activity.location:type_name -> quorum.pb.Object
	2,  // 37: quorum.pb.Activity.preview:type_name -> quorum.pb.Object
	11, // 38: quorum.pb.Activity.published:type_name -> google.protobuf.Timestamp
	2,  // 39: quorum.pb.Activity.replies:type_name -> quorum.pb.Object
	11, // 40: quorum.pb.Activity.startTime:type_name -> google.protobuf.Timestamp
	2,  // 41: quorum.pb.Activity.tag:type_name -> quorum.pb.Object
	11, // 42: quorum.pb.Activity.updated:type_name -> google.protobuf.Timestamp
	3,  // 43: quorum.pb.Activity.url:type_name -> quorum.pb.Link
	2,  // 44: quorum.pb.Activity.to:type_name -> quorum.pb.Object
	2,  // 45: quorum.pb.Activity.bto:type_name -> quorum.pb.Object
	2,  // 46: quorum.pb.Activity.cc:type_name -> quorum.pb.Object
	2,  // 47: quorum.pb.Activity.bcc:type_name -> quorum.pb.Object
	2,  // 48: quorum.pb.Activity.actor:type_name -> quorum.pb.Object
	2,  // 49: quorum.pb.Activity.object:type_name -> quorum.pb.Object
	2,  // 50: quorum.pb.Activity.target:type_name -> quorum.pb.Object
	2,  // 51: quorum.pb.Activity.result:type_name -> quorum.pb.Object
	2,  // 52: quorum.pb.Activity.origin:type_name -> quorum.pb.Object
	2,  // 53: quorum.pb.Activity.instrument:type_name -> quorum.pb.Object
	7,  // 54: quorum.pb.Activity.person:type_name -> quorum.pb.Person
	55, // [55:55] is the sub-list for method output_type
	55, // [55:55] is the sub-list for method input_type
	55, // [55:55] is the sub-list for extension type_name
	55, // [55:55] is the sub-list for extension extendee
	0,  // [0:55] is the sub-list for field type_name
}

func init() { file_activity_stream_proto_init() }
func file_activity_stream_proto_init() {
	if File_activity_stream_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_activity_stream_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnyObj); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_stream_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Object); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_stream_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Link); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_stream_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_stream_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_stream_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_stream_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Person); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_stream_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Payment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_stream_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Activity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_activity_stream_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_activity_stream_proto_goTypes,
		DependencyIndexes: file_activity_stream_proto_depIdxs,
		EnumInfos:         file_activity_stream_proto_enumTypes,
		MessageInfos:      file_activity_stream_proto_msgTypes,
	}.Build()
	File_activity_stream_proto = out.File
	file_activity_stream_proto_rawDesc = nil
	file_activity_stream_proto_goTypes = nil
	file_activity_stream_proto_depIdxs = nil
}
