syntax = "proto3";
package quorum.pb;
option go_package = "github.com/rumsystem/quorum/pkg/pb";

enum PackageType {
    TRX                   = 0;
    BLOCK                 = 1;
    BFT_MSG               = 2;
    SYNC                  = 3;
    BROADCAST_MSG         = 4;
}

message Package {
    PackageType type = 1;
    bytes       Data = 2;
}

enum ActionType {
    ADD    = 0;
    REMOVE = 1;
}

enum TrxStroageType {
    CHAIN = 0;
    CACHE = 1;
}

enum TrxType {
    POST               = 0; // post to group
    UPD_GRP_USER       = 1; // owner update group user
    CHAIN_CONFIG       = 2; // chain configuration
    APP_CONFIG         = 3; // app configuration
    FORK               = 4; // fork chain
}

message PostItem {
    string TrxId        = 1;
    string SenderPubkey = 2;
    bytes  Content      = 3;
    int64  TimeStamp    = 4;
}

message ProducerItem {
   string     GroupId        = 1;
   string     ProducerPubkey = 2;
   string     ProofTrxId     = 3;
   int64      BlkCnt         = 4;   
   string     Memo           = 5;
}

message UpdGroupUserItem {
    string     GroupId    = 1;
    string     UserPubkey = 2;
    ActionType Action     = 3;
    string     Memo       = 4;
}

message UserItem {
   string     GroupId             = 1;
   string     UserPubkey          = 2;
   string     EncryptPubkey       = 3;
   string     ProofTrxId          = 4;
   int64      TxCnt               = 5; //how many trx send by this user
   string     Memo                = 6;
}

enum ChainConfigType {
    SET_TRX_AUTH_MODE = 0;
    UPD_DNY_LIST      = 1;
    UPD_ALW_LIST      = 2;
}

enum TrxAuthMode {
    FOLLOW_ALW_LIST = 0;
    FOLLOW_DNY_LIST = 1;
}

enum AuthListType {
    ALLOW_LIST = 0;
    DENY_LIST  = 1;
} 

message ChainConfigItem {
    string          GroupId        = 1;
    ChainConfigType Type           = 2;
    bytes           Data           = 3;
    string          OwnerPubkey    = 4;
    string          OwnerSignature = 5;
    int64           TimeStamp      = 6;       
    string          Memo           = 7; 
}

message ChainSendTrxRuleListItem {
    ActionType Action       = 1; 
    string     Pubkey       = 3;
    repeated   TrxType Type = 4;
}

message SetTrxAuthModeItem {
    TrxType     Type = 1;
    TrxAuthMode Mode = 2;
}

enum AppConfigType {
    INT    = 0;
    BOOL   = 1;
    STRING = 2;
}

message AppConfigItem{
    string        GroupId     = 1;
    ActionType    Action      = 2;
    string        Name        = 3;
    AppConfigType Type        = 4;
    string        Value       = 5;
    string        OwnerPubkey = 6;
    string        OwnerSign   = 7;
    string        Memo        = 8;
    int64         TimeStamp   = 9;
}

message ConsensusInfo {
    string ConsensusId   = 1;    
    uint64 ChainVer      = 2; 
    string InTrx         = 3;
    uint64 ForkFromBlock = 4;
}

message ForkItem {
    string        GroupId          = 1;
    ConsensusInfo Consensus        = 2;
    uint64        StartFromBlock   = 3;
    uint64        StartFromEpoch   = 4;
    uint64        EpochDuration    = 5;
    repeated      string producers = 6;
    string        Memo             = 7;
}

message Trx {
    string         TrxId        = 1;
    TrxType        Type         = 2;    
    string         GroupId      = 3;
    bytes          Data         = 4; 
    int64          TimeStamp    = 5;
    string         Version      = 6;
    int64          ResendCount  = 7;
    int64          Nonce        = 8;
    string         SenderPubkey = 9;  
    bytes          SenderSign   = 10;
    TrxStroageType StorageType  = 11;
}

//BLOCK
message Block {    
    string        GroupId        = 1;
    uint64        BlockId        = 2;
    bytes         PrevHash       = 3;  
    string        ProducerPubkey = 4;
    repeated      Trx Trxs       = 5;
    int64         TimeStamp      = 6;
    ConsensusInfo Consensus      = 7;    
    bytes         BlockHash      = 8;
    bytes         ProducerSign   = 9;  
}

//BFT_MSG
enum BftMsgType {
    HB_BFT = 0; //HBMsgV1
}

message BftMsg {
    BftMsgType Type = 1;
    bytes      Data = 2; 
}

//SYNC_MSG
enum SyncMsgType {
    REQ_BLOCK          = 0; // request block 
    REQ_BLOCK_RESP     = 1; // response request block
}

message SyncMsg {
    string      GroupId = 1;    
    SyncMsgType Type    = 2;
    bytes       Data    = 3;
}

message ReqBlock {
    string GroupId       = 1; //group id
    uint64 FromBlock     = 2; //from which block
    int32  BlksRequested = 3; //how many blocks requested, "-1" means many as possible
    string ReqPubkey     = 4; //requester pubkey
    bytes  Hash          = 5; 
    bytes  Sign          = 6;
}

message ReqBlockResp {
    string       GroupId         = 1;   
    string       RequesterPubkey = 2;
    string       ProviderPubkey  = 3;
    ReqBlkResult Result          = 4;        
    uint64       FromBlock       = 5;
    int32        BlksRequested   = 6;     
    int32        BlksProvided    = 7;
    BlocksBundle Blocks          = 8;
    bytes        Hash            = 9;
    bytes        Sign            = 10;
}

message BlocksBundle {
    repeated Block Blocks = 1;
}

enum ReqBlkResult {
    BLOCK_IN_RESP         = 0; //"block(s) in resp and I may have more"
    BLOCK_IN_RESP_ON_TOP  = 1; //"block(s) in resp and I have no more block(when get req)" 
    BLOCK_NOT_FOUND       = 2; //"no block in resp and I don't have the requested block"
}    

//BROADCAST_MSG
enum BroadcastType {
    GENERAL                = 0; // general broadcast
}

message BroadcastMsg {
    BroadcastType Type = 1;
    bytes         Data = 2;
}

enum GroupEncryptType {
    PUBLIC   = 0;
    PRIVATE  = 1;
}

enum GroupConsenseType {
    POA = 0;
    POS = 1;
}

message GroupItem {
    string            GroupId                 = 1;
    string            GroupName               = 2;
    string            OwnerPubKey             = 3;
    string            UserSignPubkey          = 4;
    string            UserEncryptPubkey       = 5;
    int64             LastUpdate              = 6;
    Block             GenesisBlock            = 7;
    GroupEncryptType  EncryptType             = 8;
    GroupConsenseType ConsenseType            = 9;
    string            CipherKey               = 10;
    string            AppKey                  = 11;
}

message GroupSeed {
    Block  GenesisBlock   = 1;
    string GroupId        = 2;
    string GroupName      = 3;
    string OwnerPubkey    = 4;
    string ConsensusType  = 5;    
    string EncryptionType = 6;
    string CipherKey      = 7;
    string AppKey         = 8; 
    string Signature      = 9;
}

message NodeSDKGroupItem {
    GroupItem Group          = 1;
    string    EncryptAlias   = 2;
    string    SignAlias      = 3;
    repeated  string ApiUrl  = 4;
    string    GroupSeed      = 5;
}


//HB_MSG
message HBTrxBundle {
    repeated Trx Trxs = 1;
}  

message HBMsgv1 {
    string           MsgId       = 1;
    string           ScopeId     = 2;    //for bft is consensusid, for change consensus is reqid
    uint64           Epoch       = 3;
    HBMsgPayloadType PayloadType = 4;   // RBC or BBA
    bytes            Payload     = 5; 
}

enum HBMsgPayloadType {
    RBC = 0;    
    BBA = 1;
}

// RBC
message RBCMsg {
    RBCMsgType Type    = 1;   //INIT_PROPOSE / PROOF / READY
    bytes      Payload = 2;
}

enum RBCMsgType {
    INIT_PROPOSE = 0;
    ECHO         = 1;
    READY        = 2;
}

message InitPropose {
    bytes          RootHash         = 1;
    repeated bytes Proof            = 2;
    int64          Index            = 3;
    int64          Leaves           = 4;
    int64          OriginalDataSize = 5;    
    string         RecvNodePubkey   = 6;    //producer which should handle this ecc data shard
    string         ProposerPubkey   = 7;    //producer which make this propose (part of ecc shards)
    bytes          ProposerSign     = 8;    //signature of producer made this propose
}

message Echo { 
    bytes          RootHash               = 1;
    repeated bytes Proof                  = 2;
    int64          Index                  = 3;
    int64          Leaves                 = 4;
    int64          OriginalDataSize       = 5;   
    string         OriginalProposerPubkey = 6;  //producer make this original input
    string         EchoProviderPubkey     = 7;  //producer which broadcast this Echo
    bytes          EchoProviderSign       = 8;  //signature of producer broadcast this Echo
}

message Ready {
    bytes  RootHash               = 1;
    string OriginalProposerPubkey = 2;
    string ReadyProviderPubkey    = 3;
    bytes  ReadyProviderSign      = 4;
}

// BBA
message BBAMsg {
    BBAMsgType Type       = 1; //BVAL or AUX
    bytes      Payload    = 2;
}

enum BBAMsgType {
    BVAL  = 0;
    AUX   = 1;
}

message Bval {
    string     ProposerId   = 1;
    string     SenderPubkey = 2;
    int64      Epoch        = 3;
    bool       Value        = 4;
}

message Aux {
    string     ProposerId   = 1;
    string     SenderPubkey = 2;
    uint64     Epoch        = 3;    
    bool       Value        = 4;
}


