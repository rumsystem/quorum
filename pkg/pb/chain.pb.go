// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.18.1
// source: chain.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PackageType int32

const (
	PackageType_TRX   PackageType = 0
	PackageType_BLOCK PackageType = 1
	PackageType_SYNC  PackageType = 2
	PackageType_HBB   PackageType = 3
)

// Enum value maps for PackageType.
var (
	PackageType_name = map[int32]string{
		0: "TRX",
		1: "BLOCK",
		2: "SYNC",
		3: "HBB",
	}
	PackageType_value = map[string]int32{
		"TRX":   0,
		"BLOCK": 1,
		"SYNC":  2,
		"HBB":   3,
	}
)

func (x PackageType) Enum() *PackageType {
	p := new(PackageType)
	*p = x
	return p
}

func (x PackageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PackageType) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[0].Descriptor()
}

func (PackageType) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[0]
}

func (x PackageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PackageType.Descriptor instead.
func (PackageType) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{0}
}

type AnnounceType int32

const (
	AnnounceType_AS_USER     AnnounceType = 0
	AnnounceType_AS_PRODUCER AnnounceType = 1
)

// Enum value maps for AnnounceType.
var (
	AnnounceType_name = map[int32]string{
		0: "AS_USER",
		1: "AS_PRODUCER",
	}
	AnnounceType_value = map[string]int32{
		"AS_USER":     0,
		"AS_PRODUCER": 1,
	}
)

func (x AnnounceType) Enum() *AnnounceType {
	p := new(AnnounceType)
	*p = x
	return p
}

func (x AnnounceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AnnounceType) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[1].Descriptor()
}

func (AnnounceType) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[1]
}

func (x AnnounceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AnnounceType.Descriptor instead.
func (AnnounceType) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{1}
}

type ApproveType int32

const (
	ApproveType_ANNOUNCED ApproveType = 0
	ApproveType_APPROVED  ApproveType = 1
	ApproveType_REJECTED  ApproveType = 2
)

// Enum value maps for ApproveType.
var (
	ApproveType_name = map[int32]string{
		0: "ANNOUNCED",
		1: "APPROVED",
		2: "REJECTED",
	}
	ApproveType_value = map[string]int32{
		"ANNOUNCED": 0,
		"APPROVED":  1,
		"REJECTED":  2,
	}
)

func (x ApproveType) Enum() *ApproveType {
	p := new(ApproveType)
	*p = x
	return p
}

func (x ApproveType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApproveType) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[2].Descriptor()
}

func (ApproveType) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[2]
}

func (x ApproveType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApproveType.Descriptor instead.
func (ApproveType) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{2}
}

type ActionType int32

const (
	ActionType_ADD    ActionType = 0
	ActionType_REMOVE ActionType = 1
)

// Enum value maps for ActionType.
var (
	ActionType_name = map[int32]string{
		0: "ADD",
		1: "REMOVE",
	}
	ActionType_value = map[string]int32{
		"ADD":    0,
		"REMOVE": 1,
	}
)

func (x ActionType) Enum() *ActionType {
	p := new(ActionType)
	*p = x
	return p
}

func (x ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[3].Descriptor()
}

func (ActionType) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[3]
}

func (x ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionType.Descriptor instead.
func (ActionType) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{3}
}

type TrxStroageType int32

const (
	TrxStroageType_CHAIN TrxStroageType = 0
	TrxStroageType_CACHE TrxStroageType = 1
)

// Enum value maps for TrxStroageType.
var (
	TrxStroageType_name = map[int32]string{
		0: "CHAIN",
		1: "CACHE",
	}
	TrxStroageType_value = map[string]int32{
		"CHAIN": 0,
		"CACHE": 1,
	}
)

func (x TrxStroageType) Enum() *TrxStroageType {
	p := new(TrxStroageType)
	*p = x
	return p
}

func (x TrxStroageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrxStroageType) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[4].Descriptor()
}

func (TrxStroageType) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[4]
}

func (x TrxStroageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrxStroageType.Descriptor instead.
func (TrxStroageType) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{4}
}

type TrxType int32

const (
	TrxType_POST         TrxType = 0 // post to group
	TrxType_ANNOUNCE     TrxType = 1 // producer or user self announce
	TrxType_PRODUCER     TrxType = 2 // owner update group producer
	TrxType_USER         TrxType = 3 // owner update group user
	TrxType_CHAIN_CONFIG TrxType = 6 // chain configuration
	TrxType_APP_CONFIG   TrxType = 7 // app configuration
)

// Enum value maps for TrxType.
var (
	TrxType_name = map[int32]string{
		0: "POST",
		1: "ANNOUNCE",
		2: "PRODUCER",
		3: "USER",
		6: "CHAIN_CONFIG",
		7: "APP_CONFIG",
	}
	TrxType_value = map[string]int32{
		"POST":         0,
		"ANNOUNCE":     1,
		"PRODUCER":     2,
		"USER":         3,
		"CHAIN_CONFIG": 6,
		"APP_CONFIG":   7,
	}
)

func (x TrxType) Enum() *TrxType {
	p := new(TrxType)
	*p = x
	return p
}

func (x TrxType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrxType) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[5].Descriptor()
}

func (TrxType) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[5]
}

func (x TrxType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrxType.Descriptor instead.
func (TrxType) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{5}
}

//SYNC_MSG
type SyncMsgType int32

const (
	SyncMsgType_REQ_BLOCK      SyncMsgType = 0 // request block
	SyncMsgType_REQ_BLOCK_RESP SyncMsgType = 1 // response request block
)

// Enum value maps for SyncMsgType.
var (
	SyncMsgType_name = map[int32]string{
		0: "REQ_BLOCK",
		1: "REQ_BLOCK_RESP",
	}
	SyncMsgType_value = map[string]int32{
		"REQ_BLOCK":      0,
		"REQ_BLOCK_RESP": 1,
	}
)

func (x SyncMsgType) Enum() *SyncMsgType {
	p := new(SyncMsgType)
	*p = x
	return p
}

func (x SyncMsgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncMsgType) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[6].Descriptor()
}

func (SyncMsgType) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[6]
}

func (x SyncMsgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SyncMsgType.Descriptor instead.
func (SyncMsgType) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{6}
}

type ReqBlkResult int32

const (
	ReqBlkResult_BLOCK_IN_RESP        ReqBlkResult = 0 //"block(s) in resp and I may have more"
	ReqBlkResult_BLOCK_IN_RESP_ON_TOP ReqBlkResult = 1 //"block(s) in resp and I have no more block(when get req)"
	ReqBlkResult_BLOCK_NOT_FOUND      ReqBlkResult = 2 //"no block in resp and I don't have the requested block"
)

// Enum value maps for ReqBlkResult.
var (
	ReqBlkResult_name = map[int32]string{
		0: "BLOCK_IN_RESP",
		1: "BLOCK_IN_RESP_ON_TOP",
		2: "BLOCK_NOT_FOUND",
	}
	ReqBlkResult_value = map[string]int32{
		"BLOCK_IN_RESP":        0,
		"BLOCK_IN_RESP_ON_TOP": 1,
		"BLOCK_NOT_FOUND":      2,
	}
)

func (x ReqBlkResult) Enum() *ReqBlkResult {
	p := new(ReqBlkResult)
	*p = x
	return p
}

func (x ReqBlkResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReqBlkResult) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[7].Descriptor()
}

func (ReqBlkResult) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[7]
}

func (x ReqBlkResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReqBlkResult.Descriptor instead.
func (ReqBlkResult) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{7}
}

type GroupEncryptType int32

const (
	GroupEncryptType_PUBLIC  GroupEncryptType = 0
	GroupEncryptType_PRIVATE GroupEncryptType = 1
)

// Enum value maps for GroupEncryptType.
var (
	GroupEncryptType_name = map[int32]string{
		0: "PUBLIC",
		1: "PRIVATE",
	}
	GroupEncryptType_value = map[string]int32{
		"PUBLIC":  0,
		"PRIVATE": 1,
	}
)

func (x GroupEncryptType) Enum() *GroupEncryptType {
	p := new(GroupEncryptType)
	*p = x
	return p
}

func (x GroupEncryptType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupEncryptType) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[8].Descriptor()
}

func (GroupEncryptType) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[8]
}

func (x GroupEncryptType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupEncryptType.Descriptor instead.
func (GroupEncryptType) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{8}
}

type GroupConsenseType int32

const (
	GroupConsenseType_POA GroupConsenseType = 0
	GroupConsenseType_POS GroupConsenseType = 1
)

// Enum value maps for GroupConsenseType.
var (
	GroupConsenseType_name = map[int32]string{
		0: "POA",
		1: "POS",
	}
	GroupConsenseType_value = map[string]int32{
		"POA": 0,
		"POS": 1,
	}
)

func (x GroupConsenseType) Enum() *GroupConsenseType {
	p := new(GroupConsenseType)
	*p = x
	return p
}

func (x GroupConsenseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupConsenseType) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[9].Descriptor()
}

func (GroupConsenseType) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[9]
}

func (x GroupConsenseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupConsenseType.Descriptor instead.
func (GroupConsenseType) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{9}
}

type RoleV0 int32

const (
	RoleV0_GROUP_PRODUCER RoleV0 = 0
	RoleV0_GROUP_USER     RoleV0 = 1
)

// Enum value maps for RoleV0.
var (
	RoleV0_name = map[int32]string{
		0: "GROUP_PRODUCER",
		1: "GROUP_USER",
	}
	RoleV0_value = map[string]int32{
		"GROUP_PRODUCER": 0,
		"GROUP_USER":     1,
	}
)

func (x RoleV0) Enum() *RoleV0 {
	p := new(RoleV0)
	*p = x
	return p
}

func (x RoleV0) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoleV0) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[10].Descriptor()
}

func (RoleV0) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[10]
}

func (x RoleV0) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoleV0.Descriptor instead.
func (RoleV0) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{10}
}

type ChainConfigType int32

const (
	ChainConfigType_SET_TRX_AUTH_MODE ChainConfigType = 0
	ChainConfigType_UPD_DNY_LIST      ChainConfigType = 1
	ChainConfigType_UPD_ALW_LIST      ChainConfigType = 2
)

// Enum value maps for ChainConfigType.
var (
	ChainConfigType_name = map[int32]string{
		0: "SET_TRX_AUTH_MODE",
		1: "UPD_DNY_LIST",
		2: "UPD_ALW_LIST",
	}
	ChainConfigType_value = map[string]int32{
		"SET_TRX_AUTH_MODE": 0,
		"UPD_DNY_LIST":      1,
		"UPD_ALW_LIST":      2,
	}
)

func (x ChainConfigType) Enum() *ChainConfigType {
	p := new(ChainConfigType)
	*p = x
	return p
}

func (x ChainConfigType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChainConfigType) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[11].Descriptor()
}

func (ChainConfigType) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[11]
}

func (x ChainConfigType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChainConfigType.Descriptor instead.
func (ChainConfigType) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{11}
}

type TrxAuthMode int32

const (
	TrxAuthMode_FOLLOW_ALW_LIST TrxAuthMode = 0
	TrxAuthMode_FOLLOW_DNY_LIST TrxAuthMode = 1
)

// Enum value maps for TrxAuthMode.
var (
	TrxAuthMode_name = map[int32]string{
		0: "FOLLOW_ALW_LIST",
		1: "FOLLOW_DNY_LIST",
	}
	TrxAuthMode_value = map[string]int32{
		"FOLLOW_ALW_LIST": 0,
		"FOLLOW_DNY_LIST": 1,
	}
)

func (x TrxAuthMode) Enum() *TrxAuthMode {
	p := new(TrxAuthMode)
	*p = x
	return p
}

func (x TrxAuthMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrxAuthMode) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[12].Descriptor()
}

func (TrxAuthMode) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[12]
}

func (x TrxAuthMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrxAuthMode.Descriptor instead.
func (TrxAuthMode) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{12}
}

type AuthListType int32

const (
	AuthListType_ALLOW_LIST AuthListType = 0
	AuthListType_DENY_LIST  AuthListType = 1
)

// Enum value maps for AuthListType.
var (
	AuthListType_name = map[int32]string{
		0: "ALLOW_LIST",
		1: "DENY_LIST",
	}
	AuthListType_value = map[string]int32{
		"ALLOW_LIST": 0,
		"DENY_LIST":  1,
	}
)

func (x AuthListType) Enum() *AuthListType {
	p := new(AuthListType)
	*p = x
	return p
}

func (x AuthListType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthListType) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[13].Descriptor()
}

func (AuthListType) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[13]
}

func (x AuthListType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthListType.Descriptor instead.
func (AuthListType) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{13}
}

type AppConfigType int32

const (
	AppConfigType_INT    AppConfigType = 0
	AppConfigType_BOOL   AppConfigType = 1
	AppConfigType_STRING AppConfigType = 2
)

// Enum value maps for AppConfigType.
var (
	AppConfigType_name = map[int32]string{
		0: "INT",
		1: "BOOL",
		2: "STRING",
	}
	AppConfigType_value = map[string]int32{
		"INT":    0,
		"BOOL":   1,
		"STRING": 2,
	}
)

func (x AppConfigType) Enum() *AppConfigType {
	p := new(AppConfigType)
	*p = x
	return p
}

func (x AppConfigType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppConfigType) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[14].Descriptor()
}

func (AppConfigType) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[14]
}

func (x AppConfigType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppConfigType.Descriptor instead.
func (AppConfigType) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{14}
}

type HBMsgPayloadType int32

const (
	HBMsgPayloadType_RBC HBMsgPayloadType = 0
	HBMsgPayloadType_BBA HBMsgPayloadType = 1
)

// Enum value maps for HBMsgPayloadType.
var (
	HBMsgPayloadType_name = map[int32]string{
		0: "RBC",
		1: "BBA",
	}
	HBMsgPayloadType_value = map[string]int32{
		"RBC": 0,
		"BBA": 1,
	}
)

func (x HBMsgPayloadType) Enum() *HBMsgPayloadType {
	p := new(HBMsgPayloadType)
	*p = x
	return p
}

func (x HBMsgPayloadType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HBMsgPayloadType) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[15].Descriptor()
}

func (HBMsgPayloadType) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[15]
}

func (x HBMsgPayloadType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HBMsgPayloadType.Descriptor instead.
func (HBMsgPayloadType) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{15}
}

type RBCMsgType int32

const (
	RBCMsgType_INIT_PROPOSE RBCMsgType = 0
	RBCMsgType_ECHO         RBCMsgType = 1
	RBCMsgType_READY        RBCMsgType = 2
)

// Enum value maps for RBCMsgType.
var (
	RBCMsgType_name = map[int32]string{
		0: "INIT_PROPOSE",
		1: "ECHO",
		2: "READY",
	}
	RBCMsgType_value = map[string]int32{
		"INIT_PROPOSE": 0,
		"ECHO":         1,
		"READY":        2,
	}
)

func (x RBCMsgType) Enum() *RBCMsgType {
	p := new(RBCMsgType)
	*p = x
	return p
}

func (x RBCMsgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RBCMsgType) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[16].Descriptor()
}

func (RBCMsgType) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[16]
}

func (x RBCMsgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RBCMsgType.Descriptor instead.
func (RBCMsgType) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{16}
}

type BBAMsgType int32

const (
	BBAMsgType_BVAL BBAMsgType = 0
	BBAMsgType_AUX  BBAMsgType = 1
)

// Enum value maps for BBAMsgType.
var (
	BBAMsgType_name = map[int32]string{
		0: "BVAL",
		1: "AUX",
	}
	BBAMsgType_value = map[string]int32{
		"BVAL": 0,
		"AUX":  1,
	}
)

func (x BBAMsgType) Enum() *BBAMsgType {
	p := new(BBAMsgType)
	*p = x
	return p
}

func (x BBAMsgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BBAMsgType) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[17].Descriptor()
}

func (BBAMsgType) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[17]
}

func (x BBAMsgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BBAMsgType.Descriptor instead.
func (BBAMsgType) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{17}
}

type Package struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type PackageType `protobuf:"varint,1,opt,name=type,proto3,enum=quorum.pb.PackageType" json:"type,omitempty"`
	Data []byte      `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *Package) Reset() {
	*x = Package{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Package) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package) ProtoMessage() {}

func (x *Package) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package.ProtoReflect.Descriptor instead.
func (*Package) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{0}
}

func (x *Package) GetType() PackageType {
	if x != nil {
		return x.Type
	}
	return PackageType_TRX
}

func (x *Package) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Trx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrxId        string         `protobuf:"bytes,1,opt,name=TrxId,proto3" json:"TrxId,omitempty"`
	Type         TrxType        `protobuf:"varint,2,opt,name=Type,proto3,enum=quorum.pb.TrxType" json:"Type,omitempty"`
	GroupId      string         `protobuf:"bytes,3,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	Data         []byte         `protobuf:"bytes,4,opt,name=Data,proto3" json:"Data,omitempty"`
	TimeStamp    int64          `protobuf:"varint,5,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty,string"`
	Version      string         `protobuf:"bytes,6,opt,name=Version,proto3" json:"Version,omitempty"`
	Expired      int64          `protobuf:"varint,7,opt,name=Expired,proto3" json:"Expired,omitempty"`
	ResendCount  int64          `protobuf:"varint,8,opt,name=ResendCount,proto3" json:"ResendCount,omitempty"`
	SenderPubkey string         `protobuf:"bytes,10,opt,name=SenderPubkey,proto3" json:"SenderPubkey,omitempty"`
	SenderSign   []byte         `protobuf:"bytes,11,opt,name=SenderSign,proto3" json:"SenderSign,omitempty"`
	StorageType  TrxStroageType `protobuf:"varint,12,opt,name=StorageType,proto3,enum=quorum.pb.TrxStroageType" json:"StorageType,omitempty"`
}

func (x *Trx) Reset() {
	*x = Trx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trx) ProtoMessage() {}

func (x *Trx) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trx.ProtoReflect.Descriptor instead.
func (*Trx) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{1}
}

func (x *Trx) GetTrxId() string {
	if x != nil {
		return x.TrxId
	}
	return ""
}

func (x *Trx) GetType() TrxType {
	if x != nil {
		return x.Type
	}
	return TrxType_POST
}

func (x *Trx) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *Trx) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Trx) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *Trx) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Trx) GetExpired() int64 {
	if x != nil {
		return x.Expired
	}
	return 0
}

func (x *Trx) GetResendCount() int64 {
	if x != nil {
		return x.ResendCount
	}
	return 0
}

func (x *Trx) GetSenderPubkey() string {
	if x != nil {
		return x.SenderPubkey
	}
	return ""
}

func (x *Trx) GetSenderSign() []byte {
	if x != nil {
		return x.SenderSign
	}
	return nil
}

func (x *Trx) GetStorageType() TrxStroageType {
	if x != nil {
		return x.StorageType
	}
	return TrxStroageType_CHAIN
}

type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId        string `protobuf:"bytes,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	BlockId        uint64 `protobuf:"varint,2,opt,name=BlockId,proto3" json:"BlockId,omitempty"`
	Epoch          uint64 `protobuf:"varint,3,opt,name=Epoch,proto3" json:"Epoch,omitempty"`
	PrevHash       []byte `protobuf:"bytes,4,opt,name=PrevHash,proto3" json:"PrevHash,omitempty"`
	ProducerPubkey string `protobuf:"bytes,5,opt,name=ProducerPubkey,proto3" json:"ProducerPubkey,omitempty"`
	Trxs           []*Trx `protobuf:"bytes,6,rep,name=Trxs,proto3" json:"Trxs,omitempty"`
	Sudo           bool   `protobuf:"varint,7,opt,name=Sudo,proto3" json:"Sudo,omitempty"`
	TimeStamp      int64  `protobuf:"varint,8,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty,string"`
	BlockHash      []byte `protobuf:"bytes,9,opt,name=BlockHash,proto3" json:"BlockHash,omitempty"`
	ProducerSign   []byte `protobuf:"bytes,10,opt,name=ProducerSign,proto3" json:"ProducerSign,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{2}
}

func (x *Block) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *Block) GetBlockId() uint64 {
	if x != nil {
		return x.BlockId
	}
	return 0
}

func (x *Block) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *Block) GetPrevHash() []byte {
	if x != nil {
		return x.PrevHash
	}
	return nil
}

func (x *Block) GetProducerPubkey() string {
	if x != nil {
		return x.ProducerPubkey
	}
	return ""
}

func (x *Block) GetTrxs() []*Trx {
	if x != nil {
		return x.Trxs
	}
	return nil
}

func (x *Block) GetSudo() bool {
	if x != nil {
		return x.Sudo
	}
	return false
}

func (x *Block) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *Block) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *Block) GetProducerSign() []byte {
	if x != nil {
		return x.ProducerSign
	}
	return nil
}

type SyncMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId string      `protobuf:"bytes,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	Type    SyncMsgType `protobuf:"varint,2,opt,name=Type,proto3,enum=quorum.pb.SyncMsgType" json:"Type,omitempty"`
	Data    []byte      `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *SyncMsg) Reset() {
	*x = SyncMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncMsg) ProtoMessage() {}

func (x *SyncMsg) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncMsg.ProtoReflect.Descriptor instead.
func (*SyncMsg) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{3}
}

func (x *SyncMsg) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *SyncMsg) GetType() SyncMsgType {
	if x != nil {
		return x.Type
	}
	return SyncMsgType_REQ_BLOCK
}

func (x *SyncMsg) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ReqBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId       string `protobuf:"bytes,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`              //group id
	FromBlock     uint64 `protobuf:"varint,2,opt,name=FromBlock,proto3" json:"FromBlock,omitempty"`         //from which block
	BlksRequested int32  `protobuf:"varint,3,opt,name=BlksRequested,proto3" json:"BlksRequested,omitempty"` //how many blocks requested, "-1" means many as possible
	ReqPubkey     string `protobuf:"bytes,4,opt,name=ReqPubkey,proto3" json:"ReqPubkey,omitempty"`          //requester pubkey
	Hash          []byte `protobuf:"bytes,5,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Sign          []byte `protobuf:"bytes,6,opt,name=Sign,proto3" json:"Sign,omitempty"`
}

func (x *ReqBlock) Reset() {
	*x = ReqBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBlock) ProtoMessage() {}

func (x *ReqBlock) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBlock.ProtoReflect.Descriptor instead.
func (*ReqBlock) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{4}
}

func (x *ReqBlock) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *ReqBlock) GetFromBlock() uint64 {
	if x != nil {
		return x.FromBlock
	}
	return 0
}

func (x *ReqBlock) GetBlksRequested() int32 {
	if x != nil {
		return x.BlksRequested
	}
	return 0
}

func (x *ReqBlock) GetReqPubkey() string {
	if x != nil {
		return x.ReqPubkey
	}
	return ""
}

func (x *ReqBlock) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *ReqBlock) GetSign() []byte {
	if x != nil {
		return x.Sign
	}
	return nil
}

type ReqBlockResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId         string        `protobuf:"bytes,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	RequesterPubkey string        `protobuf:"bytes,2,opt,name=RequesterPubkey,proto3" json:"RequesterPubkey,omitempty"`
	ProviderPubkey  string        `protobuf:"bytes,3,opt,name=ProviderPubkey,proto3" json:"ProviderPubkey,omitempty"`
	Result          ReqBlkResult  `protobuf:"varint,4,opt,name=Result,proto3,enum=quorum.pb.ReqBlkResult" json:"Result,omitempty"`
	FromBlock       uint64        `protobuf:"varint,5,opt,name=FromBlock,proto3" json:"FromBlock,omitempty"`
	BlksRequested   int32         `protobuf:"varint,6,opt,name=BlksRequested,proto3" json:"BlksRequested,omitempty"`
	BlksProvided    int32         `protobuf:"varint,7,opt,name=BlksProvided,proto3" json:"BlksProvided,omitempty"`
	Blocks          *BlocksBundle `protobuf:"bytes,8,opt,name=Blocks,proto3" json:"Blocks,omitempty"`
	Hash            []byte        `protobuf:"bytes,9,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Sign            []byte        `protobuf:"bytes,10,opt,name=Sign,proto3" json:"Sign,omitempty"`
}

func (x *ReqBlockResp) Reset() {
	*x = ReqBlockResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBlockResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBlockResp) ProtoMessage() {}

func (x *ReqBlockResp) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBlockResp.ProtoReflect.Descriptor instead.
func (*ReqBlockResp) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{5}
}

func (x *ReqBlockResp) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *ReqBlockResp) GetRequesterPubkey() string {
	if x != nil {
		return x.RequesterPubkey
	}
	return ""
}

func (x *ReqBlockResp) GetProviderPubkey() string {
	if x != nil {
		return x.ProviderPubkey
	}
	return ""
}

func (x *ReqBlockResp) GetResult() ReqBlkResult {
	if x != nil {
		return x.Result
	}
	return ReqBlkResult_BLOCK_IN_RESP
}

func (x *ReqBlockResp) GetFromBlock() uint64 {
	if x != nil {
		return x.FromBlock
	}
	return 0
}

func (x *ReqBlockResp) GetBlksRequested() int32 {
	if x != nil {
		return x.BlksRequested
	}
	return 0
}

func (x *ReqBlockResp) GetBlksProvided() int32 {
	if x != nil {
		return x.BlksProvided
	}
	return 0
}

func (x *ReqBlockResp) GetBlocks() *BlocksBundle {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *ReqBlockResp) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *ReqBlockResp) GetSign() []byte {
	if x != nil {
		return x.Sign
	}
	return nil
}

type BlocksBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blocks []*Block `protobuf:"bytes,1,rep,name=Blocks,proto3" json:"Blocks,omitempty"`
}

func (x *BlocksBundle) Reset() {
	*x = BlocksBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlocksBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlocksBundle) ProtoMessage() {}

func (x *BlocksBundle) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlocksBundle.ProtoReflect.Descriptor instead.
func (*BlocksBundle) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{6}
}

func (x *BlocksBundle) GetBlocks() []*Block {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type PostItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrxId        string `protobuf:"bytes,1,opt,name=TrxId,proto3" json:"TrxId,omitempty"`
	SenderPubkey string `protobuf:"bytes,2,opt,name=SenderPubkey,proto3" json:"SenderPubkey,omitempty"`
	Content      []byte `protobuf:"bytes,3,opt,name=Content,proto3" json:"Content,omitempty"`
	TimeStamp    int64  `protobuf:"varint,4,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty,string"`
}

func (x *PostItem) Reset() {
	*x = PostItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostItem) ProtoMessage() {}

func (x *PostItem) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostItem.ProtoReflect.Descriptor instead.
func (*PostItem) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{7}
}

func (x *PostItem) GetTrxId() string {
	if x != nil {
		return x.TrxId
	}
	return ""
}

func (x *PostItem) GetSenderPubkey() string {
	if x != nil {
		return x.SenderPubkey
	}
	return ""
}

func (x *PostItem) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *PostItem) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

type ProducerItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId          string     `protobuf:"bytes,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	ProducerPubkey   string     `protobuf:"bytes,2,opt,name=ProducerPubkey,proto3" json:"ProducerPubkey,omitempty"`
	GroupOwnerPubkey string     `protobuf:"bytes,3,opt,name=GroupOwnerPubkey,proto3" json:"GroupOwnerPubkey,omitempty"`
	GroupOwnerSign   string     `protobuf:"bytes,4,opt,name=GroupOwnerSign,proto3" json:"GroupOwnerSign,omitempty"`
	Action           ActionType `protobuf:"varint,5,opt,name=Action,proto3,enum=quorum.pb.ActionType" json:"Action,omitempty"`
	WithnessBlocks   int64      `protobuf:"varint,6,opt,name=WithnessBlocks,proto3" json:"WithnessBlocks,omitempty"`
	TimeStamp        int64      `protobuf:"varint,7,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty,string"`
	Memo             string     `protobuf:"bytes,8,opt,name=Memo,proto3" json:"Memo,omitempty"`
}

func (x *ProducerItem) Reset() {
	*x = ProducerItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProducerItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProducerItem) ProtoMessage() {}

func (x *ProducerItem) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProducerItem.ProtoReflect.Descriptor instead.
func (*ProducerItem) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{8}
}

func (x *ProducerItem) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *ProducerItem) GetProducerPubkey() string {
	if x != nil {
		return x.ProducerPubkey
	}
	return ""
}

func (x *ProducerItem) GetGroupOwnerPubkey() string {
	if x != nil {
		return x.GroupOwnerPubkey
	}
	return ""
}

func (x *ProducerItem) GetGroupOwnerSign() string {
	if x != nil {
		return x.GroupOwnerSign
	}
	return ""
}

func (x *ProducerItem) GetAction() ActionType {
	if x != nil {
		return x.Action
	}
	return ActionType_ADD
}

func (x *ProducerItem) GetWithnessBlocks() int64 {
	if x != nil {
		return x.WithnessBlocks
	}
	return 0
}

func (x *ProducerItem) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *ProducerItem) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

type BFTProducerBundleItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Producers []*ProducerItem `protobuf:"bytes,1,rep,name=Producers,proto3" json:"Producers,omitempty"`
}

func (x *BFTProducerBundleItem) Reset() {
	*x = BFTProducerBundleItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BFTProducerBundleItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BFTProducerBundleItem) ProtoMessage() {}

func (x *BFTProducerBundleItem) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BFTProducerBundleItem.ProtoReflect.Descriptor instead.
func (*BFTProducerBundleItem) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{9}
}

func (x *BFTProducerBundleItem) GetProducers() []*ProducerItem {
	if x != nil {
		return x.Producers
	}
	return nil
}

type UserItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId          string     `protobuf:"bytes,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	UserPubkey       string     `protobuf:"bytes,2,opt,name=UserPubkey,proto3" json:"UserPubkey,omitempty"`
	EncryptPubkey    string     `protobuf:"bytes,3,opt,name=EncryptPubkey,proto3" json:"EncryptPubkey,omitempty"`
	GroupOwnerPubkey string     `protobuf:"bytes,4,opt,name=GroupOwnerPubkey,proto3" json:"GroupOwnerPubkey,omitempty"`
	GroupOwnerSign   string     `protobuf:"bytes,5,opt,name=GroupOwnerSign,proto3" json:"GroupOwnerSign,omitempty"`
	TimeStamp        int64      `protobuf:"varint,6,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty,string"`
	Action           ActionType `protobuf:"varint,7,opt,name=Action,proto3,enum=quorum.pb.ActionType" json:"Action,omitempty"`
	Memo             string     `protobuf:"bytes,8,opt,name=Memo,proto3" json:"Memo,omitempty"`
}

func (x *UserItem) Reset() {
	*x = UserItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserItem) ProtoMessage() {}

func (x *UserItem) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserItem.ProtoReflect.Descriptor instead.
func (*UserItem) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{10}
}

func (x *UserItem) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *UserItem) GetUserPubkey() string {
	if x != nil {
		return x.UserPubkey
	}
	return ""
}

func (x *UserItem) GetEncryptPubkey() string {
	if x != nil {
		return x.EncryptPubkey
	}
	return ""
}

func (x *UserItem) GetGroupOwnerPubkey() string {
	if x != nil {
		return x.GroupOwnerPubkey
	}
	return ""
}

func (x *UserItem) GetGroupOwnerSign() string {
	if x != nil {
		return x.GroupOwnerSign
	}
	return ""
}

func (x *UserItem) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *UserItem) GetAction() ActionType {
	if x != nil {
		return x.Action
	}
	return ActionType_ADD
}

func (x *UserItem) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

type AnnounceItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId            string       `protobuf:"bytes,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	SignPubkey         string       `protobuf:"bytes,2,opt,name=SignPubkey,proto3" json:"SignPubkey,omitempty"`
	EncryptPubkey      string       `protobuf:"bytes,3,opt,name=EncryptPubkey,proto3" json:"EncryptPubkey,omitempty"`
	AnnouncerSignature string       `protobuf:"bytes,4,opt,name=AnnouncerSignature,proto3" json:"AnnouncerSignature,omitempty"`
	Type               AnnounceType `protobuf:"varint,5,opt,name=Type,proto3,enum=quorum.pb.AnnounceType" json:"Type,omitempty"`
	OwnerPubkey        string       `protobuf:"bytes,6,opt,name=OwnerPubkey,proto3" json:"OwnerPubkey,omitempty"`
	OwnerSignature     string       `protobuf:"bytes,7,opt,name=OwnerSignature,proto3" json:"OwnerSignature,omitempty"`
	Result             ApproveType  `protobuf:"varint,8,opt,name=Result,proto3,enum=quorum.pb.ApproveType" json:"Result,omitempty"`
	TimeStamp          int64        `protobuf:"varint,9,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty,string"`
	Action             ActionType   `protobuf:"varint,10,opt,name=Action,proto3,enum=quorum.pb.ActionType" json:"Action,omitempty"`
	Memo               string       `protobuf:"bytes,11,opt,name=Memo,proto3" json:"Memo,omitempty"`
}

func (x *AnnounceItem) Reset() {
	*x = AnnounceItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnounceItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnounceItem) ProtoMessage() {}

func (x *AnnounceItem) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnounceItem.ProtoReflect.Descriptor instead.
func (*AnnounceItem) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{11}
}

func (x *AnnounceItem) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *AnnounceItem) GetSignPubkey() string {
	if x != nil {
		return x.SignPubkey
	}
	return ""
}

func (x *AnnounceItem) GetEncryptPubkey() string {
	if x != nil {
		return x.EncryptPubkey
	}
	return ""
}

func (x *AnnounceItem) GetAnnouncerSignature() string {
	if x != nil {
		return x.AnnouncerSignature
	}
	return ""
}

func (x *AnnounceItem) GetType() AnnounceType {
	if x != nil {
		return x.Type
	}
	return AnnounceType_AS_USER
}

func (x *AnnounceItem) GetOwnerPubkey() string {
	if x != nil {
		return x.OwnerPubkey
	}
	return ""
}

func (x *AnnounceItem) GetOwnerSignature() string {
	if x != nil {
		return x.OwnerSignature
	}
	return ""
}

func (x *AnnounceItem) GetResult() ApproveType {
	if x != nil {
		return x.Result
	}
	return ApproveType_ANNOUNCED
}

func (x *AnnounceItem) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *AnnounceItem) GetAction() ActionType {
	if x != nil {
		return x.Action
	}
	return ActionType_ADD
}

func (x *AnnounceItem) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

type GroupItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId           string            `protobuf:"bytes,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	GroupName         string            `protobuf:"bytes,2,opt,name=GroupName,proto3" json:"GroupName,omitempty"`
	OwnerPubKey       string            `protobuf:"bytes,3,opt,name=OwnerPubKey,proto3" json:"OwnerPubKey,omitempty"`
	UserSignPubkey    string            `protobuf:"bytes,4,opt,name=UserSignPubkey,proto3" json:"UserSignPubkey,omitempty"`
	UserEncryptPubkey string            `protobuf:"bytes,5,opt,name=UserEncryptPubkey,proto3" json:"UserEncryptPubkey,omitempty"`
	LastUpdate        int64             `protobuf:"varint,6,opt,name=LastUpdate,proto3" json:"LastUpdate,omitempty"`
	GenesisBlock      *Block            `protobuf:"bytes,7,opt,name=GenesisBlock,proto3" json:"GenesisBlock,omitempty"`
	EncryptType       GroupEncryptType  `protobuf:"varint,8,opt,name=EncryptType,proto3,enum=quorum.pb.GroupEncryptType" json:"EncryptType,omitempty"`
	ConsenseType      GroupConsenseType `protobuf:"varint,9,opt,name=ConsenseType,proto3,enum=quorum.pb.GroupConsenseType" json:"ConsenseType,omitempty"`
	CipherKey         string            `protobuf:"bytes,10,opt,name=CipherKey,proto3" json:"CipherKey,omitempty"`
	AppKey            string            `protobuf:"bytes,11,opt,name=AppKey,proto3" json:"AppKey,omitempty"`
}

func (x *GroupItem) Reset() {
	*x = GroupItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupItem) ProtoMessage() {}

func (x *GroupItem) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupItem.ProtoReflect.Descriptor instead.
func (*GroupItem) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{12}
}

func (x *GroupItem) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GroupItem) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *GroupItem) GetOwnerPubKey() string {
	if x != nil {
		return x.OwnerPubKey
	}
	return ""
}

func (x *GroupItem) GetUserSignPubkey() string {
	if x != nil {
		return x.UserSignPubkey
	}
	return ""
}

func (x *GroupItem) GetUserEncryptPubkey() string {
	if x != nil {
		return x.UserEncryptPubkey
	}
	return ""
}

func (x *GroupItem) GetLastUpdate() int64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

func (x *GroupItem) GetGenesisBlock() *Block {
	if x != nil {
		return x.GenesisBlock
	}
	return nil
}

func (x *GroupItem) GetEncryptType() GroupEncryptType {
	if x != nil {
		return x.EncryptType
	}
	return GroupEncryptType_PUBLIC
}

func (x *GroupItem) GetConsenseType() GroupConsenseType {
	if x != nil {
		return x.ConsenseType
	}
	return GroupConsenseType_POA
}

func (x *GroupItem) GetCipherKey() string {
	if x != nil {
		return x.CipherKey
	}
	return ""
}

func (x *GroupItem) GetAppKey() string {
	if x != nil {
		return x.AppKey
	}
	return ""
}

type ChainConfigItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId        string          `protobuf:"bytes,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	Type           ChainConfigType `protobuf:"varint,2,opt,name=Type,proto3,enum=quorum.pb.ChainConfigType" json:"Type,omitempty"`
	Data           []byte          `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
	OwnerPubkey    string          `protobuf:"bytes,4,opt,name=OwnerPubkey,proto3" json:"OwnerPubkey,omitempty"`
	OwnerSignature string          `protobuf:"bytes,5,opt,name=OwnerSignature,proto3" json:"OwnerSignature,omitempty"`
	TimeStamp      int64           `protobuf:"varint,6,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty,string"`
	Memo           string          `protobuf:"bytes,7,opt,name=Memo,proto3" json:"Memo,omitempty"`
}

func (x *ChainConfigItem) Reset() {
	*x = ChainConfigItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainConfigItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainConfigItem) ProtoMessage() {}

func (x *ChainConfigItem) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainConfigItem.ProtoReflect.Descriptor instead.
func (*ChainConfigItem) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{13}
}

func (x *ChainConfigItem) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *ChainConfigItem) GetType() ChainConfigType {
	if x != nil {
		return x.Type
	}
	return ChainConfigType_SET_TRX_AUTH_MODE
}

func (x *ChainConfigItem) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ChainConfigItem) GetOwnerPubkey() string {
	if x != nil {
		return x.OwnerPubkey
	}
	return ""
}

func (x *ChainConfigItem) GetOwnerSignature() string {
	if x != nil {
		return x.OwnerSignature
	}
	return ""
}

func (x *ChainConfigItem) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *ChainConfigItem) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

type ChainSendTrxRuleListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action ActionType `protobuf:"varint,1,opt,name=Action,proto3,enum=quorum.pb.ActionType" json:"Action,omitempty"`
	Pubkey string     `protobuf:"bytes,3,opt,name=Pubkey,proto3" json:"Pubkey,omitempty"`
	Type   []TrxType  `protobuf:"varint,4,rep,packed,name=Type,proto3,enum=quorum.pb.TrxType" json:"Type,omitempty"`
}

func (x *ChainSendTrxRuleListItem) Reset() {
	*x = ChainSendTrxRuleListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainSendTrxRuleListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainSendTrxRuleListItem) ProtoMessage() {}

func (x *ChainSendTrxRuleListItem) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainSendTrxRuleListItem.ProtoReflect.Descriptor instead.
func (*ChainSendTrxRuleListItem) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{14}
}

func (x *ChainSendTrxRuleListItem) GetAction() ActionType {
	if x != nil {
		return x.Action
	}
	return ActionType_ADD
}

func (x *ChainSendTrxRuleListItem) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *ChainSendTrxRuleListItem) GetType() []TrxType {
	if x != nil {
		return x.Type
	}
	return nil
}

type SetTrxAuthModeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type TrxType     `protobuf:"varint,1,opt,name=Type,proto3,enum=quorum.pb.TrxType" json:"Type,omitempty"`
	Mode TrxAuthMode `protobuf:"varint,2,opt,name=Mode,proto3,enum=quorum.pb.TrxAuthMode" json:"Mode,omitempty"`
}

func (x *SetTrxAuthModeItem) Reset() {
	*x = SetTrxAuthModeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTrxAuthModeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTrxAuthModeItem) ProtoMessage() {}

func (x *SetTrxAuthModeItem) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTrxAuthModeItem.ProtoReflect.Descriptor instead.
func (*SetTrxAuthModeItem) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{15}
}

func (x *SetTrxAuthModeItem) GetType() TrxType {
	if x != nil {
		return x.Type
	}
	return TrxType_POST
}

func (x *SetTrxAuthModeItem) GetMode() TrxAuthMode {
	if x != nil {
		return x.Mode
	}
	return TrxAuthMode_FOLLOW_ALW_LIST
}

type AppConfigItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId     string        `protobuf:"bytes,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	Action      ActionType    `protobuf:"varint,2,opt,name=Action,proto3,enum=quorum.pb.ActionType" json:"Action,omitempty"`
	Name        string        `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Type        AppConfigType `protobuf:"varint,4,opt,name=Type,proto3,enum=quorum.pb.AppConfigType" json:"Type,omitempty"`
	Value       string        `protobuf:"bytes,5,opt,name=Value,proto3" json:"Value,omitempty"`
	OwnerPubkey string        `protobuf:"bytes,6,opt,name=OwnerPubkey,proto3" json:"OwnerPubkey,omitempty"`
	OwnerSign   string        `protobuf:"bytes,7,opt,name=OwnerSign,proto3" json:"OwnerSign,omitempty"`
	Memo        string        `protobuf:"bytes,8,opt,name=Memo,proto3" json:"Memo,omitempty"`
	TimeStamp   int64         `protobuf:"varint,9,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty,string"`
}

func (x *AppConfigItem) Reset() {
	*x = AppConfigItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppConfigItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppConfigItem) ProtoMessage() {}

func (x *AppConfigItem) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppConfigItem.ProtoReflect.Descriptor instead.
func (*AppConfigItem) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{16}
}

func (x *AppConfigItem) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *AppConfigItem) GetAction() ActionType {
	if x != nil {
		return x.Action
	}
	return ActionType_ADD
}

func (x *AppConfigItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AppConfigItem) GetType() AppConfigType {
	if x != nil {
		return x.Type
	}
	return AppConfigType_INT
}

func (x *AppConfigItem) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *AppConfigItem) GetOwnerPubkey() string {
	if x != nil {
		return x.OwnerPubkey
	}
	return ""
}

func (x *AppConfigItem) GetOwnerSign() string {
	if x != nil {
		return x.OwnerSign
	}
	return ""
}

func (x *AppConfigItem) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *AppConfigItem) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

type GroupSeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GenesisBlock   *Block `protobuf:"bytes,1,opt,name=GenesisBlock,proto3" json:"GenesisBlock,omitempty"`
	GroupId        string `protobuf:"bytes,2,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	GroupName      string `protobuf:"bytes,3,opt,name=GroupName,proto3" json:"GroupName,omitempty"`
	OwnerPubkey    string `protobuf:"bytes,4,opt,name=OwnerPubkey,proto3" json:"OwnerPubkey,omitempty"`
	ConsensusType  string `protobuf:"bytes,5,opt,name=ConsensusType,proto3" json:"ConsensusType,omitempty"`
	EncryptionType string `protobuf:"bytes,6,opt,name=EncryptionType,proto3" json:"EncryptionType,omitempty"`
	CipherKey      string `protobuf:"bytes,7,opt,name=CipherKey,proto3" json:"CipherKey,omitempty"`
	AppKey         string `protobuf:"bytes,8,opt,name=AppKey,proto3" json:"AppKey,omitempty"`
	Signature      string `protobuf:"bytes,9,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (x *GroupSeed) Reset() {
	*x = GroupSeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupSeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupSeed) ProtoMessage() {}

func (x *GroupSeed) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupSeed.ProtoReflect.Descriptor instead.
func (*GroupSeed) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{17}
}

func (x *GroupSeed) GetGenesisBlock() *Block {
	if x != nil {
		return x.GenesisBlock
	}
	return nil
}

func (x *GroupSeed) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GroupSeed) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *GroupSeed) GetOwnerPubkey() string {
	if x != nil {
		return x.OwnerPubkey
	}
	return ""
}

func (x *GroupSeed) GetConsensusType() string {
	if x != nil {
		return x.ConsensusType
	}
	return ""
}

func (x *GroupSeed) GetEncryptionType() string {
	if x != nil {
		return x.EncryptionType
	}
	return ""
}

func (x *GroupSeed) GetCipherKey() string {
	if x != nil {
		return x.CipherKey
	}
	return ""
}

func (x *GroupSeed) GetAppKey() string {
	if x != nil {
		return x.AppKey
	}
	return ""
}

func (x *GroupSeed) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type NodeSDKGroupItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group        *GroupItem `protobuf:"bytes,1,opt,name=Group,proto3" json:"Group,omitempty"`
	EncryptAlias string     `protobuf:"bytes,2,opt,name=EncryptAlias,proto3" json:"EncryptAlias,omitempty"`
	SignAlias    string     `protobuf:"bytes,3,opt,name=SignAlias,proto3" json:"SignAlias,omitempty"`
	ApiUrl       []string   `protobuf:"bytes,4,rep,name=ApiUrl,proto3" json:"ApiUrl,omitempty"`
	GroupSeed    string     `protobuf:"bytes,5,opt,name=GroupSeed,proto3" json:"GroupSeed,omitempty"`
}

func (x *NodeSDKGroupItem) Reset() {
	*x = NodeSDKGroupItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeSDKGroupItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeSDKGroupItem) ProtoMessage() {}

func (x *NodeSDKGroupItem) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeSDKGroupItem.ProtoReflect.Descriptor instead.
func (*NodeSDKGroupItem) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{18}
}

func (x *NodeSDKGroupItem) GetGroup() *GroupItem {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *NodeSDKGroupItem) GetEncryptAlias() string {
	if x != nil {
		return x.EncryptAlias
	}
	return ""
}

func (x *NodeSDKGroupItem) GetSignAlias() string {
	if x != nil {
		return x.SignAlias
	}
	return ""
}

func (x *NodeSDKGroupItem) GetApiUrl() []string {
	if x != nil {
		return x.ApiUrl
	}
	return nil
}

func (x *NodeSDKGroupItem) GetGroupSeed() string {
	if x != nil {
		return x.GroupSeed
	}
	return ""
}

type HBTrxBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trxs []*Trx `protobuf:"bytes,1,rep,name=Trxs,proto3" json:"Trxs,omitempty"`
}

func (x *HBTrxBundle) Reset() {
	*x = HBTrxBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HBTrxBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HBTrxBundle) ProtoMessage() {}

func (x *HBTrxBundle) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HBTrxBundle.ProtoReflect.Descriptor instead.
func (*HBTrxBundle) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{19}
}

func (x *HBTrxBundle) GetTrxs() []*Trx {
	if x != nil {
		return x.Trxs
	}
	return nil
}

type HBMsgv1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId       string           `protobuf:"bytes,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	Epoch       uint64           `protobuf:"varint,2,opt,name=Epoch,proto3" json:"Epoch,omitempty"`
	PayloadType HBMsgPayloadType `protobuf:"varint,3,opt,name=PayloadType,proto3,enum=quorum.pb.HBMsgPayloadType" json:"PayloadType,omitempty"` // RBC or BBA
	Payload     []byte           `protobuf:"bytes,4,opt,name=Payload,proto3" json:"Payload,omitempty"`
}

func (x *HBMsgv1) Reset() {
	*x = HBMsgv1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HBMsgv1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HBMsgv1) ProtoMessage() {}

func (x *HBMsgv1) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HBMsgv1.ProtoReflect.Descriptor instead.
func (*HBMsgv1) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{20}
}

func (x *HBMsgv1) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

func (x *HBMsgv1) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *HBMsgv1) GetPayloadType() HBMsgPayloadType {
	if x != nil {
		return x.PayloadType
	}
	return HBMsgPayloadType_RBC
}

func (x *HBMsgv1) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// RBC
type RBCMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    RBCMsgType `protobuf:"varint,1,opt,name=Type,proto3,enum=quorum.pb.RBCMsgType" json:"Type,omitempty"` //INIT_PROPOSE / PROOF / READY
	Payload []byte     `protobuf:"bytes,2,opt,name=Payload,proto3" json:"Payload,omitempty"`
}

func (x *RBCMsg) Reset() {
	*x = RBCMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RBCMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RBCMsg) ProtoMessage() {}

func (x *RBCMsg) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RBCMsg.ProtoReflect.Descriptor instead.
func (*RBCMsg) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{21}
}

func (x *RBCMsg) GetType() RBCMsgType {
	if x != nil {
		return x.Type
	}
	return RBCMsgType_INIT_PROPOSE
}

func (x *RBCMsg) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type InitPropose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootHash         []byte   `protobuf:"bytes,1,opt,name=RootHash,proto3" json:"RootHash,omitempty"`
	Proof            [][]byte `protobuf:"bytes,2,rep,name=Proof,proto3" json:"Proof,omitempty"`
	Index            int64    `protobuf:"varint,3,opt,name=Index,proto3" json:"Index,omitempty"`
	Leaves           int64    `protobuf:"varint,4,opt,name=Leaves,proto3" json:"Leaves,omitempty"`
	OriginalDataSize int64    `protobuf:"varint,5,opt,name=OriginalDataSize,proto3" json:"OriginalDataSize,omitempty"`
	RecvNodePubkey   string   `protobuf:"bytes,6,opt,name=RecvNodePubkey,proto3" json:"RecvNodePubkey,omitempty"` //producer which should handle this ecc data shard
	ProposerPubkey   string   `protobuf:"bytes,7,opt,name=ProposerPubkey,proto3" json:"ProposerPubkey,omitempty"` //producer which make this propose (part of ecc shards)
	ProposerSign     []byte   `protobuf:"bytes,8,opt,name=ProposerSign,proto3" json:"ProposerSign,omitempty"`     //signature of producer made this propose
}

func (x *InitPropose) Reset() {
	*x = InitPropose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitPropose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitPropose) ProtoMessage() {}

func (x *InitPropose) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitPropose.ProtoReflect.Descriptor instead.
func (*InitPropose) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{22}
}

func (x *InitPropose) GetRootHash() []byte {
	if x != nil {
		return x.RootHash
	}
	return nil
}

func (x *InitPropose) GetProof() [][]byte {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *InitPropose) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *InitPropose) GetLeaves() int64 {
	if x != nil {
		return x.Leaves
	}
	return 0
}

func (x *InitPropose) GetOriginalDataSize() int64 {
	if x != nil {
		return x.OriginalDataSize
	}
	return 0
}

func (x *InitPropose) GetRecvNodePubkey() string {
	if x != nil {
		return x.RecvNodePubkey
	}
	return ""
}

func (x *InitPropose) GetProposerPubkey() string {
	if x != nil {
		return x.ProposerPubkey
	}
	return ""
}

func (x *InitPropose) GetProposerSign() []byte {
	if x != nil {
		return x.ProposerSign
	}
	return nil
}

type Echo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootHash               []byte   `protobuf:"bytes,1,opt,name=RootHash,proto3" json:"RootHash,omitempty"`
	Proof                  [][]byte `protobuf:"bytes,2,rep,name=Proof,proto3" json:"Proof,omitempty"`
	Index                  int64    `protobuf:"varint,3,opt,name=Index,proto3" json:"Index,omitempty"`
	Leaves                 int64    `protobuf:"varint,4,opt,name=Leaves,proto3" json:"Leaves,omitempty"`
	OriginalDataSize       int64    `protobuf:"varint,5,opt,name=OriginalDataSize,proto3" json:"OriginalDataSize,omitempty"`
	OriginalProposerPubkey string   `protobuf:"bytes,6,opt,name=OriginalProposerPubkey,proto3" json:"OriginalProposerPubkey,omitempty"` //producer make this original input
	EchoProviderPubkey     string   `protobuf:"bytes,7,opt,name=EchoProviderPubkey,proto3" json:"EchoProviderPubkey,omitempty"`         //producer which broadcast this Echo
	EchoProviderSign       []byte   `protobuf:"bytes,8,opt,name=EchoProviderSign,proto3" json:"EchoProviderSign,omitempty"`             //signature of producer broadcast this Echo
}

func (x *Echo) Reset() {
	*x = Echo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Echo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Echo) ProtoMessage() {}

func (x *Echo) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Echo.ProtoReflect.Descriptor instead.
func (*Echo) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{23}
}

func (x *Echo) GetRootHash() []byte {
	if x != nil {
		return x.RootHash
	}
	return nil
}

func (x *Echo) GetProof() [][]byte {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *Echo) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Echo) GetLeaves() int64 {
	if x != nil {
		return x.Leaves
	}
	return 0
}

func (x *Echo) GetOriginalDataSize() int64 {
	if x != nil {
		return x.OriginalDataSize
	}
	return 0
}

func (x *Echo) GetOriginalProposerPubkey() string {
	if x != nil {
		return x.OriginalProposerPubkey
	}
	return ""
}

func (x *Echo) GetEchoProviderPubkey() string {
	if x != nil {
		return x.EchoProviderPubkey
	}
	return ""
}

func (x *Echo) GetEchoProviderSign() []byte {
	if x != nil {
		return x.EchoProviderSign
	}
	return nil
}

type Ready struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootHash               []byte `protobuf:"bytes,1,opt,name=RootHash,proto3" json:"RootHash,omitempty"`
	OriginalProposerPubkey string `protobuf:"bytes,2,opt,name=OriginalProposerPubkey,proto3" json:"OriginalProposerPubkey,omitempty"`
	ReadyProviderPubkey    string `protobuf:"bytes,3,opt,name=ReadyProviderPubkey,proto3" json:"ReadyProviderPubkey,omitempty"`
	ReadyProviderSign      []byte `protobuf:"bytes,4,opt,name=ReadyProviderSign,proto3" json:"ReadyProviderSign,omitempty"`
}

func (x *Ready) Reset() {
	*x = Ready{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ready) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ready) ProtoMessage() {}

func (x *Ready) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ready.ProtoReflect.Descriptor instead.
func (*Ready) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{24}
}

func (x *Ready) GetRootHash() []byte {
	if x != nil {
		return x.RootHash
	}
	return nil
}

func (x *Ready) GetOriginalProposerPubkey() string {
	if x != nil {
		return x.OriginalProposerPubkey
	}
	return ""
}

func (x *Ready) GetReadyProviderPubkey() string {
	if x != nil {
		return x.ReadyProviderPubkey
	}
	return ""
}

func (x *Ready) GetReadyProviderSign() []byte {
	if x != nil {
		return x.ReadyProviderSign
	}
	return nil
}

// BBA
type BBAMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    BBAMsgType `protobuf:"varint,1,opt,name=Type,proto3,enum=quorum.pb.BBAMsgType" json:"Type,omitempty"` //BVAL or AUX
	Payload []byte     `protobuf:"bytes,2,opt,name=Payload,proto3" json:"Payload,omitempty"`
}

func (x *BBAMsg) Reset() {
	*x = BBAMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BBAMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BBAMsg) ProtoMessage() {}

func (x *BBAMsg) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BBAMsg.ProtoReflect.Descriptor instead.
func (*BBAMsg) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{25}
}

func (x *BBAMsg) GetType() BBAMsgType {
	if x != nil {
		return x.Type
	}
	return BBAMsgType_BVAL
}

func (x *BBAMsg) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type Bval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProposerId   string `protobuf:"bytes,1,opt,name=ProposerId,proto3" json:"ProposerId,omitempty"`
	SenderPubkey string `protobuf:"bytes,2,opt,name=SenderPubkey,proto3" json:"SenderPubkey,omitempty"`
	Epoch        int64  `protobuf:"varint,3,opt,name=Epoch,proto3" json:"Epoch,omitempty"`
	Value        bool   `protobuf:"varint,4,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *Bval) Reset() {
	*x = Bval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bval) ProtoMessage() {}

func (x *Bval) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bval.ProtoReflect.Descriptor instead.
func (*Bval) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{26}
}

func (x *Bval) GetProposerId() string {
	if x != nil {
		return x.ProposerId
	}
	return ""
}

func (x *Bval) GetSenderPubkey() string {
	if x != nil {
		return x.SenderPubkey
	}
	return ""
}

func (x *Bval) GetEpoch() int64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *Bval) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type Aux struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProposerId   string `protobuf:"bytes,1,opt,name=ProposerId,proto3" json:"ProposerId,omitempty"`
	SenderPubkey string `protobuf:"bytes,2,opt,name=SenderPubkey,proto3" json:"SenderPubkey,omitempty"`
	Epoch        uint64 `protobuf:"varint,3,opt,name=Epoch,proto3" json:"Epoch,omitempty"`
	Value        bool   `protobuf:"varint,4,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *Aux) Reset() {
	*x = Aux{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aux) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aux) ProtoMessage() {}

func (x *Aux) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aux.ProtoReflect.Descriptor instead.
func (*Aux) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{27}
}

func (x *Aux) GetProposerId() string {
	if x != nil {
		return x.ProposerId
	}
	return ""
}

func (x *Aux) GetSenderPubkey() string {
	if x != nil {
		return x.SenderPubkey
	}
	return ""
}

func (x *Aux) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *Aux) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

//old proto msg
type GroupItemV0 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId           string            `protobuf:"bytes,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	GroupName         string            `protobuf:"bytes,2,opt,name=GroupName,proto3" json:"GroupName,omitempty"`
	OwnerPubKey       string            `protobuf:"bytes,3,opt,name=OwnerPubKey,proto3" json:"OwnerPubKey,omitempty"`
	UserSignPubkey    string            `protobuf:"bytes,4,opt,name=UserSignPubkey,proto3" json:"UserSignPubkey,omitempty"`
	UserEncryptPubkey string            `protobuf:"bytes,5,opt,name=UserEncryptPubkey,proto3" json:"UserEncryptPubkey,omitempty"`
	UserRole          RoleV0            `protobuf:"varint,6,opt,name=UserRole,proto3,enum=quorum.pb.RoleV0" json:"UserRole,omitempty"`
	LastUpdate        int64             `protobuf:"varint,7,opt,name=LastUpdate,proto3" json:"LastUpdate,omitempty"`
	HighestHeight     int64             `protobuf:"varint,8,opt,name=HighestHeight,proto3" json:"HighestHeight,omitempty"`
	HighestBlockId    string            `protobuf:"bytes,9,opt,name=HighestBlockId,proto3" json:"HighestBlockId,omitempty"`
	GenesisBlock      *Block            `protobuf:"bytes,10,opt,name=GenesisBlock,proto3" json:"GenesisBlock,omitempty"`
	EncryptType       GroupEncryptType  `protobuf:"varint,11,opt,name=EncryptType,proto3,enum=quorum.pb.GroupEncryptType" json:"EncryptType,omitempty"`
	ConsenseType      GroupConsenseType `protobuf:"varint,12,opt,name=ConsenseType,proto3,enum=quorum.pb.GroupConsenseType" json:"ConsenseType,omitempty"`
	CipherKey         string            `protobuf:"bytes,13,opt,name=CipherKey,proto3" json:"CipherKey,omitempty"`
	AppKey            string            `protobuf:"bytes,14,opt,name=AppKey,proto3" json:"AppKey,omitempty"`
}

func (x *GroupItemV0) Reset() {
	*x = GroupItemV0{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupItemV0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupItemV0) ProtoMessage() {}

func (x *GroupItemV0) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupItemV0.ProtoReflect.Descriptor instead.
func (*GroupItemV0) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{28}
}

func (x *GroupItemV0) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GroupItemV0) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *GroupItemV0) GetOwnerPubKey() string {
	if x != nil {
		return x.OwnerPubKey
	}
	return ""
}

func (x *GroupItemV0) GetUserSignPubkey() string {
	if x != nil {
		return x.UserSignPubkey
	}
	return ""
}

func (x *GroupItemV0) GetUserEncryptPubkey() string {
	if x != nil {
		return x.UserEncryptPubkey
	}
	return ""
}

func (x *GroupItemV0) GetUserRole() RoleV0 {
	if x != nil {
		return x.UserRole
	}
	return RoleV0_GROUP_PRODUCER
}

func (x *GroupItemV0) GetLastUpdate() int64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

func (x *GroupItemV0) GetHighestHeight() int64 {
	if x != nil {
		return x.HighestHeight
	}
	return 0
}

func (x *GroupItemV0) GetHighestBlockId() string {
	if x != nil {
		return x.HighestBlockId
	}
	return ""
}

func (x *GroupItemV0) GetGenesisBlock() *Block {
	if x != nil {
		return x.GenesisBlock
	}
	return nil
}

func (x *GroupItemV0) GetEncryptType() GroupEncryptType {
	if x != nil {
		return x.EncryptType
	}
	return GroupEncryptType_PUBLIC
}

func (x *GroupItemV0) GetConsenseType() GroupConsenseType {
	if x != nil {
		return x.ConsenseType
	}
	return GroupConsenseType_POA
}

func (x *GroupItemV0) GetCipherKey() string {
	if x != nil {
		return x.CipherKey
	}
	return ""
}

func (x *GroupItemV0) GetAppKey() string {
	if x != nil {
		return x.AppKey
	}
	return ""
}

var File_chain_proto protoreflect.FileDescriptor

var file_chain_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x71,
	0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x22, 0x49, 0x0a, 0x07, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x22, 0xec, 0x02, 0x0a, 0x03, 0x54, 0x72, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x72, 0x78, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x72, 0x78, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x78, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x73,
	0x65, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x53,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x12,
	0x3b, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62,
	0x2e, 0x54, 0x72, 0x78, 0x53, 0x74, 0x72, 0x6f, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4a, 0x04, 0x08, 0x09,
	0x10, 0x0a, 0x22, 0xad, 0x02, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x76, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x50, 0x72, 0x65, 0x76, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x50, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x04, 0x54, 0x72,
	0x78, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75,
	0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x78, 0x52, 0x04, 0x54, 0x72, 0x78, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x53, 0x75, 0x64, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x53, 0x75,
	0x64, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x22,
	0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x53, 0x69,
	0x67, 0x6e, 0x22, 0x63, 0x0a, 0x07, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a,
	0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70,
	0x62, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xae, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x71, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x24, 0x0a, 0x0d,
	0x42, 0x6c, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x42, 0x6c, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x71, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x53, 0x69, 0x67, 0x6e, 0x22, 0xec, 0x02, 0x0a, 0x0c, 0x52, 0x65, 0x71,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a,
	0x0e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x50,
	0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x71, 0x42, 0x6c, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x6c, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x42, 0x6c, 0x6b,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x6c,
	0x6b, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x42, 0x6c, 0x6b, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x12, 0x2f,
	0x0a, 0x06, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x06, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x53, 0x69, 0x67, 0x6e, 0x22, 0x38, 0x0a, 0x0c, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d,
	0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x22, 0x7c, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x72, 0x78, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x72,
	0x78, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x75, 0x62,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0xad, 0x02, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b,
	0x65, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x26,
	0x0a, 0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e,
	0x70, 0x62, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x57, 0x69, 0x74, 0x68, 0x6e, 0x65, 0x73,
	0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x57,
	0x69, 0x74, 0x68, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x4d,
	0x65, 0x6d, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x22,
	0x4e, 0x0a, 0x15, 0x42, 0x46, 0x54, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x42, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x35, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x71, 0x75,
	0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73, 0x22,
	0x9f, 0x02, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x10,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2d,
	0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x65, 0x6d,
	0x6f, 0x22, 0xa6, 0x03, 0x0a, 0x0c, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x53, 0x69, 0x67, 0x6e, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x50, 0x75, 0x62, 0x6b,
	0x65, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x71, 0x75, 0x6f, 0x72,
	0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2d, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d,
	0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x22, 0xc8, 0x03, 0x0a, 0x09, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x4b,
	0x65, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x69, 0x67, 0x6e, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x55, 0x73,
	0x65, 0x72, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x4c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x47, 0x65, 0x6e, 0x65,
	0x73, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3d,
	0x0a, 0x0b, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a,
	0x0c, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41,
	0x70, 0x70, 0x4b, 0x65, 0x79, 0x22, 0xeb, 0x01, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d,
	0x65, 0x6d, 0x6f, 0x22, 0x89, 0x01, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x6e,
	0x64, 0x54, 0x72, 0x78, 0x52, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x2d, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70,
	0x62, 0x2e, 0x54, 0x72, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x68, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x54, 0x72, 0x78, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x6f, 0x64,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x26, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e,
	0x54, 0x72, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a,
	0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x71, 0x75,
	0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x78, 0x41, 0x75, 0x74, 0x68, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xa2, 0x02, 0x0a, 0x0d, 0x41, 0x70,
	0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70,
	0x62, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e,
	0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x4d, 0x65, 0x6d, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x65, 0x6d, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xbd,
	0x02, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x0c,
	0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x69,
	0x70, 0x68, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43,
	0x69, 0x70, 0x68, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x70, 0x70, 0x4b,
	0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xb6,
	0x01, 0x0a, 0x10, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x44, 0x4b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x2a, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x22, 0x0a, 0x0c, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x41, 0x6c, 0x69, 0x61, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x41, 0x6c, 0x69, 0x61,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x70, 0x69, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x41, 0x70, 0x69, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x65, 0x65, 0x64, 0x22, 0x31, 0x0a, 0x0b, 0x48, 0x42, 0x54, 0x72, 0x78,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x54, 0x72, 0x78, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62,
	0x2e, 0x54, 0x72, 0x78, 0x52, 0x04, 0x54, 0x72, 0x78, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x07, 0x48,
	0x42, 0x4d, 0x73, 0x67, 0x76, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x12, 0x3d, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d,
	0x2e, 0x70, 0x62, 0x2e, 0x48, 0x42, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x4d, 0x0a, 0x06, 0x52,
	0x42, 0x43, 0x4d, 0x73, 0x67, 0x12, 0x29, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x42, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x8d, 0x02, 0x0a, 0x0b, 0x49,
	0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f,
	0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x52, 0x6f,
	0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x14, 0x0a, 0x05,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x76, 0x4e, 0x6f,
	0x64, 0x65, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x52, 0x65, 0x63, 0x76, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x26,
	0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72,
	0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x22, 0xa6, 0x02, 0x0a, 0x04, 0x45,
	0x63, 0x68, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x52, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x4c,
	0x65, 0x61, 0x76, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x36, 0x0a, 0x16, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65,
	0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x45, 0x63, 0x68, 0x6f, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x45, 0x63, 0x68, 0x6f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x45, 0x63, 0x68, 0x6f, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x10, 0x45, 0x63, 0x68, 0x6f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53,
	0x69, 0x67, 0x6e, 0x22, 0xbb, 0x01, 0x0a, 0x05, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x52, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x52, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x36, 0x0a, 0x16, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x12, 0x30, 0x0a, 0x13, 0x52, 0x65, 0x61, 0x64, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x50, 0x75, 0x62,
	0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x52, 0x65, 0x61, 0x64, 0x79, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67,
	0x6e, 0x22, 0x4d, 0x0a, 0x06, 0x42, 0x42, 0x41, 0x4d, 0x73, 0x67, 0x12, 0x29, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x71, 0x75, 0x6f, 0x72,
	0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x42, 0x41, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x22, 0x76, 0x0a, 0x04, 0x42, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x75, 0x0a, 0x03, 0x41, 0x75, 0x78, 0x12,
	0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x75, 0x62,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xc7, 0x04, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x30, 0x12,
	0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x12, 0x2c, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x55, 0x73,
	0x65, 0x72, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12,
	0x2d, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x6f,
	0x6c, 0x65, 0x56, 0x30, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x48, 0x69,
	0x67, 0x68, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0c,
	0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x3d, 0x0a, 0x0b, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d,
	0x2e, 0x70, 0x62, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x40, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d,
	0x2e, 0x70, 0x62, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x4b, 0x65, 0x79,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x4b, 0x65,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x2a, 0x34, 0x0a, 0x0b, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x52, 0x58, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x53, 0x59, 0x4e, 0x43, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x42, 0x42, 0x10, 0x03, 0x2a,
	0x2c, 0x0a, 0x0c, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x41, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x41, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x52, 0x10, 0x01, 0x2a, 0x38, 0x0a,
	0x0b, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09,
	0x41, 0x4e, 0x4e, 0x4f, 0x55, 0x4e, 0x43, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41,
	0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x21, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x44, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x01, 0x2a, 0x26, 0x0a, 0x0e, 0x54, 0x72,
	0x78, 0x53, 0x74, 0x72, 0x6f, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05,
	0x43, 0x48, 0x41, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x41, 0x43, 0x48, 0x45,
	0x10, 0x01, 0x2a, 0x5b, 0x0a, 0x07, 0x54, 0x72, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a,
	0x04, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4e, 0x4e, 0x4f, 0x55,
	0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45,
	0x52, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x53, 0x45, 0x52, 0x10, 0x03, 0x12, 0x10, 0x0a,
	0x0c, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x06, 0x12,
	0x0e, 0x0a, 0x0a, 0x41, 0x50, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x07, 0x2a,
	0x30, 0x0a, 0x0b, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d,
	0x0a, 0x09, 0x52, 0x45, 0x51, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x52, 0x45, 0x51, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10,
	0x01, 0x2a, 0x50, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x42, 0x6c, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x49, 0x4e, 0x5f, 0x52, 0x45,
	0x53, 0x50, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x49, 0x4e,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x5f, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x02, 0x2a, 0x2b, 0x0a, 0x10, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49,
	0x43, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x01,
	0x2a, 0x25, 0x0a, 0x11, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x4f, 0x41, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x50, 0x4f, 0x53, 0x10, 0x01, 0x2a, 0x2c, 0x0a, 0x06, 0x52, 0x6f, 0x6c, 0x65, 0x56,
	0x30, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55,
	0x43, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x10, 0x01, 0x2a, 0x4c, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x45, 0x54, 0x5f,
	0x54, 0x52, 0x58, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12,
	0x10, 0x0a, 0x0c, 0x55, 0x50, 0x44, 0x5f, 0x44, 0x4e, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10,
	0x01, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x50, 0x44, 0x5f, 0x41, 0x4c, 0x57, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x10, 0x02, 0x2a, 0x37, 0x0a, 0x0b, 0x54, 0x72, 0x78, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x4c, 0x57,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x4f, 0x4c, 0x4c, 0x4f,
	0x57, 0x5f, 0x44, 0x4e, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x01, 0x2a, 0x2d, 0x0a, 0x0c,
	0x41, 0x75, 0x74, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a,
	0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x44, 0x45, 0x4e, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x01, 0x2a, 0x2e, 0x0a, 0x0d, 0x41,
	0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03,
	0x49, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x2a, 0x24, 0x0a, 0x10, 0x48,
	0x42, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x07, 0x0a, 0x03, 0x52, 0x42, 0x43, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x42, 0x41, 0x10,
	0x01, 0x2a, 0x33, 0x0a, 0x0a, 0x52, 0x42, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x45, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x43, 0x48, 0x4f, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x52,
	0x45, 0x41, 0x44, 0x59, 0x10, 0x02, 0x2a, 0x1f, 0x0a, 0x0a, 0x42, 0x42, 0x41, 0x4d, 0x73, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x56, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x41, 0x55, 0x58, 0x10, 0x01, 0x42, 0x24, 0x5a, 0x22, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x75, 0x6d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chain_proto_rawDescOnce sync.Once
	file_chain_proto_rawDescData = file_chain_proto_rawDesc
)

func file_chain_proto_rawDescGZIP() []byte {
	file_chain_proto_rawDescOnce.Do(func() {
		file_chain_proto_rawDescData = protoimpl.X.CompressGZIP(file_chain_proto_rawDescData)
	})
	return file_chain_proto_rawDescData
}

var file_chain_proto_enumTypes = make([]protoimpl.EnumInfo, 18)
var file_chain_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_chain_proto_goTypes = []interface{}{
	(PackageType)(0),                 // 0: quorum.pb.PackageType
	(AnnounceType)(0),                // 1: quorum.pb.AnnounceType
	(ApproveType)(0),                 // 2: quorum.pb.ApproveType
	(ActionType)(0),                  // 3: quorum.pb.ActionType
	(TrxStroageType)(0),              // 4: quorum.pb.TrxStroageType
	(TrxType)(0),                     // 5: quorum.pb.TrxType
	(SyncMsgType)(0),                 // 6: quorum.pb.SyncMsgType
	(ReqBlkResult)(0),                // 7: quorum.pb.ReqBlkResult
	(GroupEncryptType)(0),            // 8: quorum.pb.GroupEncryptType
	(GroupConsenseType)(0),           // 9: quorum.pb.GroupConsenseType
	(RoleV0)(0),                      // 10: quorum.pb.RoleV0
	(ChainConfigType)(0),             // 11: quorum.pb.ChainConfigType
	(TrxAuthMode)(0),                 // 12: quorum.pb.TrxAuthMode
	(AuthListType)(0),                // 13: quorum.pb.AuthListType
	(AppConfigType)(0),               // 14: quorum.pb.AppConfigType
	(HBMsgPayloadType)(0),            // 15: quorum.pb.HBMsgPayloadType
	(RBCMsgType)(0),                  // 16: quorum.pb.RBCMsgType
	(BBAMsgType)(0),                  // 17: quorum.pb.BBAMsgType
	(*Package)(nil),                  // 18: quorum.pb.Package
	(*Trx)(nil),                      // 19: quorum.pb.Trx
	(*Block)(nil),                    // 20: quorum.pb.Block
	(*SyncMsg)(nil),                  // 21: quorum.pb.SyncMsg
	(*ReqBlock)(nil),                 // 22: quorum.pb.ReqBlock
	(*ReqBlockResp)(nil),             // 23: quorum.pb.ReqBlockResp
	(*BlocksBundle)(nil),             // 24: quorum.pb.BlocksBundle
	(*PostItem)(nil),                 // 25: quorum.pb.PostItem
	(*ProducerItem)(nil),             // 26: quorum.pb.ProducerItem
	(*BFTProducerBundleItem)(nil),    // 27: quorum.pb.BFTProducerBundleItem
	(*UserItem)(nil),                 // 28: quorum.pb.UserItem
	(*AnnounceItem)(nil),             // 29: quorum.pb.AnnounceItem
	(*GroupItem)(nil),                // 30: quorum.pb.GroupItem
	(*ChainConfigItem)(nil),          // 31: quorum.pb.ChainConfigItem
	(*ChainSendTrxRuleListItem)(nil), // 32: quorum.pb.ChainSendTrxRuleListItem
	(*SetTrxAuthModeItem)(nil),       // 33: quorum.pb.SetTrxAuthModeItem
	(*AppConfigItem)(nil),            // 34: quorum.pb.AppConfigItem
	(*GroupSeed)(nil),                // 35: quorum.pb.GroupSeed
	(*NodeSDKGroupItem)(nil),         // 36: quorum.pb.NodeSDKGroupItem
	(*HBTrxBundle)(nil),              // 37: quorum.pb.HBTrxBundle
	(*HBMsgv1)(nil),                  // 38: quorum.pb.HBMsgv1
	(*RBCMsg)(nil),                   // 39: quorum.pb.RBCMsg
	(*InitPropose)(nil),              // 40: quorum.pb.InitPropose
	(*Echo)(nil),                     // 41: quorum.pb.Echo
	(*Ready)(nil),                    // 42: quorum.pb.Ready
	(*BBAMsg)(nil),                   // 43: quorum.pb.BBAMsg
	(*Bval)(nil),                     // 44: quorum.pb.Bval
	(*Aux)(nil),                      // 45: quorum.pb.Aux
	(*GroupItemV0)(nil),              // 46: quorum.pb.GroupItemV0
}
var file_chain_proto_depIdxs = []int32{
	0,  // 0: quorum.pb.Package.type:type_name -> quorum.pb.PackageType
	5,  // 1: quorum.pb.Trx.Type:type_name -> quorum.pb.TrxType
	4,  // 2: quorum.pb.Trx.StorageType:type_name -> quorum.pb.TrxStroageType
	19, // 3: quorum.pb.Block.Trxs:type_name -> quorum.pb.Trx
	6,  // 4: quorum.pb.SyncMsg.Type:type_name -> quorum.pb.SyncMsgType
	7,  // 5: quorum.pb.ReqBlockResp.Result:type_name -> quorum.pb.ReqBlkResult
	24, // 6: quorum.pb.ReqBlockResp.Blocks:type_name -> quorum.pb.BlocksBundle
	20, // 7: quorum.pb.BlocksBundle.Blocks:type_name -> quorum.pb.Block
	3,  // 8: quorum.pb.ProducerItem.Action:type_name -> quorum.pb.ActionType
	26, // 9: quorum.pb.BFTProducerBundleItem.Producers:type_name -> quorum.pb.ProducerItem
	3,  // 10: quorum.pb.UserItem.Action:type_name -> quorum.pb.ActionType
	1,  // 11: quorum.pb.AnnounceItem.Type:type_name -> quorum.pb.AnnounceType
	2,  // 12: quorum.pb.AnnounceItem.Result:type_name -> quorum.pb.ApproveType
	3,  // 13: quorum.pb.AnnounceItem.Action:type_name -> quorum.pb.ActionType
	20, // 14: quorum.pb.GroupItem.GenesisBlock:type_name -> quorum.pb.Block
	8,  // 15: quorum.pb.GroupItem.EncryptType:type_name -> quorum.pb.GroupEncryptType
	9,  // 16: quorum.pb.GroupItem.ConsenseType:type_name -> quorum.pb.GroupConsenseType
	11, // 17: quorum.pb.ChainConfigItem.Type:type_name -> quorum.pb.ChainConfigType
	3,  // 18: quorum.pb.ChainSendTrxRuleListItem.Action:type_name -> quorum.pb.ActionType
	5,  // 19: quorum.pb.ChainSendTrxRuleListItem.Type:type_name -> quorum.pb.TrxType
	5,  // 20: quorum.pb.SetTrxAuthModeItem.Type:type_name -> quorum.pb.TrxType
	12, // 21: quorum.pb.SetTrxAuthModeItem.Mode:type_name -> quorum.pb.TrxAuthMode
	3,  // 22: quorum.pb.AppConfigItem.Action:type_name -> quorum.pb.ActionType
	14, // 23: quorum.pb.AppConfigItem.Type:type_name -> quorum.pb.AppConfigType
	20, // 24: quorum.pb.GroupSeed.GenesisBlock:type_name -> quorum.pb.Block
	30, // 25: quorum.pb.NodeSDKGroupItem.Group:type_name -> quorum.pb.GroupItem
	19, // 26: quorum.pb.HBTrxBundle.Trxs:type_name -> quorum.pb.Trx
	15, // 27: quorum.pb.HBMsgv1.PayloadType:type_name -> quorum.pb.HBMsgPayloadType
	16, // 28: quorum.pb.RBCMsg.Type:type_name -> quorum.pb.RBCMsgType
	17, // 29: quorum.pb.BBAMsg.Type:type_name -> quorum.pb.BBAMsgType
	10, // 30: quorum.pb.GroupItemV0.UserRole:type_name -> quorum.pb.RoleV0
	20, // 31: quorum.pb.GroupItemV0.GenesisBlock:type_name -> quorum.pb.Block
	8,  // 32: quorum.pb.GroupItemV0.EncryptType:type_name -> quorum.pb.GroupEncryptType
	9,  // 33: quorum.pb.GroupItemV0.ConsenseType:type_name -> quorum.pb.GroupConsenseType
	34, // [34:34] is the sub-list for method output_type
	34, // [34:34] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_chain_proto_init() }
func file_chain_proto_init() {
	if File_chain_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chain_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Package); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBlockResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlocksBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProducerItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BFTProducerBundleItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnounceItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainConfigItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainSendTrxRuleListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTrxAuthModeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppConfigItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupSeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeSDKGroupItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HBTrxBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HBMsgv1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RBCMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitPropose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Echo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ready); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BBAMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aux); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupItemV0); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chain_proto_rawDesc,
			NumEnums:      18,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chain_proto_goTypes,
		DependencyIndexes: file_chain_proto_depIdxs,
		EnumInfos:         file_chain_proto_enumTypes,
		MessageInfos:      file_chain_proto_msgTypes,
	}.Build()
	File_chain_proto = out.File
	file_chain_proto_rawDesc = nil
	file_chain_proto_goTypes = nil
	file_chain_proto_depIdxs = nil
}
