// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.18.1
// source: chain.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PackageType int32

const (
	PackageType_TRX           PackageType = 0
	PackageType_BLOCK         PackageType = 1
	PackageType_BFT_MSG       PackageType = 2
	PackageType_CC_MSG        PackageType = 3 //Change Consensus
	PackageType_SYNC          PackageType = 4
	PackageType_BROADCAST_MSG PackageType = 5
)

// Enum value maps for PackageType.
var (
	PackageType_name = map[int32]string{
		0: "TRX",
		1: "BLOCK",
		2: "BFT_MSG",
		3: "CC_MSG",
		4: "SYNC",
		5: "BROADCAST_MSG",
	}
	PackageType_value = map[string]int32{
		"TRX":           0,
		"BLOCK":         1,
		"BFT_MSG":       2,
		"CC_MSG":        3,
		"SYNC":          4,
		"BROADCAST_MSG": 5,
	}
)

func (x PackageType) Enum() *PackageType {
	p := new(PackageType)
	*p = x
	return p
}

func (x PackageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PackageType) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[0].Descriptor()
}

func (PackageType) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[0]
}

func (x PackageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PackageType.Descriptor instead.
func (PackageType) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{0}
}

//TRX
type ActionType int32

const (
	ActionType_ADD    ActionType = 0
	ActionType_REMOVE ActionType = 1
)

// Enum value maps for ActionType.
var (
	ActionType_name = map[int32]string{
		0: "ADD",
		1: "REMOVE",
	}
	ActionType_value = map[string]int32{
		"ADD":    0,
		"REMOVE": 1,
	}
)

func (x ActionType) Enum() *ActionType {
	p := new(ActionType)
	*p = x
	return p
}

func (x ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[1].Descriptor()
}

func (ActionType) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[1]
}

func (x ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionType.Descriptor instead.
func (ActionType) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{1}
}

type TrxStroageType int32

const (
	TrxStroageType_CHAIN TrxStroageType = 0
	TrxStroageType_CACHE TrxStroageType = 1
)

// Enum value maps for TrxStroageType.
var (
	TrxStroageType_name = map[int32]string{
		0: "CHAIN",
		1: "CACHE",
	}
	TrxStroageType_value = map[string]int32{
		"CHAIN": 0,
		"CACHE": 1,
	}
)

func (x TrxStroageType) Enum() *TrxStroageType {
	p := new(TrxStroageType)
	*p = x
	return p
}

func (x TrxStroageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrxStroageType) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[2].Descriptor()
}

func (TrxStroageType) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[2]
}

func (x TrxStroageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrxStroageType.Descriptor instead.
func (TrxStroageType) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{2}
}

type TrxType int32

const (
	TrxType_POST         TrxType = 0 // post to group
	TrxType_UPD_GRP_USER TrxType = 2 // owner update group user
	TrxType_CHAIN_CONFIG TrxType = 3 // chain configuration
	TrxType_APP_CONFIG   TrxType = 4 // app configuration
	TrxType_FORK         TrxType = 5 // fork chain
)

// Enum value maps for TrxType.
var (
	TrxType_name = map[int32]string{
		0: "POST",
		2: "UPD_GRP_USER",
		3: "CHAIN_CONFIG",
		4: "APP_CONFIG",
		5: "FORK",
	}
	TrxType_value = map[string]int32{
		"POST":         0,
		"UPD_GRP_USER": 2,
		"CHAIN_CONFIG": 3,
		"APP_CONFIG":   4,
		"FORK":         5,
	}
)

func (x TrxType) Enum() *TrxType {
	p := new(TrxType)
	*p = x
	return p
}

func (x TrxType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrxType) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[3].Descriptor()
}

func (TrxType) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[3]
}

func (x TrxType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrxType.Descriptor instead.
func (TrxType) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{3}
}

type ChainConfigType int32

const (
	ChainConfigType_SET_TRX_AUTH_MODE ChainConfigType = 0
	ChainConfigType_UPD_DNY_LIST      ChainConfigType = 1
	ChainConfigType_UPD_ALW_LIST      ChainConfigType = 2
)

// Enum value maps for ChainConfigType.
var (
	ChainConfigType_name = map[int32]string{
		0: "SET_TRX_AUTH_MODE",
		1: "UPD_DNY_LIST",
		2: "UPD_ALW_LIST",
	}
	ChainConfigType_value = map[string]int32{
		"SET_TRX_AUTH_MODE": 0,
		"UPD_DNY_LIST":      1,
		"UPD_ALW_LIST":      2,
	}
)

func (x ChainConfigType) Enum() *ChainConfigType {
	p := new(ChainConfigType)
	*p = x
	return p
}

func (x ChainConfigType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChainConfigType) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[4].Descriptor()
}

func (ChainConfigType) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[4]
}

func (x ChainConfigType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChainConfigType.Descriptor instead.
func (ChainConfigType) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{4}
}

type TrxAuthMode int32

const (
	TrxAuthMode_FOLLOW_ALW_LIST TrxAuthMode = 0
	TrxAuthMode_FOLLOW_DNY_LIST TrxAuthMode = 1
)

// Enum value maps for TrxAuthMode.
var (
	TrxAuthMode_name = map[int32]string{
		0: "FOLLOW_ALW_LIST",
		1: "FOLLOW_DNY_LIST",
	}
	TrxAuthMode_value = map[string]int32{
		"FOLLOW_ALW_LIST": 0,
		"FOLLOW_DNY_LIST": 1,
	}
)

func (x TrxAuthMode) Enum() *TrxAuthMode {
	p := new(TrxAuthMode)
	*p = x
	return p
}

func (x TrxAuthMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrxAuthMode) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[5].Descriptor()
}

func (TrxAuthMode) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[5]
}

func (x TrxAuthMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrxAuthMode.Descriptor instead.
func (TrxAuthMode) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{5}
}

type AuthListType int32

const (
	AuthListType_ALLOW_LIST AuthListType = 0
	AuthListType_DENY_LIST  AuthListType = 1
)

// Enum value maps for AuthListType.
var (
	AuthListType_name = map[int32]string{
		0: "ALLOW_LIST",
		1: "DENY_LIST",
	}
	AuthListType_value = map[string]int32{
		"ALLOW_LIST": 0,
		"DENY_LIST":  1,
	}
)

func (x AuthListType) Enum() *AuthListType {
	p := new(AuthListType)
	*p = x
	return p
}

func (x AuthListType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthListType) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[6].Descriptor()
}

func (AuthListType) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[6]
}

func (x AuthListType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthListType.Descriptor instead.
func (AuthListType) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{6}
}

type AppConfigType int32

const (
	AppConfigType_INT    AppConfigType = 0
	AppConfigType_BOOL   AppConfigType = 1
	AppConfigType_STRING AppConfigType = 2
)

// Enum value maps for AppConfigType.
var (
	AppConfigType_name = map[int32]string{
		0: "INT",
		1: "BOOL",
		2: "STRING",
	}
	AppConfigType_value = map[string]int32{
		"INT":    0,
		"BOOL":   1,
		"STRING": 2,
	}
)

func (x AppConfigType) Enum() *AppConfigType {
	p := new(AppConfigType)
	*p = x
	return p
}

func (x AppConfigType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppConfigType) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[7].Descriptor()
}

func (AppConfigType) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[7]
}

func (x AppConfigType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppConfigType.Descriptor instead.
func (AppConfigType) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{7}
}

//BFT_MSG
type BftMsgType int32

const (
	BftMsgType_HB_BFT BftMsgType = 0 //HBMsgV1
)

// Enum value maps for BftMsgType.
var (
	BftMsgType_name = map[int32]string{
		0: "HB_BFT",
	}
	BftMsgType_value = map[string]int32{
		"HB_BFT": 0,
	}
)

func (x BftMsgType) Enum() *BftMsgType {
	p := new(BftMsgType)
	*p = x
	return p
}

func (x BftMsgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BftMsgType) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[8].Descriptor()
}

func (BftMsgType) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[8]
}

func (x BftMsgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BftMsgType.Descriptor instead.
func (BftMsgType) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{8}
}

//CC_MSG
type CCMsgType int32

const (
	CCMsgType_CHANGE_CONSENSUS_REQ CCMsgType = 0 // request change consensus
	CCMsgType_CC_PROOF_HB          CCMsgType = 1 // HB msg for change consensus
)

// Enum value maps for CCMsgType.
var (
	CCMsgType_name = map[int32]string{
		0: "CHANGE_CONSENSUS_REQ",
		1: "CC_PROOF_HB",
	}
	CCMsgType_value = map[string]int32{
		"CHANGE_CONSENSUS_REQ": 0,
		"CC_PROOF_HB":          1,
	}
)

func (x CCMsgType) Enum() *CCMsgType {
	p := new(CCMsgType)
	*p = x
	return p
}

func (x CCMsgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CCMsgType) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[9].Descriptor()
}

func (CCMsgType) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[9]
}

func (x CCMsgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CCMsgType.Descriptor instead.
func (CCMsgType) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{9}
}

type ChangeConsensusResult int32

const (
	ChangeConsensusResult_SUCCESS ChangeConsensusResult = 0
	ChangeConsensusResult_FAIL    ChangeConsensusResult = 1
)

// Enum value maps for ChangeConsensusResult.
var (
	ChangeConsensusResult_name = map[int32]string{
		0: "SUCCESS",
		1: "FAIL",
	}
	ChangeConsensusResult_value = map[string]int32{
		"SUCCESS": 0,
		"FAIL":    1,
	}
)

func (x ChangeConsensusResult) Enum() *ChangeConsensusResult {
	p := new(ChangeConsensusResult)
	*p = x
	return p
}

func (x ChangeConsensusResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChangeConsensusResult) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[10].Descriptor()
}

func (ChangeConsensusResult) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[10]
}

func (x ChangeConsensusResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChangeConsensusResult.Descriptor instead.
func (ChangeConsensusResult) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{10}
}

//SYNC_MSG
type SyncMsgType int32

const (
	SyncMsgType_REQ_BLOCK      SyncMsgType = 0 // request block
	SyncMsgType_REQ_BLOCK_RESP SyncMsgType = 1 // response request block
)

// Enum value maps for SyncMsgType.
var (
	SyncMsgType_name = map[int32]string{
		0: "REQ_BLOCK",
		1: "REQ_BLOCK_RESP",
	}
	SyncMsgType_value = map[string]int32{
		"REQ_BLOCK":      0,
		"REQ_BLOCK_RESP": 1,
	}
)

func (x SyncMsgType) Enum() *SyncMsgType {
	p := new(SyncMsgType)
	*p = x
	return p
}

func (x SyncMsgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncMsgType) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[11].Descriptor()
}

func (SyncMsgType) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[11]
}

func (x SyncMsgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SyncMsgType.Descriptor instead.
func (SyncMsgType) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{11}
}

type ReqBlkResult int32

const (
	ReqBlkResult_BLOCK_IN_RESP        ReqBlkResult = 0 //"block(s) in resp and I may have more"
	ReqBlkResult_BLOCK_IN_RESP_ON_TOP ReqBlkResult = 1 //"block(s) in resp and I have no more block(when get req)"
	ReqBlkResult_BLOCK_NOT_FOUND      ReqBlkResult = 2 //"no block in resp and I don't have the requested block"
)

// Enum value maps for ReqBlkResult.
var (
	ReqBlkResult_name = map[int32]string{
		0: "BLOCK_IN_RESP",
		1: "BLOCK_IN_RESP_ON_TOP",
		2: "BLOCK_NOT_FOUND",
	}
	ReqBlkResult_value = map[string]int32{
		"BLOCK_IN_RESP":        0,
		"BLOCK_IN_RESP_ON_TOP": 1,
		"BLOCK_NOT_FOUND":      2,
	}
)

func (x ReqBlkResult) Enum() *ReqBlkResult {
	p := new(ReqBlkResult)
	*p = x
	return p
}

func (x ReqBlkResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReqBlkResult) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[12].Descriptor()
}

func (ReqBlkResult) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[12]
}

func (x ReqBlkResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReqBlkResult.Descriptor instead.
func (ReqBlkResult) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{12}
}

//BROADCAST_MSG
type BroadcastType int32

const (
	BroadcastType_GENERAL BroadcastType = 0 // general broadcast
)

// Enum value maps for BroadcastType.
var (
	BroadcastType_name = map[int32]string{
		0: "GENERAL",
	}
	BroadcastType_value = map[string]int32{
		"GENERAL": 0,
	}
)

func (x BroadcastType) Enum() *BroadcastType {
	p := new(BroadcastType)
	*p = x
	return p
}

func (x BroadcastType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BroadcastType) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[13].Descriptor()
}

func (BroadcastType) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[13]
}

func (x BroadcastType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BroadcastType.Descriptor instead.
func (BroadcastType) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{13}
}

type GroupEncryptType int32

const (
	GroupEncryptType_PUBLIC  GroupEncryptType = 0
	GroupEncryptType_PRIVATE GroupEncryptType = 1
)

// Enum value maps for GroupEncryptType.
var (
	GroupEncryptType_name = map[int32]string{
		0: "PUBLIC",
		1: "PRIVATE",
	}
	GroupEncryptType_value = map[string]int32{
		"PUBLIC":  0,
		"PRIVATE": 1,
	}
)

func (x GroupEncryptType) Enum() *GroupEncryptType {
	p := new(GroupEncryptType)
	*p = x
	return p
}

func (x GroupEncryptType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupEncryptType) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[14].Descriptor()
}

func (GroupEncryptType) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[14]
}

func (x GroupEncryptType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupEncryptType.Descriptor instead.
func (GroupEncryptType) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{14}
}

type GroupConsenseType int32

const (
	GroupConsenseType_POA GroupConsenseType = 0
	GroupConsenseType_POS GroupConsenseType = 1
)

// Enum value maps for GroupConsenseType.
var (
	GroupConsenseType_name = map[int32]string{
		0: "POA",
		1: "POS",
	}
	GroupConsenseType_value = map[string]int32{
		"POA": 0,
		"POS": 1,
	}
)

func (x GroupConsenseType) Enum() *GroupConsenseType {
	p := new(GroupConsenseType)
	*p = x
	return p
}

func (x GroupConsenseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupConsenseType) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[15].Descriptor()
}

func (GroupConsenseType) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[15]
}

func (x GroupConsenseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupConsenseType.Descriptor instead.
func (GroupConsenseType) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{15}
}

//GroupItem Rum_lite
type GroupSyncType int32

const (
	GroupSyncType_PUBLIC_SYNC  GroupSyncType = 0
	GroupSyncType_PRIVATE_SYNC GroupSyncType = 1
)

// Enum value maps for GroupSyncType.
var (
	GroupSyncType_name = map[int32]string{
		0: "PUBLIC_SYNC",
		1: "PRIVATE_SYNC",
	}
	GroupSyncType_value = map[string]int32{
		"PUBLIC_SYNC":  0,
		"PRIVATE_SYNC": 1,
	}
)

func (x GroupSyncType) Enum() *GroupSyncType {
	p := new(GroupSyncType)
	*p = x
	return p
}

func (x GroupSyncType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupSyncType) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[16].Descriptor()
}

func (GroupSyncType) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[16]
}

func (x GroupSyncType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupSyncType.Descriptor instead.
func (GroupSyncType) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{16}
}

type GroupCtnType int32

const (
	GroupCtnType_BLOB    GroupCtnType = 0
	GroupCtnType_SERVICE GroupCtnType = 1
)

// Enum value maps for GroupCtnType.
var (
	GroupCtnType_name = map[int32]string{
		0: "BLOB",
		1: "SERVICE",
	}
	GroupCtnType_value = map[string]int32{
		"BLOB":    0,
		"SERVICE": 1,
	}
)

func (x GroupCtnType) Enum() *GroupCtnType {
	p := new(GroupCtnType)
	*p = x
	return p
}

func (x GroupCtnType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupCtnType) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[17].Descriptor()
}

func (GroupCtnType) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[17]
}

func (x GroupCtnType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupCtnType.Descriptor instead.
func (GroupCtnType) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{17}
}

type HBMsgPayloadType int32

const (
	HBMsgPayloadType_RBC HBMsgPayloadType = 0
	HBMsgPayloadType_BBA HBMsgPayloadType = 1
)

// Enum value maps for HBMsgPayloadType.
var (
	HBMsgPayloadType_name = map[int32]string{
		0: "RBC",
		1: "BBA",
	}
	HBMsgPayloadType_value = map[string]int32{
		"RBC": 0,
		"BBA": 1,
	}
)

func (x HBMsgPayloadType) Enum() *HBMsgPayloadType {
	p := new(HBMsgPayloadType)
	*p = x
	return p
}

func (x HBMsgPayloadType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HBMsgPayloadType) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[18].Descriptor()
}

func (HBMsgPayloadType) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[18]
}

func (x HBMsgPayloadType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HBMsgPayloadType.Descriptor instead.
func (HBMsgPayloadType) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{18}
}

type RBCMsgType int32

const (
	RBCMsgType_INIT_PROPOSE RBCMsgType = 0
	RBCMsgType_ECHO         RBCMsgType = 1
	RBCMsgType_READY        RBCMsgType = 2
)

// Enum value maps for RBCMsgType.
var (
	RBCMsgType_name = map[int32]string{
		0: "INIT_PROPOSE",
		1: "ECHO",
		2: "READY",
	}
	RBCMsgType_value = map[string]int32{
		"INIT_PROPOSE": 0,
		"ECHO":         1,
		"READY":        2,
	}
)

func (x RBCMsgType) Enum() *RBCMsgType {
	p := new(RBCMsgType)
	*p = x
	return p
}

func (x RBCMsgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RBCMsgType) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[19].Descriptor()
}

func (RBCMsgType) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[19]
}

func (x RBCMsgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RBCMsgType.Descriptor instead.
func (RBCMsgType) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{19}
}

type BBAMsgType int32

const (
	BBAMsgType_BVAL BBAMsgType = 0
	BBAMsgType_AUX  BBAMsgType = 1
)

// Enum value maps for BBAMsgType.
var (
	BBAMsgType_name = map[int32]string{
		0: "BVAL",
		1: "AUX",
	}
	BBAMsgType_value = map[string]int32{
		"BVAL": 0,
		"AUX":  1,
	}
)

func (x BBAMsgType) Enum() *BBAMsgType {
	p := new(BBAMsgType)
	*p = x
	return p
}

func (x BBAMsgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BBAMsgType) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[20].Descriptor()
}

func (BBAMsgType) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[20]
}

func (x BBAMsgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BBAMsgType.Descriptor instead.
func (BBAMsgType) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{20}
}

type Package struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type PackageType `protobuf:"varint,1,opt,name=type,proto3,enum=quorum.pb.PackageType" json:"type,omitempty"`
	Data []byte      `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *Package) Reset() {
	*x = Package{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Package) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package) ProtoMessage() {}

func (x *Package) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package.ProtoReflect.Descriptor instead.
func (*Package) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{0}
}

func (x *Package) GetType() PackageType {
	if x != nil {
		return x.Type
	}
	return PackageType_TRX
}

func (x *Package) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type PostItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrxId        string `protobuf:"bytes,1,opt,name=TrxId,proto3" json:"TrxId,omitempty"`
	SenderPubkey string `protobuf:"bytes,2,opt,name=SenderPubkey,proto3" json:"SenderPubkey,omitempty"`
	Content      []byte `protobuf:"bytes,3,opt,name=Content,proto3" json:"Content,omitempty"`
	TimeStamp    int64  `protobuf:"varint,4,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty,string"`
}

func (x *PostItem) Reset() {
	*x = PostItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostItem) ProtoMessage() {}

func (x *PostItem) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostItem.ProtoReflect.Descriptor instead.
func (*PostItem) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{1}
}

func (x *PostItem) GetTrxId() string {
	if x != nil {
		return x.TrxId
	}
	return ""
}

func (x *PostItem) GetSenderPubkey() string {
	if x != nil {
		return x.SenderPubkey
	}
	return ""
}

func (x *PostItem) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *PostItem) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

type ProducerItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId        string `protobuf:"bytes,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	ProducerPubkey string `protobuf:"bytes,2,opt,name=ProducerPubkey,proto3" json:"ProducerPubkey,omitempty"`
	ProofTrxId     string `protobuf:"bytes,3,opt,name=ProofTrxId,proto3" json:"ProofTrxId,omitempty"`
	BlkCnt         int64  `protobuf:"varint,4,opt,name=BlkCnt,proto3" json:"BlkCnt,omitempty"`
	Memo           string `protobuf:"bytes,5,opt,name=Memo,proto3" json:"Memo,omitempty"`
}

func (x *ProducerItem) Reset() {
	*x = ProducerItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProducerItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProducerItem) ProtoMessage() {}

func (x *ProducerItem) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProducerItem.ProtoReflect.Descriptor instead.
func (*ProducerItem) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{2}
}

func (x *ProducerItem) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *ProducerItem) GetProducerPubkey() string {
	if x != nil {
		return x.ProducerPubkey
	}
	return ""
}

func (x *ProducerItem) GetProofTrxId() string {
	if x != nil {
		return x.ProofTrxId
	}
	return ""
}

func (x *ProducerItem) GetBlkCnt() int64 {
	if x != nil {
		return x.BlkCnt
	}
	return 0
}

func (x *ProducerItem) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

type UpdGroupUserItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId    string     `protobuf:"bytes,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	UserPubkey string     `protobuf:"bytes,2,opt,name=UserPubkey,proto3" json:"UserPubkey,omitempty"`
	Action     ActionType `protobuf:"varint,3,opt,name=Action,proto3,enum=quorum.pb.ActionType" json:"Action,omitempty"`
	Memo       string     `protobuf:"bytes,4,opt,name=Memo,proto3" json:"Memo,omitempty"`
}

func (x *UpdGroupUserItem) Reset() {
	*x = UpdGroupUserItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdGroupUserItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdGroupUserItem) ProtoMessage() {}

func (x *UpdGroupUserItem) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdGroupUserItem.ProtoReflect.Descriptor instead.
func (*UpdGroupUserItem) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{3}
}

func (x *UpdGroupUserItem) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *UpdGroupUserItem) GetUserPubkey() string {
	if x != nil {
		return x.UserPubkey
	}
	return ""
}

func (x *UpdGroupUserItem) GetAction() ActionType {
	if x != nil {
		return x.Action
	}
	return ActionType_ADD
}

func (x *UpdGroupUserItem) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

type UserItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId       string `protobuf:"bytes,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	UserPubkey    string `protobuf:"bytes,2,opt,name=UserPubkey,proto3" json:"UserPubkey,omitempty"`
	EncryptPubkey string `protobuf:"bytes,3,opt,name=EncryptPubkey,proto3" json:"EncryptPubkey,omitempty"`
	ProofTrxId    string `protobuf:"bytes,4,opt,name=ProofTrxId,proto3" json:"ProofTrxId,omitempty"`
	TxCnt         int64  `protobuf:"varint,5,opt,name=TxCnt,proto3" json:"TxCnt,omitempty"` //how many trx send by this user
	Memo          string `protobuf:"bytes,6,opt,name=Memo,proto3" json:"Memo,omitempty"`
}

func (x *UserItem) Reset() {
	*x = UserItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserItem) ProtoMessage() {}

func (x *UserItem) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserItem.ProtoReflect.Descriptor instead.
func (*UserItem) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{4}
}

func (x *UserItem) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *UserItem) GetUserPubkey() string {
	if x != nil {
		return x.UserPubkey
	}
	return ""
}

func (x *UserItem) GetEncryptPubkey() string {
	if x != nil {
		return x.EncryptPubkey
	}
	return ""
}

func (x *UserItem) GetProofTrxId() string {
	if x != nil {
		return x.ProofTrxId
	}
	return ""
}

func (x *UserItem) GetTxCnt() int64 {
	if x != nil {
		return x.TxCnt
	}
	return 0
}

func (x *UserItem) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

type ChainConfigItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId        string          `protobuf:"bytes,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	Type           ChainConfigType `protobuf:"varint,2,opt,name=Type,proto3,enum=quorum.pb.ChainConfigType" json:"Type,omitempty"`
	Data           []byte          `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
	OwnerPubkey    string          `protobuf:"bytes,4,opt,name=OwnerPubkey,proto3" json:"OwnerPubkey,omitempty"`
	OwnerSignature string          `protobuf:"bytes,5,opt,name=OwnerSignature,proto3" json:"OwnerSignature,omitempty"`
	TimeStamp      int64           `protobuf:"varint,6,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty,string"`
	Memo           string          `protobuf:"bytes,7,opt,name=Memo,proto3" json:"Memo,omitempty"`
}

func (x *ChainConfigItem) Reset() {
	*x = ChainConfigItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainConfigItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainConfigItem) ProtoMessage() {}

func (x *ChainConfigItem) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainConfigItem.ProtoReflect.Descriptor instead.
func (*ChainConfigItem) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{5}
}

func (x *ChainConfigItem) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *ChainConfigItem) GetType() ChainConfigType {
	if x != nil {
		return x.Type
	}
	return ChainConfigType_SET_TRX_AUTH_MODE
}

func (x *ChainConfigItem) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ChainConfigItem) GetOwnerPubkey() string {
	if x != nil {
		return x.OwnerPubkey
	}
	return ""
}

func (x *ChainConfigItem) GetOwnerSignature() string {
	if x != nil {
		return x.OwnerSignature
	}
	return ""
}

func (x *ChainConfigItem) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *ChainConfigItem) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

type ChainSendTrxRuleListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action ActionType `protobuf:"varint,1,opt,name=Action,proto3,enum=quorum.pb.ActionType" json:"Action,omitempty"`
	Pubkey string     `protobuf:"bytes,3,opt,name=Pubkey,proto3" json:"Pubkey,omitempty"`
	Type   []TrxType  `protobuf:"varint,4,rep,packed,name=Type,proto3,enum=quorum.pb.TrxType" json:"Type,omitempty"`
}

func (x *ChainSendTrxRuleListItem) Reset() {
	*x = ChainSendTrxRuleListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainSendTrxRuleListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainSendTrxRuleListItem) ProtoMessage() {}

func (x *ChainSendTrxRuleListItem) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainSendTrxRuleListItem.ProtoReflect.Descriptor instead.
func (*ChainSendTrxRuleListItem) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{6}
}

func (x *ChainSendTrxRuleListItem) GetAction() ActionType {
	if x != nil {
		return x.Action
	}
	return ActionType_ADD
}

func (x *ChainSendTrxRuleListItem) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *ChainSendTrxRuleListItem) GetType() []TrxType {
	if x != nil {
		return x.Type
	}
	return nil
}

type SetTrxAuthModeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type TrxType     `protobuf:"varint,1,opt,name=Type,proto3,enum=quorum.pb.TrxType" json:"Type,omitempty"`
	Mode TrxAuthMode `protobuf:"varint,2,opt,name=Mode,proto3,enum=quorum.pb.TrxAuthMode" json:"Mode,omitempty"`
}

func (x *SetTrxAuthModeItem) Reset() {
	*x = SetTrxAuthModeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTrxAuthModeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTrxAuthModeItem) ProtoMessage() {}

func (x *SetTrxAuthModeItem) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTrxAuthModeItem.ProtoReflect.Descriptor instead.
func (*SetTrxAuthModeItem) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{7}
}

func (x *SetTrxAuthModeItem) GetType() TrxType {
	if x != nil {
		return x.Type
	}
	return TrxType_POST
}

func (x *SetTrxAuthModeItem) GetMode() TrxAuthMode {
	if x != nil {
		return x.Mode
	}
	return TrxAuthMode_FOLLOW_ALW_LIST
}

type AppConfigItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId     string        `protobuf:"bytes,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	Action      ActionType    `protobuf:"varint,2,opt,name=Action,proto3,enum=quorum.pb.ActionType" json:"Action,omitempty"`
	Name        string        `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Type        AppConfigType `protobuf:"varint,4,opt,name=Type,proto3,enum=quorum.pb.AppConfigType" json:"Type,omitempty"`
	Value       string        `protobuf:"bytes,5,opt,name=Value,proto3" json:"Value,omitempty"`
	OwnerPubkey string        `protobuf:"bytes,6,opt,name=OwnerPubkey,proto3" json:"OwnerPubkey,omitempty"`
	OwnerSign   string        `protobuf:"bytes,7,opt,name=OwnerSign,proto3" json:"OwnerSign,omitempty"`
	Memo        string        `protobuf:"bytes,8,opt,name=Memo,proto3" json:"Memo,omitempty"`
	TimeStamp   int64         `protobuf:"varint,9,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty,string"`
}

func (x *AppConfigItem) Reset() {
	*x = AppConfigItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppConfigItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppConfigItem) ProtoMessage() {}

func (x *AppConfigItem) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppConfigItem.ProtoReflect.Descriptor instead.
func (*AppConfigItem) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{8}
}

func (x *AppConfigItem) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *AppConfigItem) GetAction() ActionType {
	if x != nil {
		return x.Action
	}
	return ActionType_ADD
}

func (x *AppConfigItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AppConfigItem) GetType() AppConfigType {
	if x != nil {
		return x.Type
	}
	return AppConfigType_INT
}

func (x *AppConfigItem) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *AppConfigItem) GetOwnerPubkey() string {
	if x != nil {
		return x.OwnerPubkey
	}
	return ""
}

func (x *AppConfigItem) GetOwnerSign() string {
	if x != nil {
		return x.OwnerSign
	}
	return ""
}

func (x *AppConfigItem) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *AppConfigItem) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

type ConsensusInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsensusId   string `protobuf:"bytes,1,opt,name=ConsensusId,proto3" json:"ConsensusId,omitempty"`
	ChainVer      uint64 `protobuf:"varint,2,opt,name=ChainVer,proto3" json:"ChainVer,omitempty"`
	InTrx         string `protobuf:"bytes,3,opt,name=InTrx,proto3" json:"InTrx,omitempty"`
	ForkFromBlock uint64 `protobuf:"varint,4,opt,name=ForkFromBlock,proto3" json:"ForkFromBlock,omitempty"`
}

func (x *ConsensusInfo) Reset() {
	*x = ConsensusInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusInfo) ProtoMessage() {}

func (x *ConsensusInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusInfo.ProtoReflect.Descriptor instead.
func (*ConsensusInfo) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{9}
}

func (x *ConsensusInfo) GetConsensusId() string {
	if x != nil {
		return x.ConsensusId
	}
	return ""
}

func (x *ConsensusInfo) GetChainVer() uint64 {
	if x != nil {
		return x.ChainVer
	}
	return 0
}

func (x *ConsensusInfo) GetInTrx() string {
	if x != nil {
		return x.InTrx
	}
	return ""
}

func (x *ConsensusInfo) GetForkFromBlock() uint64 {
	if x != nil {
		return x.ForkFromBlock
	}
	return 0
}

type ForkItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId        string         `protobuf:"bytes,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	Consensus      *ConsensusInfo `protobuf:"bytes,2,opt,name=Consensus,proto3" json:"Consensus,omitempty"`
	StartFromBlock uint64         `protobuf:"varint,3,opt,name=StartFromBlock,proto3" json:"StartFromBlock,omitempty"`
	StartFromEpoch uint64         `protobuf:"varint,4,opt,name=StartFromEpoch,proto3" json:"StartFromEpoch,omitempty"`
	EpochDuration  uint64         `protobuf:"varint,5,opt,name=EpochDuration,proto3" json:"EpochDuration,omitempty"`
	Producers      []string       `protobuf:"bytes,6,rep,name=producers,proto3" json:"producers,omitempty"`
	Memo           string         `protobuf:"bytes,7,opt,name=Memo,proto3" json:"Memo,omitempty"`
}

func (x *ForkItem) Reset() {
	*x = ForkItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForkItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForkItem) ProtoMessage() {}

func (x *ForkItem) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForkItem.ProtoReflect.Descriptor instead.
func (*ForkItem) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{10}
}

func (x *ForkItem) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *ForkItem) GetConsensus() *ConsensusInfo {
	if x != nil {
		return x.Consensus
	}
	return nil
}

func (x *ForkItem) GetStartFromBlock() uint64 {
	if x != nil {
		return x.StartFromBlock
	}
	return 0
}

func (x *ForkItem) GetStartFromEpoch() uint64 {
	if x != nil {
		return x.StartFromEpoch
	}
	return 0
}

func (x *ForkItem) GetEpochDuration() uint64 {
	if x != nil {
		return x.EpochDuration
	}
	return 0
}

func (x *ForkItem) GetProducers() []string {
	if x != nil {
		return x.Producers
	}
	return nil
}

func (x *ForkItem) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

type Trx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrxId        string         `protobuf:"bytes,1,opt,name=TrxId,proto3" json:"TrxId,omitempty"`
	Type         TrxType        `protobuf:"varint,2,opt,name=Type,proto3,enum=quorum.pb.TrxType" json:"Type,omitempty"`
	GroupId      string         `protobuf:"bytes,3,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	Data         []byte         `protobuf:"bytes,4,opt,name=Data,proto3" json:"Data,omitempty"`
	TimeStamp    int64          `protobuf:"varint,5,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty,string"`
	Version      string         `protobuf:"bytes,6,opt,name=Version,proto3" json:"Version,omitempty"`
	ResendCount  int64          `protobuf:"varint,7,opt,name=ResendCount,proto3" json:"ResendCount,omitempty"`
	Nonce        int64          `protobuf:"varint,8,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	SenderPubkey string         `protobuf:"bytes,9,opt,name=SenderPubkey,proto3" json:"SenderPubkey,omitempty"`
	SenderSign   []byte         `protobuf:"bytes,10,opt,name=SenderSign,proto3" json:"SenderSign,omitempty"`
	StorageType  TrxStroageType `protobuf:"varint,11,opt,name=StorageType,proto3,enum=quorum.pb.TrxStroageType" json:"StorageType,omitempty"`
}

func (x *Trx) Reset() {
	*x = Trx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trx) ProtoMessage() {}

func (x *Trx) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trx.ProtoReflect.Descriptor instead.
func (*Trx) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{11}
}

func (x *Trx) GetTrxId() string {
	if x != nil {
		return x.TrxId
	}
	return ""
}

func (x *Trx) GetType() TrxType {
	if x != nil {
		return x.Type
	}
	return TrxType_POST
}

func (x *Trx) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *Trx) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Trx) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *Trx) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Trx) GetResendCount() int64 {
	if x != nil {
		return x.ResendCount
	}
	return 0
}

func (x *Trx) GetNonce() int64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *Trx) GetSenderPubkey() string {
	if x != nil {
		return x.SenderPubkey
	}
	return ""
}

func (x *Trx) GetSenderSign() []byte {
	if x != nil {
		return x.SenderSign
	}
	return nil
}

func (x *Trx) GetStorageType() TrxStroageType {
	if x != nil {
		return x.StorageType
	}
	return TrxStroageType_CHAIN
}

//BLOCK
type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockId        uint64 `protobuf:"varint,1,opt,name=BlockId,proto3" json:"BlockId,omitempty"`
	GroupId        string `protobuf:"bytes,2,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	PrevHash       []byte `protobuf:"bytes,3,opt,name=PrevHash,proto3" json:"PrevHash,omitempty"`
	Trxs           []*Trx `protobuf:"bytes,4,rep,name=Trxs,proto3" json:"Trxs,omitempty"`
	TimeStamp      int64  `protobuf:"varint,6,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty,string"`
	ProducerPubkey string `protobuf:"bytes,5,opt,name=ProducerPubkey,proto3" json:"ProducerPubkey,omitempty"`
	BlockHash      []byte `protobuf:"bytes,7,opt,name=BlockHash,proto3" json:"BlockHash,omitempty"`
	ProducerSign   []byte `protobuf:"bytes,8,opt,name=ProducerSign,proto3" json:"ProducerSign,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{12}
}

func (x *Block) GetBlockId() uint64 {
	if x != nil {
		return x.BlockId
	}
	return 0
}

func (x *Block) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *Block) GetPrevHash() []byte {
	if x != nil {
		return x.PrevHash
	}
	return nil
}

func (x *Block) GetTrxs() []*Trx {
	if x != nil {
		return x.Trxs
	}
	return nil
}

func (x *Block) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *Block) GetProducerPubkey() string {
	if x != nil {
		return x.ProducerPubkey
	}
	return ""
}

func (x *Block) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *Block) GetProducerSign() []byte {
	if x != nil {
		return x.ProducerSign
	}
	return nil
}

type BftMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type BftMsgType `protobuf:"varint,1,opt,name=Type,proto3,enum=quorum.pb.BftMsgType" json:"Type,omitempty"`
	Data []byte     `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *BftMsg) Reset() {
	*x = BftMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BftMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BftMsg) ProtoMessage() {}

func (x *BftMsg) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BftMsg.ProtoReflect.Descriptor instead.
func (*BftMsg) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{13}
}

func (x *BftMsg) GetType() BftMsgType {
	if x != nil {
		return x.Type
	}
	return BftMsgType_HB_BFT
}

func (x *BftMsg) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type CCMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type CCMsgType `protobuf:"varint,1,opt,name=Type,proto3,enum=quorum.pb.CCMsgType" json:"Type,omitempty"`
	Data []byte    `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *CCMsg) Reset() {
	*x = CCMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCMsg) ProtoMessage() {}

func (x *CCMsg) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCMsg.ProtoReflect.Descriptor instead.
func (*CCMsg) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{14}
}

func (x *CCMsg) GetType() CCMsgType {
	if x != nil {
		return x.Type
	}
	return CCMsgType_CHANGE_CONSENSUS_REQ
}

func (x *CCMsg) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ChangeConsensusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqId                string   `protobuf:"bytes,1,opt,name=ReqId,proto3" json:"ReqId,omitempty"`
	GroupId              string   `protobuf:"bytes,2,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	Nonce                uint64   `protobuf:"varint,3,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	ProducerPubkeyList   []string `protobuf:"bytes,4,rep,name=ProducerPubkeyList,proto3" json:"ProducerPubkeyList,omitempty"`
	AgreementTickLenInMs uint64   `protobuf:"varint,5,opt,name=AgreementTickLenInMs,proto3" json:"AgreementTickLenInMs,omitempty"`
	AgreementTickCount   uint64   `protobuf:"varint,6,opt,name=AgreementTickCount,proto3" json:"AgreementTickCount,omitempty"`
	FromBlock            uint64   `protobuf:"varint,7,opt,name=FromBlock,proto3" json:"FromBlock,omitempty"`
	FromEpoch            uint64   `protobuf:"varint,8,opt,name=FromEpoch,proto3" json:"FromEpoch,omitempty"`
	EpochDuration        uint64   `protobuf:"varint,9,opt,name=EpochDuration,proto3" json:"EpochDuration,omitempty"`
	Contract             string   `protobuf:"bytes,10,opt,name=Contract,proto3" json:"Contract,omitempty"`
	SenderPubkey         string   `protobuf:"bytes,12,opt,name=SenderPubkey,proto3" json:"SenderPubkey,omitempty"`
	Memo                 string   `protobuf:"bytes,13,opt,name=Memo,proto3" json:"Memo,omitempty"`
	MsgHash              []byte   `protobuf:"bytes,14,opt,name=MsgHash,proto3" json:"MsgHash,omitempty"`
	SenderSign           []byte   `protobuf:"bytes,15,opt,name=SenderSign,proto3" json:"SenderSign,omitempty"`
}

func (x *ChangeConsensusReq) Reset() {
	*x = ChangeConsensusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeConsensusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeConsensusReq) ProtoMessage() {}

func (x *ChangeConsensusReq) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeConsensusReq.ProtoReflect.Descriptor instead.
func (*ChangeConsensusReq) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{15}
}

func (x *ChangeConsensusReq) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *ChangeConsensusReq) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *ChangeConsensusReq) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *ChangeConsensusReq) GetProducerPubkeyList() []string {
	if x != nil {
		return x.ProducerPubkeyList
	}
	return nil
}

func (x *ChangeConsensusReq) GetAgreementTickLenInMs() uint64 {
	if x != nil {
		return x.AgreementTickLenInMs
	}
	return 0
}

func (x *ChangeConsensusReq) GetAgreementTickCount() uint64 {
	if x != nil {
		return x.AgreementTickCount
	}
	return 0
}

func (x *ChangeConsensusReq) GetFromBlock() uint64 {
	if x != nil {
		return x.FromBlock
	}
	return 0
}

func (x *ChangeConsensusReq) GetFromEpoch() uint64 {
	if x != nil {
		return x.FromEpoch
	}
	return 0
}

func (x *ChangeConsensusReq) GetEpochDuration() uint64 {
	if x != nil {
		return x.EpochDuration
	}
	return 0
}

func (x *ChangeConsensusReq) GetContract() string {
	if x != nil {
		return x.Contract
	}
	return ""
}

func (x *ChangeConsensusReq) GetSenderPubkey() string {
	if x != nil {
		return x.SenderPubkey
	}
	return ""
}

func (x *ChangeConsensusReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *ChangeConsensusReq) GetMsgHash() []byte {
	if x != nil {
		return x.MsgHash
	}
	return nil
}

func (x *ChangeConsensusReq) GetSenderSign() []byte {
	if x != nil {
		return x.SenderSign
	}
	return nil
}

type ChangeConsensusReqMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Req                        *ChangeConsensusReq `protobuf:"bytes,1,opt,name=Req,proto3" json:"Req,omitempty"`
	ReqChangeConsensusRetryCnt uint64              `protobuf:"varint,2,opt,name=ReqChangeConsensusRetryCnt,proto3" json:"ReqChangeConsensusRetryCnt,omitempty"`
}

func (x *ChangeConsensusReqMsg) Reset() {
	*x = ChangeConsensusReqMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeConsensusReqMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeConsensusReqMsg) ProtoMessage() {}

func (x *ChangeConsensusReqMsg) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeConsensusReqMsg.ProtoReflect.Descriptor instead.
func (*ChangeConsensusReqMsg) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{16}
}

func (x *ChangeConsensusReqMsg) GetReq() *ChangeConsensusReq {
	if x != nil {
		return x.Req
	}
	return nil
}

func (x *ChangeConsensusReqMsg) GetReqChangeConsensusRetryCnt() uint64 {
	if x != nil {
		return x.ReqChangeConsensusRetryCnt
	}
	return 0
}

type ChangeConsensusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RespId       string              `protobuf:"bytes,1,opt,name=RespId,proto3" json:"RespId,omitempty"`
	GroupId      string              `protobuf:"bytes,2,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	Req          *ChangeConsensusReq `protobuf:"bytes,3,opt,name=Req,proto3" json:"Req,omitempty"`
	SenderPubkey string              `protobuf:"bytes,4,opt,name=SenderPubkey,proto3" json:"SenderPubkey,omitempty"`
	Memo         string              `protobuf:"bytes,5,opt,name=Memo,proto3" json:"Memo,omitempty"`
	MsgHash      []byte              `protobuf:"bytes,6,opt,name=MsgHash,proto3" json:"MsgHash,omitempty"`
	SenderSign   []byte              `protobuf:"bytes,7,opt,name=SenderSign,proto3" json:"SenderSign,omitempty"`
}

func (x *ChangeConsensusResp) Reset() {
	*x = ChangeConsensusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeConsensusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeConsensusResp) ProtoMessage() {}

func (x *ChangeConsensusResp) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeConsensusResp.ProtoReflect.Descriptor instead.
func (*ChangeConsensusResp) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{17}
}

func (x *ChangeConsensusResp) GetRespId() string {
	if x != nil {
		return x.RespId
	}
	return ""
}

func (x *ChangeConsensusResp) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *ChangeConsensusResp) GetReq() *ChangeConsensusReq {
	if x != nil {
		return x.Req
	}
	return nil
}

func (x *ChangeConsensusResp) GetSenderPubkey() string {
	if x != nil {
		return x.SenderPubkey
	}
	return ""
}

func (x *ChangeConsensusResp) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *ChangeConsensusResp) GetMsgHash() []byte {
	if x != nil {
		return x.MsgHash
	}
	return nil
}

func (x *ChangeConsensusResp) GetSenderSign() []byte {
	if x != nil {
		return x.SenderSign
	}
	return nil
}

type ChangeConsensusRespMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resp                       *ChangeConsensusResp `protobuf:"bytes,1,opt,name=Resp,proto3" json:"Resp,omitempty"`
	ReqChangeConsensusRetryCnt uint64               `protobuf:"varint,2,opt,name=ReqChangeConsensusRetryCnt,proto3" json:"ReqChangeConsensusRetryCnt,omitempty"`
}

func (x *ChangeConsensusRespMsg) Reset() {
	*x = ChangeConsensusRespMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeConsensusRespMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeConsensusRespMsg) ProtoMessage() {}

func (x *ChangeConsensusRespMsg) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeConsensusRespMsg.ProtoReflect.Descriptor instead.
func (*ChangeConsensusRespMsg) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{18}
}

func (x *ChangeConsensusRespMsg) GetResp() *ChangeConsensusResp {
	if x != nil {
		return x.Resp
	}
	return nil
}

func (x *ChangeConsensusRespMsg) GetReqChangeConsensusRetryCnt() uint64 {
	if x != nil {
		return x.ReqChangeConsensusRetryCnt
	}
	return 0
}

type ChangeConsensusProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqChangeConsensusRetryCnt uint64               `protobuf:"varint,1,opt,name=ReqChangeConsensusRetryCnt,proto3" json:"ReqChangeConsensusRetryCnt,omitempty"`
	Req                        *ChangeConsensusReq  `protobuf:"bytes,2,opt,name=Req,proto3" json:"Req,omitempty"`
	Resp                       *ChangeConsensusResp `protobuf:"bytes,3,opt,name=Resp,proto3" json:"Resp,omitempty"`
}

func (x *ChangeConsensusProof) Reset() {
	*x = ChangeConsensusProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeConsensusProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeConsensusProof) ProtoMessage() {}

func (x *ChangeConsensusProof) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeConsensusProof.ProtoReflect.Descriptor instead.
func (*ChangeConsensusProof) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{19}
}

func (x *ChangeConsensusProof) GetReqChangeConsensusRetryCnt() uint64 {
	if x != nil {
		return x.ReqChangeConsensusRetryCnt
	}
	return 0
}

func (x *ChangeConsensusProof) GetReq() *ChangeConsensusReq {
	if x != nil {
		return x.Req
	}
	return nil
}

func (x *ChangeConsensusProof) GetResp() *ChangeConsensusResp {
	if x != nil {
		return x.Resp
	}
	return nil
}

type ChangeConsensusResultBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Req    *ChangeConsensusReq    `protobuf:"bytes,1,opt,name=Req,proto3" json:"Req,omitempty"`
	Resps  []*ChangeConsensusResp `protobuf:"bytes,2,rep,name=Resps,proto3" json:"Resps,omitempty"`
	Result ChangeConsensusResult  `protobuf:"varint,3,opt,name=Result,proto3,enum=quorum.pb.ChangeConsensusResult" json:"Result,omitempty"`
}

func (x *ChangeConsensusResultBundle) Reset() {
	*x = ChangeConsensusResultBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeConsensusResultBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeConsensusResultBundle) ProtoMessage() {}

func (x *ChangeConsensusResultBundle) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeConsensusResultBundle.ProtoReflect.Descriptor instead.
func (*ChangeConsensusResultBundle) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{20}
}

func (x *ChangeConsensusResultBundle) GetReq() *ChangeConsensusReq {
	if x != nil {
		return x.Req
	}
	return nil
}

func (x *ChangeConsensusResultBundle) GetResps() []*ChangeConsensusResp {
	if x != nil {
		return x.Resps
	}
	return nil
}

func (x *ChangeConsensusResultBundle) GetResult() ChangeConsensusResult {
	if x != nil {
		return x.Result
	}
	return ChangeConsensusResult_SUCCESS
}

type SyncMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId string      `protobuf:"bytes,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	Type    SyncMsgType `protobuf:"varint,2,opt,name=Type,proto3,enum=quorum.pb.SyncMsgType" json:"Type,omitempty"`
	Data    []byte      `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *SyncMsg) Reset() {
	*x = SyncMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncMsg) ProtoMessage() {}

func (x *SyncMsg) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncMsg.ProtoReflect.Descriptor instead.
func (*SyncMsg) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{21}
}

func (x *SyncMsg) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *SyncMsg) GetType() SyncMsgType {
	if x != nil {
		return x.Type
	}
	return SyncMsgType_REQ_BLOCK
}

func (x *SyncMsg) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ReqBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId       string `protobuf:"bytes,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`              //group id
	FromBlock     uint64 `protobuf:"varint,2,opt,name=FromBlock,proto3" json:"FromBlock,omitempty"`         //from which block
	BlksRequested int32  `protobuf:"varint,3,opt,name=BlksRequested,proto3" json:"BlksRequested,omitempty"` //how many blocks requested, "-1" means many as possible
	ReqPubkey     string `protobuf:"bytes,4,opt,name=ReqPubkey,proto3" json:"ReqPubkey,omitempty"`          //requester pubkey
	Hash          []byte `protobuf:"bytes,5,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Sign          []byte `protobuf:"bytes,6,opt,name=Sign,proto3" json:"Sign,omitempty"`
}

func (x *ReqBlock) Reset() {
	*x = ReqBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBlock) ProtoMessage() {}

func (x *ReqBlock) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBlock.ProtoReflect.Descriptor instead.
func (*ReqBlock) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{22}
}

func (x *ReqBlock) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *ReqBlock) GetFromBlock() uint64 {
	if x != nil {
		return x.FromBlock
	}
	return 0
}

func (x *ReqBlock) GetBlksRequested() int32 {
	if x != nil {
		return x.BlksRequested
	}
	return 0
}

func (x *ReqBlock) GetReqPubkey() string {
	if x != nil {
		return x.ReqPubkey
	}
	return ""
}

func (x *ReqBlock) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *ReqBlock) GetSign() []byte {
	if x != nil {
		return x.Sign
	}
	return nil
}

type ReqBlockResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId         string        `protobuf:"bytes,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	RequesterPubkey string        `protobuf:"bytes,2,opt,name=RequesterPubkey,proto3" json:"RequesterPubkey,omitempty"`
	ProviderPubkey  string        `protobuf:"bytes,3,opt,name=ProviderPubkey,proto3" json:"ProviderPubkey,omitempty"`
	Result          ReqBlkResult  `protobuf:"varint,4,opt,name=Result,proto3,enum=quorum.pb.ReqBlkResult" json:"Result,omitempty"`
	FromBlock       uint64        `protobuf:"varint,5,opt,name=FromBlock,proto3" json:"FromBlock,omitempty"`
	BlksRequested   int32         `protobuf:"varint,6,opt,name=BlksRequested,proto3" json:"BlksRequested,omitempty"`
	BlksProvided    int32         `protobuf:"varint,7,opt,name=BlksProvided,proto3" json:"BlksProvided,omitempty"`
	Blocks          *BlocksBundle `protobuf:"bytes,8,opt,name=Blocks,proto3" json:"Blocks,omitempty"`
	Hash            []byte        `protobuf:"bytes,9,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Sign            []byte        `protobuf:"bytes,10,opt,name=Sign,proto3" json:"Sign,omitempty"`
}

func (x *ReqBlockResp) Reset() {
	*x = ReqBlockResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBlockResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBlockResp) ProtoMessage() {}

func (x *ReqBlockResp) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBlockResp.ProtoReflect.Descriptor instead.
func (*ReqBlockResp) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{23}
}

func (x *ReqBlockResp) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *ReqBlockResp) GetRequesterPubkey() string {
	if x != nil {
		return x.RequesterPubkey
	}
	return ""
}

func (x *ReqBlockResp) GetProviderPubkey() string {
	if x != nil {
		return x.ProviderPubkey
	}
	return ""
}

func (x *ReqBlockResp) GetResult() ReqBlkResult {
	if x != nil {
		return x.Result
	}
	return ReqBlkResult_BLOCK_IN_RESP
}

func (x *ReqBlockResp) GetFromBlock() uint64 {
	if x != nil {
		return x.FromBlock
	}
	return 0
}

func (x *ReqBlockResp) GetBlksRequested() int32 {
	if x != nil {
		return x.BlksRequested
	}
	return 0
}

func (x *ReqBlockResp) GetBlksProvided() int32 {
	if x != nil {
		return x.BlksProvided
	}
	return 0
}

func (x *ReqBlockResp) GetBlocks() *BlocksBundle {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *ReqBlockResp) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *ReqBlockResp) GetSign() []byte {
	if x != nil {
		return x.Sign
	}
	return nil
}

type BlocksBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blocks []*Block `protobuf:"bytes,1,rep,name=Blocks,proto3" json:"Blocks,omitempty"`
}

func (x *BlocksBundle) Reset() {
	*x = BlocksBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlocksBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlocksBundle) ProtoMessage() {}

func (x *BlocksBundle) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlocksBundle.ProtoReflect.Descriptor instead.
func (*BlocksBundle) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{24}
}

func (x *BlocksBundle) GetBlocks() []*Block {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type BroadcastMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type BroadcastType `protobuf:"varint,1,opt,name=Type,proto3,enum=quorum.pb.BroadcastType" json:"Type,omitempty"`
	Data []byte        `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *BroadcastMsg) Reset() {
	*x = BroadcastMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastMsg) ProtoMessage() {}

func (x *BroadcastMsg) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastMsg.ProtoReflect.Descriptor instead.
func (*BroadcastMsg) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{25}
}

func (x *BroadcastMsg) GetType() BroadcastType {
	if x != nil {
		return x.Type
	}
	return BroadcastType_GENERAL
}

func (x *BroadcastMsg) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type GroupItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId           string            `protobuf:"bytes,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	GroupName         string            `protobuf:"bytes,2,opt,name=GroupName,proto3" json:"GroupName,omitempty"`
	OwnerPubKey       string            `protobuf:"bytes,3,opt,name=OwnerPubKey,proto3" json:"OwnerPubKey,omitempty"`
	UserSignPubkey    string            `protobuf:"bytes,4,opt,name=UserSignPubkey,proto3" json:"UserSignPubkey,omitempty"`
	UserEncryptPubkey string            `protobuf:"bytes,5,opt,name=UserEncryptPubkey,proto3" json:"UserEncryptPubkey,omitempty"`
	LastUpdate        int64             `protobuf:"varint,6,opt,name=LastUpdate,proto3" json:"LastUpdate,omitempty"`
	GenesisBlock      *Block            `protobuf:"bytes,7,opt,name=GenesisBlock,proto3" json:"GenesisBlock,omitempty"`
	EncryptType       GroupEncryptType  `protobuf:"varint,8,opt,name=EncryptType,proto3,enum=quorum.pb.GroupEncryptType" json:"EncryptType,omitempty"`
	ConsenseType      GroupConsenseType `protobuf:"varint,9,opt,name=ConsenseType,proto3,enum=quorum.pb.GroupConsenseType" json:"ConsenseType,omitempty"`
	CipherKey         string            `protobuf:"bytes,10,opt,name=CipherKey,proto3" json:"CipherKey,omitempty"`
	AppKey            string            `protobuf:"bytes,11,opt,name=AppKey,proto3" json:"AppKey,omitempty"`
}

func (x *GroupItem) Reset() {
	*x = GroupItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupItem) ProtoMessage() {}

func (x *GroupItem) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupItem.ProtoReflect.Descriptor instead.
func (*GroupItem) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{26}
}

func (x *GroupItem) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GroupItem) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *GroupItem) GetOwnerPubKey() string {
	if x != nil {
		return x.OwnerPubKey
	}
	return ""
}

func (x *GroupItem) GetUserSignPubkey() string {
	if x != nil {
		return x.UserSignPubkey
	}
	return ""
}

func (x *GroupItem) GetUserEncryptPubkey() string {
	if x != nil {
		return x.UserEncryptPubkey
	}
	return ""
}

func (x *GroupItem) GetLastUpdate() int64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

func (x *GroupItem) GetGenesisBlock() *Block {
	if x != nil {
		return x.GenesisBlock
	}
	return nil
}

func (x *GroupItem) GetEncryptType() GroupEncryptType {
	if x != nil {
		return x.EncryptType
	}
	return GroupEncryptType_PUBLIC
}

func (x *GroupItem) GetConsenseType() GroupConsenseType {
	if x != nil {
		return x.ConsenseType
	}
	return GroupConsenseType_POA
}

func (x *GroupItem) GetCipherKey() string {
	if x != nil {
		return x.CipherKey
	}
	return ""
}

func (x *GroupItem) GetAppKey() string {
	if x != nil {
		return x.AppKey
	}
	return ""
}

type GroupSeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GenesisBlock   *Block `protobuf:"bytes,1,opt,name=GenesisBlock,proto3" json:"GenesisBlock,omitempty"`
	GroupId        string `protobuf:"bytes,2,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	GroupName      string `protobuf:"bytes,3,opt,name=GroupName,proto3" json:"GroupName,omitempty"`
	OwnerPubkey    string `protobuf:"bytes,4,opt,name=OwnerPubkey,proto3" json:"OwnerPubkey,omitempty"`
	ConsensusType  string `protobuf:"bytes,5,opt,name=ConsensusType,proto3" json:"ConsensusType,omitempty"`
	EncryptionType string `protobuf:"bytes,6,opt,name=EncryptionType,proto3" json:"EncryptionType,omitempty"`
	CipherKey      string `protobuf:"bytes,7,opt,name=CipherKey,proto3" json:"CipherKey,omitempty"`
	AppKey         string `protobuf:"bytes,8,opt,name=AppKey,proto3" json:"AppKey,omitempty"`
	Signature      string `protobuf:"bytes,9,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (x *GroupSeed) Reset() {
	*x = GroupSeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupSeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupSeed) ProtoMessage() {}

func (x *GroupSeed) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupSeed.ProtoReflect.Descriptor instead.
func (*GroupSeed) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{27}
}

func (x *GroupSeed) GetGenesisBlock() *Block {
	if x != nil {
		return x.GenesisBlock
	}
	return nil
}

func (x *GroupSeed) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GroupSeed) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *GroupSeed) GetOwnerPubkey() string {
	if x != nil {
		return x.OwnerPubkey
	}
	return ""
}

func (x *GroupSeed) GetConsensusType() string {
	if x != nil {
		return x.ConsensusType
	}
	return ""
}

func (x *GroupSeed) GetEncryptionType() string {
	if x != nil {
		return x.EncryptionType
	}
	return ""
}

func (x *GroupSeed) GetCipherKey() string {
	if x != nil {
		return x.CipherKey
	}
	return ""
}

func (x *GroupSeed) GetAppKey() string {
	if x != nil {
		return x.AppKey
	}
	return ""
}

func (x *GroupSeed) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type NodeSDKGroupItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group        *GroupItem `protobuf:"bytes,1,opt,name=Group,proto3" json:"Group,omitempty"`
	EncryptAlias string     `protobuf:"bytes,2,opt,name=EncryptAlias,proto3" json:"EncryptAlias,omitempty"`
	SignAlias    string     `protobuf:"bytes,3,opt,name=SignAlias,proto3" json:"SignAlias,omitempty"`
	ApiUrl       []string   `protobuf:"bytes,4,rep,name=ApiUrl,proto3" json:"ApiUrl,omitempty"`
	GroupSeed    string     `protobuf:"bytes,5,opt,name=GroupSeed,proto3" json:"GroupSeed,omitempty"`
}

func (x *NodeSDKGroupItem) Reset() {
	*x = NodeSDKGroupItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeSDKGroupItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeSDKGroupItem) ProtoMessage() {}

func (x *NodeSDKGroupItem) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeSDKGroupItem.ProtoReflect.Descriptor instead.
func (*NodeSDKGroupItem) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{28}
}

func (x *NodeSDKGroupItem) GetGroup() *GroupItem {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *NodeSDKGroupItem) GetEncryptAlias() string {
	if x != nil {
		return x.EncryptAlias
	}
	return ""
}

func (x *NodeSDKGroupItem) GetSignAlias() string {
	if x != nil {
		return x.SignAlias
	}
	return ""
}

func (x *NodeSDKGroupItem) GetApiUrl() []string {
	if x != nil {
		return x.ApiUrl
	}
	return nil
}

func (x *NodeSDKGroupItem) GetGroupSeed() string {
	if x != nil {
		return x.GroupSeed
	}
	return ""
}

type GroupItemRumLite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId       string                `protobuf:"bytes,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	AppId         string                `protobuf:"bytes,2,opt,name=AppId,proto3" json:"AppId,omitempty"`
	AppName       string                `protobuf:"bytes,3,opt,name=AppName,proto3" json:"AppName,omitempty"`
	OwnerPubKey   string                `protobuf:"bytes,4,opt,name=OwnerPubKey,proto3" json:"OwnerPubKey,omitempty"`
	TrxSignPubkey string                `protobuf:"bytes,5,opt,name=TrxSignPubkey,proto3" json:"TrxSignPubkey,omitempty"`
	CipherKey     string                `protobuf:"bytes,6,opt,name=CipherKey,proto3" json:"CipherKey,omitempty"`
	EncryptTrxCtn bool                  `protobuf:"varint,7,opt,name=EncryptTrxCtn,proto3" json:"EncryptTrxCtn,omitempty"`
	SyncType      GroupSyncType         `protobuf:"varint,8,opt,name=SyncType,proto3,enum=quorum.pb.GroupSyncType" json:"SyncType,omitempty"`
	CtnType       GroupCtnType          `protobuf:"varint,9,opt,name=CtnType,proto3,enum=quorum.pb.GroupCtnType" json:"CtnType,omitempty"`
	ConsenseType  GroupConsenseType     `protobuf:"varint,10,opt,name=ConsenseType,proto3,enum=quorum.pb.GroupConsenseType" json:"ConsenseType,omitempty"`
	ConsensusInfo *ConsensusInfoRumLite `protobuf:"bytes,11,opt,name=ConsensusInfo,proto3" json:"ConsensusInfo,omitempty"`
	GenesisBlock  *BlockRumLite         `protobuf:"bytes,12,opt,name=GenesisBlock,proto3" json:"GenesisBlock,omitempty"`
	LastUpdate    int64                 `protobuf:"varint,13,opt,name=LastUpdate,proto3" json:"LastUpdate,omitempty"`
}

func (x *GroupItemRumLite) Reset() {
	*x = GroupItemRumLite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupItemRumLite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupItemRumLite) ProtoMessage() {}

func (x *GroupItemRumLite) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupItemRumLite.ProtoReflect.Descriptor instead.
func (*GroupItemRumLite) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{29}
}

func (x *GroupItemRumLite) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GroupItemRumLite) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *GroupItemRumLite) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *GroupItemRumLite) GetOwnerPubKey() string {
	if x != nil {
		return x.OwnerPubKey
	}
	return ""
}

func (x *GroupItemRumLite) GetTrxSignPubkey() string {
	if x != nil {
		return x.TrxSignPubkey
	}
	return ""
}

func (x *GroupItemRumLite) GetCipherKey() string {
	if x != nil {
		return x.CipherKey
	}
	return ""
}

func (x *GroupItemRumLite) GetEncryptTrxCtn() bool {
	if x != nil {
		return x.EncryptTrxCtn
	}
	return false
}

func (x *GroupItemRumLite) GetSyncType() GroupSyncType {
	if x != nil {
		return x.SyncType
	}
	return GroupSyncType_PUBLIC_SYNC
}

func (x *GroupItemRumLite) GetCtnType() GroupCtnType {
	if x != nil {
		return x.CtnType
	}
	return GroupCtnType_BLOB
}

func (x *GroupItemRumLite) GetConsenseType() GroupConsenseType {
	if x != nil {
		return x.ConsenseType
	}
	return GroupConsenseType_POA
}

func (x *GroupItemRumLite) GetConsensusInfo() *ConsensusInfoRumLite {
	if x != nil {
		return x.ConsensusInfo
	}
	return nil
}

func (x *GroupItemRumLite) GetGenesisBlock() *BlockRumLite {
	if x != nil {
		return x.GenesisBlock
	}
	return nil
}

func (x *GroupItemRumLite) GetLastUpdate() int64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

type ConsensusInfoRumLite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poa *POAConsensusInfo `protobuf:"bytes,1,opt,name=Poa,proto3" json:"Poa,omitempty"`
}

func (x *ConsensusInfoRumLite) Reset() {
	*x = ConsensusInfoRumLite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusInfoRumLite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusInfoRumLite) ProtoMessage() {}

func (x *ConsensusInfoRumLite) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusInfoRumLite.ProtoReflect.Descriptor instead.
func (*ConsensusInfoRumLite) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{30}
}

func (x *ConsensusInfoRumLite) GetPoa() *POAConsensusInfo {
	if x != nil {
		return x.Poa
	}
	return nil
}

type POAConsensusInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsensusId   string   `protobuf:"bytes,1,opt,name=ConsensusId,proto3" json:"ConsensusId,omitempty"`
	ChainVer      uint64   `protobuf:"varint,2,opt,name=ChainVer,proto3" json:"ChainVer,omitempty"`
	EpochDuration uint64   `protobuf:"varint,3,opt,name=EpochDuration,proto3" json:"EpochDuration,omitempty"`
	Producers     []string `protobuf:"bytes,4,rep,name=Producers,proto3" json:"Producers,omitempty"`
	CurrEpoch     uint64   `protobuf:"varint,5,opt,name=CurrEpoch,proto3" json:"CurrEpoch,omitempty"`
	CurrBlockId   uint64   `protobuf:"varint,6,opt,name=CurrBlockId,proto3" json:"CurrBlockId,omitempty"`
}

func (x *POAConsensusInfo) Reset() {
	*x = POAConsensusInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *POAConsensusInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*POAConsensusInfo) ProtoMessage() {}

func (x *POAConsensusInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use POAConsensusInfo.ProtoReflect.Descriptor instead.
func (*POAConsensusInfo) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{31}
}

func (x *POAConsensusInfo) GetConsensusId() string {
	if x != nil {
		return x.ConsensusId
	}
	return ""
}

func (x *POAConsensusInfo) GetChainVer() uint64 {
	if x != nil {
		return x.ChainVer
	}
	return 0
}

func (x *POAConsensusInfo) GetEpochDuration() uint64 {
	if x != nil {
		return x.EpochDuration
	}
	return 0
}

func (x *POAConsensusInfo) GetProducers() []string {
	if x != nil {
		return x.Producers
	}
	return nil
}

func (x *POAConsensusInfo) GetCurrEpoch() uint64 {
	if x != nil {
		return x.CurrEpoch
	}
	return 0
}

func (x *POAConsensusInfo) GetCurrBlockId() uint64 {
	if x != nil {
		return x.CurrBlockId
	}
	return 0
}

type GroupSeedRumLite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group     *GroupItemRumLite `protobuf:"bytes,1,opt,name=Group,proto3" json:"Group,omitempty"`
	Hash      []byte            `protobuf:"bytes,2,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Signature []byte            `protobuf:"bytes,3,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (x *GroupSeedRumLite) Reset() {
	*x = GroupSeedRumLite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupSeedRumLite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupSeedRumLite) ProtoMessage() {}

func (x *GroupSeedRumLite) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupSeedRumLite.ProtoReflect.Descriptor instead.
func (*GroupSeedRumLite) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{32}
}

func (x *GroupSeedRumLite) GetGroup() *GroupItemRumLite {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *GroupSeedRumLite) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *GroupSeedRumLite) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

//Block Rum_lite
//BLOCK
type BlockRumLite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockId        uint64                `protobuf:"varint,1,opt,name=BlockId,proto3" json:"BlockId,omitempty"`
	GroupId        string                `protobuf:"bytes,2,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	PrevHash       []byte                `protobuf:"bytes,3,opt,name=PrevHash,proto3" json:"PrevHash,omitempty"`
	Trxs           []*Trx                `protobuf:"bytes,4,rep,name=Trxs,proto3" json:"Trxs,omitempty"`
	TimeStamp      int64                 `protobuf:"varint,5,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty,string"`
	ProducerPubkey string                `protobuf:"bytes,6,opt,name=ProducerPubkey,proto3" json:"ProducerPubkey,omitempty"`
	ConsensusInfo  *ConsensusInfoRumLite `protobuf:"bytes,7,opt,name=ConsensusInfo,proto3" json:"ConsensusInfo,omitempty"`
	BlockHash      []byte                `protobuf:"bytes,8,opt,name=BlockHash,proto3" json:"BlockHash,omitempty"`
	ProducerSign   []byte                `protobuf:"bytes,9,opt,name=ProducerSign,proto3" json:"ProducerSign,omitempty"`
}

func (x *BlockRumLite) Reset() {
	*x = BlockRumLite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockRumLite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockRumLite) ProtoMessage() {}

func (x *BlockRumLite) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockRumLite.ProtoReflect.Descriptor instead.
func (*BlockRumLite) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{33}
}

func (x *BlockRumLite) GetBlockId() uint64 {
	if x != nil {
		return x.BlockId
	}
	return 0
}

func (x *BlockRumLite) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *BlockRumLite) GetPrevHash() []byte {
	if x != nil {
		return x.PrevHash
	}
	return nil
}

func (x *BlockRumLite) GetTrxs() []*Trx {
	if x != nil {
		return x.Trxs
	}
	return nil
}

func (x *BlockRumLite) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *BlockRumLite) GetProducerPubkey() string {
	if x != nil {
		return x.ProducerPubkey
	}
	return ""
}

func (x *BlockRumLite) GetConsensusInfo() *ConsensusInfoRumLite {
	if x != nil {
		return x.ConsensusInfo
	}
	return nil
}

func (x *BlockRumLite) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *BlockRumLite) GetProducerSign() []byte {
	if x != nil {
		return x.ProducerSign
	}
	return nil
}

//HB_MSG
//HB protocol is used for both change consensus and bft
type HBTrxBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trxs []*Trx `protobuf:"bytes,1,rep,name=Trxs,proto3" json:"Trxs,omitempty"`
}

func (x *HBTrxBundle) Reset() {
	*x = HBTrxBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HBTrxBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HBTrxBundle) ProtoMessage() {}

func (x *HBTrxBundle) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HBTrxBundle.ProtoReflect.Descriptor instead.
func (*HBTrxBundle) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{34}
}

func (x *HBTrxBundle) GetTrxs() []*Trx {
	if x != nil {
		return x.Trxs
	}
	return nil
}

type HBMsgv1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId       string           `protobuf:"bytes,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	ScopeId     string           `protobuf:"bytes,2,opt,name=ScopeId,proto3" json:"ScopeId,omitempty"` //for bft is consensusid, for change consensus is reqid
	Epoch       uint64           `protobuf:"varint,3,opt,name=Epoch,proto3" json:"Epoch,omitempty"`
	PayloadType HBMsgPayloadType `protobuf:"varint,4,opt,name=PayloadType,proto3,enum=quorum.pb.HBMsgPayloadType" json:"PayloadType,omitempty"` // RBC or BBA
	Payload     []byte           `protobuf:"bytes,5,opt,name=Payload,proto3" json:"Payload,omitempty"`
}

func (x *HBMsgv1) Reset() {
	*x = HBMsgv1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HBMsgv1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HBMsgv1) ProtoMessage() {}

func (x *HBMsgv1) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HBMsgv1.ProtoReflect.Descriptor instead.
func (*HBMsgv1) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{35}
}

func (x *HBMsgv1) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

func (x *HBMsgv1) GetScopeId() string {
	if x != nil {
		return x.ScopeId
	}
	return ""
}

func (x *HBMsgv1) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *HBMsgv1) GetPayloadType() HBMsgPayloadType {
	if x != nil {
		return x.PayloadType
	}
	return HBMsgPayloadType_RBC
}

func (x *HBMsgv1) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// RBC
type RBCMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    RBCMsgType `protobuf:"varint,1,opt,name=Type,proto3,enum=quorum.pb.RBCMsgType" json:"Type,omitempty"` //INIT_PROPOSE / PROOF / READY
	Payload []byte     `protobuf:"bytes,2,opt,name=Payload,proto3" json:"Payload,omitempty"`
}

func (x *RBCMsg) Reset() {
	*x = RBCMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RBCMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RBCMsg) ProtoMessage() {}

func (x *RBCMsg) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RBCMsg.ProtoReflect.Descriptor instead.
func (*RBCMsg) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{36}
}

func (x *RBCMsg) GetType() RBCMsgType {
	if x != nil {
		return x.Type
	}
	return RBCMsgType_INIT_PROPOSE
}

func (x *RBCMsg) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type InitPropose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootHash         []byte   `protobuf:"bytes,1,opt,name=RootHash,proto3" json:"RootHash,omitempty"`
	Proof            [][]byte `protobuf:"bytes,2,rep,name=Proof,proto3" json:"Proof,omitempty"`
	Index            int64    `protobuf:"varint,3,opt,name=Index,proto3" json:"Index,omitempty"`
	Leaves           int64    `protobuf:"varint,4,opt,name=Leaves,proto3" json:"Leaves,omitempty"`
	OriginalDataSize int64    `protobuf:"varint,5,opt,name=OriginalDataSize,proto3" json:"OriginalDataSize,omitempty"`
	RecvNodePubkey   string   `protobuf:"bytes,6,opt,name=RecvNodePubkey,proto3" json:"RecvNodePubkey,omitempty"` //producer which should handle this ecc data shard
	ProposerPubkey   string   `protobuf:"bytes,7,opt,name=ProposerPubkey,proto3" json:"ProposerPubkey,omitempty"` //producer which make this propose (part of ecc shards)
	ProposerSign     []byte   `protobuf:"bytes,8,opt,name=ProposerSign,proto3" json:"ProposerSign,omitempty"`     //signature of producer made this propose
}

func (x *InitPropose) Reset() {
	*x = InitPropose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitPropose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitPropose) ProtoMessage() {}

func (x *InitPropose) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitPropose.ProtoReflect.Descriptor instead.
func (*InitPropose) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{37}
}

func (x *InitPropose) GetRootHash() []byte {
	if x != nil {
		return x.RootHash
	}
	return nil
}

func (x *InitPropose) GetProof() [][]byte {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *InitPropose) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *InitPropose) GetLeaves() int64 {
	if x != nil {
		return x.Leaves
	}
	return 0
}

func (x *InitPropose) GetOriginalDataSize() int64 {
	if x != nil {
		return x.OriginalDataSize
	}
	return 0
}

func (x *InitPropose) GetRecvNodePubkey() string {
	if x != nil {
		return x.RecvNodePubkey
	}
	return ""
}

func (x *InitPropose) GetProposerPubkey() string {
	if x != nil {
		return x.ProposerPubkey
	}
	return ""
}

func (x *InitPropose) GetProposerSign() []byte {
	if x != nil {
		return x.ProposerSign
	}
	return nil
}

type Echo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootHash               []byte   `protobuf:"bytes,1,opt,name=RootHash,proto3" json:"RootHash,omitempty"`
	Proof                  [][]byte `protobuf:"bytes,2,rep,name=Proof,proto3" json:"Proof,omitempty"`
	Index                  int64    `protobuf:"varint,3,opt,name=Index,proto3" json:"Index,omitempty"`
	Leaves                 int64    `protobuf:"varint,4,opt,name=Leaves,proto3" json:"Leaves,omitempty"`
	OriginalDataSize       int64    `protobuf:"varint,5,opt,name=OriginalDataSize,proto3" json:"OriginalDataSize,omitempty"`
	OriginalProposerPubkey string   `protobuf:"bytes,6,opt,name=OriginalProposerPubkey,proto3" json:"OriginalProposerPubkey,omitempty"` //producer make this original input
	EchoProviderPubkey     string   `protobuf:"bytes,7,opt,name=EchoProviderPubkey,proto3" json:"EchoProviderPubkey,omitempty"`         //producer which broadcast this Echo
	EchoProviderSign       []byte   `protobuf:"bytes,8,opt,name=EchoProviderSign,proto3" json:"EchoProviderSign,omitempty"`             //signature of producer broadcast this Echo
}

func (x *Echo) Reset() {
	*x = Echo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Echo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Echo) ProtoMessage() {}

func (x *Echo) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Echo.ProtoReflect.Descriptor instead.
func (*Echo) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{38}
}

func (x *Echo) GetRootHash() []byte {
	if x != nil {
		return x.RootHash
	}
	return nil
}

func (x *Echo) GetProof() [][]byte {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *Echo) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Echo) GetLeaves() int64 {
	if x != nil {
		return x.Leaves
	}
	return 0
}

func (x *Echo) GetOriginalDataSize() int64 {
	if x != nil {
		return x.OriginalDataSize
	}
	return 0
}

func (x *Echo) GetOriginalProposerPubkey() string {
	if x != nil {
		return x.OriginalProposerPubkey
	}
	return ""
}

func (x *Echo) GetEchoProviderPubkey() string {
	if x != nil {
		return x.EchoProviderPubkey
	}
	return ""
}

func (x *Echo) GetEchoProviderSign() []byte {
	if x != nil {
		return x.EchoProviderSign
	}
	return nil
}

type Ready struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootHash               []byte `protobuf:"bytes,1,opt,name=RootHash,proto3" json:"RootHash,omitempty"`
	OriginalProposerPubkey string `protobuf:"bytes,2,opt,name=OriginalProposerPubkey,proto3" json:"OriginalProposerPubkey,omitempty"`
	ReadyProviderPubkey    string `protobuf:"bytes,3,opt,name=ReadyProviderPubkey,proto3" json:"ReadyProviderPubkey,omitempty"`
	ReadyProviderSign      []byte `protobuf:"bytes,4,opt,name=ReadyProviderSign,proto3" json:"ReadyProviderSign,omitempty"`
}

func (x *Ready) Reset() {
	*x = Ready{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ready) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ready) ProtoMessage() {}

func (x *Ready) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ready.ProtoReflect.Descriptor instead.
func (*Ready) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{39}
}

func (x *Ready) GetRootHash() []byte {
	if x != nil {
		return x.RootHash
	}
	return nil
}

func (x *Ready) GetOriginalProposerPubkey() string {
	if x != nil {
		return x.OriginalProposerPubkey
	}
	return ""
}

func (x *Ready) GetReadyProviderPubkey() string {
	if x != nil {
		return x.ReadyProviderPubkey
	}
	return ""
}

func (x *Ready) GetReadyProviderSign() []byte {
	if x != nil {
		return x.ReadyProviderSign
	}
	return nil
}

// BBA
type BBAMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    BBAMsgType `protobuf:"varint,1,opt,name=Type,proto3,enum=quorum.pb.BBAMsgType" json:"Type,omitempty"` //BVAL or AUX
	Payload []byte     `protobuf:"bytes,2,opt,name=Payload,proto3" json:"Payload,omitempty"`
}

func (x *BBAMsg) Reset() {
	*x = BBAMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BBAMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BBAMsg) ProtoMessage() {}

func (x *BBAMsg) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BBAMsg.ProtoReflect.Descriptor instead.
func (*BBAMsg) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{40}
}

func (x *BBAMsg) GetType() BBAMsgType {
	if x != nil {
		return x.Type
	}
	return BBAMsgType_BVAL
}

func (x *BBAMsg) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type Bval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProposerId   string `protobuf:"bytes,1,opt,name=ProposerId,proto3" json:"ProposerId,omitempty"`
	SenderPubkey string `protobuf:"bytes,2,opt,name=SenderPubkey,proto3" json:"SenderPubkey,omitempty"`
	Epoch        int64  `protobuf:"varint,3,opt,name=Epoch,proto3" json:"Epoch,omitempty"`
	Value        bool   `protobuf:"varint,4,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *Bval) Reset() {
	*x = Bval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bval) ProtoMessage() {}

func (x *Bval) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bval.ProtoReflect.Descriptor instead.
func (*Bval) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{41}
}

func (x *Bval) GetProposerId() string {
	if x != nil {
		return x.ProposerId
	}
	return ""
}

func (x *Bval) GetSenderPubkey() string {
	if x != nil {
		return x.SenderPubkey
	}
	return ""
}

func (x *Bval) GetEpoch() int64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *Bval) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type Aux struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProposerId   string `protobuf:"bytes,1,opt,name=ProposerId,proto3" json:"ProposerId,omitempty"`
	SenderPubkey string `protobuf:"bytes,2,opt,name=SenderPubkey,proto3" json:"SenderPubkey,omitempty"`
	Epoch        uint64 `protobuf:"varint,3,opt,name=Epoch,proto3" json:"Epoch,omitempty"`
	Value        bool   `protobuf:"varint,4,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *Aux) Reset() {
	*x = Aux{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aux) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aux) ProtoMessage() {}

func (x *Aux) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aux.ProtoReflect.Descriptor instead.
func (*Aux) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{42}
}

func (x *Aux) GetProposerId() string {
	if x != nil {
		return x.ProposerId
	}
	return ""
}

func (x *Aux) GetSenderPubkey() string {
	if x != nil {
		return x.SenderPubkey
	}
	return ""
}

func (x *Aux) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *Aux) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

var File_chain_proto protoreflect.FileDescriptor

var file_chain_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x71,
	0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x22, 0x49, 0x0a, 0x07, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x7c, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x72, 0x78, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x54, 0x72, 0x78, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50,
	0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0x9c, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x50, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x54, 0x72, 0x78,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x54,
	0x72, 0x78, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x6c, 0x6b, 0x43, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x42, 0x6c, 0x6b, 0x43, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x4d, 0x65, 0x6d, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x65, 0x6d, 0x6f,
	0x22, 0x8f, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12,
	0x2d, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x65,
	0x6d, 0x6f, 0x22, 0xb4, 0x01, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x54, 0x72, 0x78, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x54, 0x72, 0x78, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x78, 0x43, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x54, 0x78, 0x43, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x22, 0xeb, 0x01, 0x0a, 0x0f, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a,
	0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a,
	0x0e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x22, 0x89, 0x01, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x78, 0x52, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x2d, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x71, 0x75, 0x6f, 0x72,
	0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x68, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x54, 0x72, 0x78, 0x41, 0x75, 0x74,
	0x68, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x26, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d,
	0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2a, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x78, 0x41,
	0x75, 0x74, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xa2, 0x02,
	0x0a, 0x0d, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x71, 0x75, 0x6f, 0x72,
	0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x71, 0x75, 0x6f,
	0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b,
	0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4d, 0x65, 0x6d, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0x89, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x56,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x56,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x54, 0x72, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x49, 0x6e, 0x54, 0x72, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x6f, 0x72, 0x6b,
	0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x46, 0x6f, 0x72, 0x6b, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x84,
	0x02, 0x0a, 0x08, 0x46, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75,
	0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x72,
	0x6f, 0x6d, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x24, 0x0a,
	0x0d, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x22, 0xe2, 0x02, 0x0a, 0x03, 0x54, 0x72, 0x78, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x72, 0x78, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x72,
	0x78, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72,
	0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x1e, 0x0a,
	0x0a, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x3b, 0x0a,
	0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x54,
	0x72, 0x78, 0x53, 0x74, 0x72, 0x6f, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x83, 0x02, 0x0a, 0x05, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x76,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x50, 0x72, 0x65, 0x76,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x04, 0x54, 0x72, 0x78, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x54,
	0x72, 0x78, 0x52, 0x04, 0x54, 0x72, 0x78, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x0c,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e,
	0x22, 0x47, 0x0a, 0x06, 0x42, 0x66, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x29, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75,
	0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x66, 0x74, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x45, 0x0a, 0x05, 0x43, 0x43, 0x4d,
	0x73, 0x67, 0x12, 0x28, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x43, 0x4d,
	0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x22, 0xde, 0x03, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x71, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x52, 0x65, 0x71, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a,
	0x12, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a,
	0x14, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x4c, 0x65,
	0x6e, 0x49, 0x6e, 0x4d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x41, 0x67, 0x72,
	0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x4c, 0x65, 0x6e, 0x49, 0x6e, 0x4d,
	0x73, 0x12, 0x2e, 0x0a, 0x12, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69,
	0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x41,
	0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x1c, 0x0a, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x24, 0x0a,
	0x0d, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x75, 0x62,
	0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x4d, 0x73, 0x67, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67,
	0x6e, 0x22, 0x88, 0x01, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x12, 0x2f, 0x0a, 0x03, 0x52,
	0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75,
	0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x52, 0x65, 0x71, 0x52, 0x03, 0x52, 0x65, 0x71, 0x12, 0x3e, 0x0a, 0x1a,
	0x52, 0x65, 0x71, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x52, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x1a, 0x52, 0x65, 0x71, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x52, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6e, 0x74, 0x22, 0xea, 0x01, 0x0a,
	0x13, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x70, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x73, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x03, 0x52, 0x65, 0x71, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x52, 0x03, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x4d,
	0x65, 0x6d, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x12,
	0x18, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x48, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x4d, 0x73, 0x67, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x53,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x22, 0x8c, 0x01, 0x0a, 0x16, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x4d, 0x73, 0x67, 0x12, 0x32, 0x0a, 0x04, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x52, 0x04, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x1a, 0x52, 0x65, 0x71, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x43, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x52, 0x65,
	0x71, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6e, 0x74, 0x22, 0xbb, 0x01, 0x0a, 0x14, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x12, 0x3e, 0x0a, 0x1a, 0x52, 0x65, 0x71, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x52, 0x65, 0x71, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6e,
	0x74, 0x12, 0x2f, 0x0a, 0x03, 0x52, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x65, 0x71, 0x52, 0x03, 0x52,
	0x65, 0x71, 0x12, 0x32, 0x0a, 0x04, 0x52, 0x65, 0x73, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x52, 0x04, 0x52, 0x65, 0x73, 0x70, 0x22, 0xbe, 0x01, 0x0a, 0x1b, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x03, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x52, 0x03, 0x52, 0x65, 0x71, 0x12, 0x34, 0x0a, 0x05, 0x52, 0x65, 0x73, 0x70, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x52, 0x05, 0x52, 0x65, 0x73, 0x70, 0x73, 0x12, 0x38, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x63, 0x0a, 0x07, 0x53, 0x79, 0x6e, 0x63, 0x4d,
	0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x71, 0x75, 0x6f,
	0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x73, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xae, 0x01, 0x0a,
	0x08, 0x52, 0x65, 0x71, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x6c, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x42, 0x6c, 0x6b, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x50, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x71, 0x50,
	0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x67,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x53, 0x69, 0x67, 0x6e, 0x22, 0xec, 0x02,
	0x0a, 0x0c, 0x52, 0x65, 0x71, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b,
	0x65, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x50, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x71, 0x75, 0x6f,
	0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x42, 0x6c, 0x6b, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x46,
	0x72, 0x6f, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x6c, 0x6b,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x42, 0x6c, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x42, 0x6c, 0x6b, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x42, 0x6c, 0x6b, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x06, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x67, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x53, 0x69, 0x67, 0x6e, 0x22, 0x38, 0x0a, 0x0c,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x06,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x71,
	0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x50, 0x0a, 0x0c, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x2c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62,
	0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xc8, 0x03, 0x0a, 0x09, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79,
	0x12, 0x26, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x75, 0x62, 0x6b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69,
	0x67, 0x6e, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x4c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69,
	0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x71,
	0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0c,
	0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3d, 0x0a, 0x0b,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0c, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x41,
	0x70, 0x70, 0x4b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x70, 0x70,
	0x4b, 0x65, 0x79, 0x22, 0xbd, 0x02, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x65,
	0x64, 0x12, 0x34, 0x0a, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d,
	0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x73,
	0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41,
	0x70, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x10, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x44, 0x4b, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2a, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d,
	0x2e, 0x70, 0x62, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x41,
	0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x69, 0x67,
	0x6e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x70, 0x69, 0x55, 0x72, 0x6c,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x41, 0x70, 0x69, 0x55, 0x72, 0x6c, 0x12, 0x1c,
	0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x65, 0x64, 0x22, 0xb7, 0x04, 0x0a,
	0x10, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x75, 0x6d, 0x4c, 0x69, 0x74,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a,
	0x0d, 0x54, 0x72, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x72, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x75, 0x62,
	0x6b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x4b, 0x65, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x4b, 0x65,
	0x79, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x54, 0x72, 0x78, 0x43,
	0x74, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x54, 0x72, 0x78, 0x43, 0x74, 0x6e, 0x12, 0x34, 0x0a, 0x08, 0x53, 0x79, 0x6e, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x71, 0x75, 0x6f, 0x72,
	0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a,
	0x07, 0x43, 0x74, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x74, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x43, 0x74, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x40, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e,
	0x70, 0x62, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x71, 0x75, 0x6f, 0x72,
	0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x75, 0x6d, 0x4c, 0x69, 0x74, 0x65, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x0c, 0x47, 0x65, 0x6e,
	0x65, 0x73, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x75, 0x6d, 0x4c, 0x69, 0x74, 0x65, 0x52, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69,
	0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x4c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x4b, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x75, 0x6d, 0x4c, 0x69, 0x74, 0x65, 0x12, 0x2d,
	0x0a, 0x03, 0x50, 0x6f, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x71, 0x75,
	0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x4f, 0x41, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x50, 0x6f, 0x61, 0x4a, 0x04, 0x08,
	0x02, 0x10, 0x65, 0x22, 0xd4, 0x01, 0x0a, 0x10, 0x50, 0x4f, 0x41, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x75,
	0x72, 0x72, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x43,
	0x75, 0x72, 0x72, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x75, 0x72, 0x72,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x43,
	0x75, 0x72, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x22, 0x77, 0x0a, 0x10, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x65, 0x65, 0x64, 0x52, 0x75, 0x6d, 0x4c, 0x69, 0x74, 0x65, 0x12, 0x31,
	0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x75, 0x6d, 0x4c, 0x69, 0x74, 0x65, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x22, 0xd1, 0x02, 0x0a, 0x0c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x75, 0x6d,
	0x4c, 0x69, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x76,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x50, 0x72, 0x65, 0x76,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x04, 0x54, 0x72, 0x78, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x54,
	0x72, 0x78, 0x52, 0x04, 0x54, 0x72, 0x78, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x45,
	0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x75, 0x6d, 0x4c, 0x69, 0x74, 0x65, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x53,
	0x69, 0x67, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x22, 0x31, 0x0a, 0x0b, 0x48, 0x42, 0x54, 0x72, 0x78,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x54, 0x72, 0x78, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62,
	0x2e, 0x54, 0x72, 0x78, 0x52, 0x04, 0x54, 0x72, 0x78, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x07, 0x48,
	0x42, 0x4d, 0x73, 0x67, 0x76, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x3d, 0x0a, 0x0b,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x42,
	0x4d, 0x73, 0x67, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x4d, 0x0a, 0x06, 0x52, 0x42, 0x43, 0x4d, 0x73, 0x67, 0x12,
	0x29, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x42, 0x43, 0x4d, 0x73, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x22, 0x8d, 0x02, 0x0a, 0x0b, 0x49, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x52, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x05, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06,
	0x4c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4c, 0x65,
	0x61, 0x76, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x76, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x75, 0x62, 0x6b,
	0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x52, 0x65, 0x63, 0x76, 0x4e, 0x6f,
	0x64, 0x65, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79,
	0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72,
	0x53, 0x69, 0x67, 0x6e, 0x22, 0xa6, 0x02, 0x0a, 0x04, 0x45, 0x63, 0x68, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x52, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x52, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12,
	0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x12, 0x2a, 0x0a,
	0x10, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62,
	0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x12, 0x2e, 0x0a, 0x12, 0x45, 0x63, 0x68, 0x6f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x45,
	0x63, 0x68, 0x6f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x12, 0x2a, 0x0a, 0x10, 0x45, 0x63, 0x68, 0x6f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x45, 0x63, 0x68,
	0x6f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x22, 0xbb, 0x01,
	0x0a, 0x05, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x52, 0x6f, 0x6f, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x36, 0x0a, 0x16, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x52, 0x65, 0x61, 0x64, 0x79, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a,
	0x11, 0x52, 0x65, 0x61, 0x64, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x69,
	0x67, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x52, 0x65, 0x61, 0x64, 0x79, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x22, 0x4d, 0x0a, 0x06, 0x42,
	0x42, 0x41, 0x4d, 0x73, 0x67, 0x12, 0x29, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x62, 0x2e,
	0x42, 0x42, 0x41, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x76, 0x0a, 0x04, 0x42, 0x76,
	0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x75, 0x0a, 0x03, 0x41, 0x75, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0x57, 0x0a, 0x0b, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x52, 0x58, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x42, 0x46, 0x54, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x43, 0x5f,
	0x4d, 0x53, 0x47, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x04, 0x12,
	0x11, 0x0a, 0x0d, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x4d, 0x53, 0x47,
	0x10, 0x05, 0x2a, 0x21, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x4d,
	0x4f, 0x56, 0x45, 0x10, 0x01, 0x2a, 0x26, 0x0a, 0x0e, 0x54, 0x72, 0x78, 0x53, 0x74, 0x72, 0x6f,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x48, 0x41, 0x49, 0x4e,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x41, 0x43, 0x48, 0x45, 0x10, 0x01, 0x2a, 0x51, 0x0a,
	0x07, 0x54, 0x72, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x50, 0x44, 0x5f, 0x47, 0x52, 0x50, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x50, 0x50, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x4f, 0x52, 0x4b, 0x10, 0x05,
	0x2a, 0x4c, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x52, 0x58, 0x5f, 0x41,
	0x55, 0x54, 0x48, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x50,
	0x44, 0x5f, 0x44, 0x4e, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c,
	0x55, 0x50, 0x44, 0x5f, 0x41, 0x4c, 0x57, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x02, 0x2a, 0x37,
	0x0a, 0x0b, 0x54, 0x72, 0x78, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x13, 0x0a,
	0x0f, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x4c, 0x57, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x44, 0x4e, 0x59,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x01, 0x2a, 0x2d, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x4c, 0x4c, 0x4f, 0x57,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x45, 0x4e, 0x59, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x10, 0x01, 0x2a, 0x2e, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x54, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54,
	0x52, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x2a, 0x18, 0x0a, 0x0a, 0x42, 0x66, 0x74, 0x4d, 0x73, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x42, 0x5f, 0x42, 0x46, 0x54, 0x10, 0x00,
	0x2a, 0x36, 0x0a, 0x09, 0x43, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x14, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x53, 0x55,
	0x53, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x43, 0x5f, 0x50, 0x52,
	0x4f, 0x4f, 0x46, 0x5f, 0x48, 0x42, 0x10, 0x01, 0x2a, 0x2e, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x01, 0x2a, 0x30, 0x0a, 0x0b, 0x53, 0x79, 0x6e, 0x63,
	0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x51, 0x5f, 0x42,
	0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x51, 0x5f, 0x42, 0x4c,
	0x4f, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x01, 0x2a, 0x50, 0x0a, 0x0c, 0x52, 0x65,
	0x71, 0x42, 0x6c, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x4c,
	0x4f, 0x43, 0x4b, 0x5f, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x00, 0x12, 0x18, 0x0a,
	0x14, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x5f, 0x4f,
	0x4e, 0x5f, 0x54, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x4c, 0x4f, 0x43, 0x4b,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x2a, 0x1c, 0x0a, 0x0d,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x00, 0x2a, 0x2b, 0x0a, 0x10, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a,
	0x0a, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52,
	0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x01, 0x2a, 0x25, 0x0a, 0x11, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03,
	0x50, 0x4f, 0x41, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x4f, 0x53, 0x10, 0x01, 0x2a, 0x32,
	0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0f, 0x0a, 0x0b, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43,
	0x10, 0x01, 0x2a, 0x25, 0x0a, 0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x74, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4c, 0x4f, 0x42, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x01, 0x2a, 0x24, 0x0a, 0x10, 0x48, 0x42, 0x4d,
	0x73, 0x67, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a,
	0x03, 0x52, 0x42, 0x43, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x42, 0x41, 0x10, 0x01, 0x2a,
	0x33, 0x0a, 0x0a, 0x52, 0x42, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x0c, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x45, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x45, 0x43, 0x48, 0x4f, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x41,
	0x44, 0x59, 0x10, 0x02, 0x2a, 0x1f, 0x0a, 0x0a, 0x42, 0x42, 0x41, 0x4d, 0x73, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x56, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x55, 0x58, 0x10, 0x01, 0x42, 0x24, 0x5a, 0x22, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x75, 0x6d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x71, 0x75,
	0x6f, 0x72, 0x75, 0x6d, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_chain_proto_rawDescOnce sync.Once
	file_chain_proto_rawDescData = file_chain_proto_rawDesc
)

func file_chain_proto_rawDescGZIP() []byte {
	file_chain_proto_rawDescOnce.Do(func() {
		file_chain_proto_rawDescData = protoimpl.X.CompressGZIP(file_chain_proto_rawDescData)
	})
	return file_chain_proto_rawDescData
}

var file_chain_proto_enumTypes = make([]protoimpl.EnumInfo, 21)
var file_chain_proto_msgTypes = make([]protoimpl.MessageInfo, 43)
var file_chain_proto_goTypes = []interface{}{
	(PackageType)(0),                    // 0: quorum.pb.PackageType
	(ActionType)(0),                     // 1: quorum.pb.ActionType
	(TrxStroageType)(0),                 // 2: quorum.pb.TrxStroageType
	(TrxType)(0),                        // 3: quorum.pb.TrxType
	(ChainConfigType)(0),                // 4: quorum.pb.ChainConfigType
	(TrxAuthMode)(0),                    // 5: quorum.pb.TrxAuthMode
	(AuthListType)(0),                   // 6: quorum.pb.AuthListType
	(AppConfigType)(0),                  // 7: quorum.pb.AppConfigType
	(BftMsgType)(0),                     // 8: quorum.pb.BftMsgType
	(CCMsgType)(0),                      // 9: quorum.pb.CCMsgType
	(ChangeConsensusResult)(0),          // 10: quorum.pb.ChangeConsensusResult
	(SyncMsgType)(0),                    // 11: quorum.pb.SyncMsgType
	(ReqBlkResult)(0),                   // 12: quorum.pb.ReqBlkResult
	(BroadcastType)(0),                  // 13: quorum.pb.BroadcastType
	(GroupEncryptType)(0),               // 14: quorum.pb.GroupEncryptType
	(GroupConsenseType)(0),              // 15: quorum.pb.GroupConsenseType
	(GroupSyncType)(0),                  // 16: quorum.pb.GroupSyncType
	(GroupCtnType)(0),                   // 17: quorum.pb.GroupCtnType
	(HBMsgPayloadType)(0),               // 18: quorum.pb.HBMsgPayloadType
	(RBCMsgType)(0),                     // 19: quorum.pb.RBCMsgType
	(BBAMsgType)(0),                     // 20: quorum.pb.BBAMsgType
	(*Package)(nil),                     // 21: quorum.pb.Package
	(*PostItem)(nil),                    // 22: quorum.pb.PostItem
	(*ProducerItem)(nil),                // 23: quorum.pb.ProducerItem
	(*UpdGroupUserItem)(nil),            // 24: quorum.pb.UpdGroupUserItem
	(*UserItem)(nil),                    // 25: quorum.pb.UserItem
	(*ChainConfigItem)(nil),             // 26: quorum.pb.ChainConfigItem
	(*ChainSendTrxRuleListItem)(nil),    // 27: quorum.pb.ChainSendTrxRuleListItem
	(*SetTrxAuthModeItem)(nil),          // 28: quorum.pb.SetTrxAuthModeItem
	(*AppConfigItem)(nil),               // 29: quorum.pb.AppConfigItem
	(*ConsensusInfo)(nil),               // 30: quorum.pb.ConsensusInfo
	(*ForkItem)(nil),                    // 31: quorum.pb.ForkItem
	(*Trx)(nil),                         // 32: quorum.pb.Trx
	(*Block)(nil),                       // 33: quorum.pb.Block
	(*BftMsg)(nil),                      // 34: quorum.pb.BftMsg
	(*CCMsg)(nil),                       // 35: quorum.pb.CCMsg
	(*ChangeConsensusReq)(nil),          // 36: quorum.pb.ChangeConsensusReq
	(*ChangeConsensusReqMsg)(nil),       // 37: quorum.pb.ChangeConsensusReqMsg
	(*ChangeConsensusResp)(nil),         // 38: quorum.pb.ChangeConsensusResp
	(*ChangeConsensusRespMsg)(nil),      // 39: quorum.pb.ChangeConsensusRespMsg
	(*ChangeConsensusProof)(nil),        // 40: quorum.pb.ChangeConsensusProof
	(*ChangeConsensusResultBundle)(nil), // 41: quorum.pb.ChangeConsensusResultBundle
	(*SyncMsg)(nil),                     // 42: quorum.pb.SyncMsg
	(*ReqBlock)(nil),                    // 43: quorum.pb.ReqBlock
	(*ReqBlockResp)(nil),                // 44: quorum.pb.ReqBlockResp
	(*BlocksBundle)(nil),                // 45: quorum.pb.BlocksBundle
	(*BroadcastMsg)(nil),                // 46: quorum.pb.BroadcastMsg
	(*GroupItem)(nil),                   // 47: quorum.pb.GroupItem
	(*GroupSeed)(nil),                   // 48: quorum.pb.GroupSeed
	(*NodeSDKGroupItem)(nil),            // 49: quorum.pb.NodeSDKGroupItem
	(*GroupItemRumLite)(nil),            // 50: quorum.pb.GroupItemRumLite
	(*ConsensusInfoRumLite)(nil),        // 51: quorum.pb.ConsensusInfoRumLite
	(*POAConsensusInfo)(nil),            // 52: quorum.pb.POAConsensusInfo
	(*GroupSeedRumLite)(nil),            // 53: quorum.pb.GroupSeedRumLite
	(*BlockRumLite)(nil),                // 54: quorum.pb.BlockRumLite
	(*HBTrxBundle)(nil),                 // 55: quorum.pb.HBTrxBundle
	(*HBMsgv1)(nil),                     // 56: quorum.pb.HBMsgv1
	(*RBCMsg)(nil),                      // 57: quorum.pb.RBCMsg
	(*InitPropose)(nil),                 // 58: quorum.pb.InitPropose
	(*Echo)(nil),                        // 59: quorum.pb.Echo
	(*Ready)(nil),                       // 60: quorum.pb.Ready
	(*BBAMsg)(nil),                      // 61: quorum.pb.BBAMsg
	(*Bval)(nil),                        // 62: quorum.pb.Bval
	(*Aux)(nil),                         // 63: quorum.pb.Aux
}
var file_chain_proto_depIdxs = []int32{
	0,  // 0: quorum.pb.Package.type:type_name -> quorum.pb.PackageType
	1,  // 1: quorum.pb.UpdGroupUserItem.Action:type_name -> quorum.pb.ActionType
	4,  // 2: quorum.pb.ChainConfigItem.Type:type_name -> quorum.pb.ChainConfigType
	1,  // 3: quorum.pb.ChainSendTrxRuleListItem.Action:type_name -> quorum.pb.ActionType
	3,  // 4: quorum.pb.ChainSendTrxRuleListItem.Type:type_name -> quorum.pb.TrxType
	3,  // 5: quorum.pb.SetTrxAuthModeItem.Type:type_name -> quorum.pb.TrxType
	5,  // 6: quorum.pb.SetTrxAuthModeItem.Mode:type_name -> quorum.pb.TrxAuthMode
	1,  // 7: quorum.pb.AppConfigItem.Action:type_name -> quorum.pb.ActionType
	7,  // 8: quorum.pb.AppConfigItem.Type:type_name -> quorum.pb.AppConfigType
	30, // 9: quorum.pb.ForkItem.Consensus:type_name -> quorum.pb.ConsensusInfo
	3,  // 10: quorum.pb.Trx.Type:type_name -> quorum.pb.TrxType
	2,  // 11: quorum.pb.Trx.StorageType:type_name -> quorum.pb.TrxStroageType
	32, // 12: quorum.pb.Block.Trxs:type_name -> quorum.pb.Trx
	8,  // 13: quorum.pb.BftMsg.Type:type_name -> quorum.pb.BftMsgType
	9,  // 14: quorum.pb.CCMsg.Type:type_name -> quorum.pb.CCMsgType
	36, // 15: quorum.pb.ChangeConsensusReqMsg.Req:type_name -> quorum.pb.ChangeConsensusReq
	36, // 16: quorum.pb.ChangeConsensusResp.Req:type_name -> quorum.pb.ChangeConsensusReq
	38, // 17: quorum.pb.ChangeConsensusRespMsg.Resp:type_name -> quorum.pb.ChangeConsensusResp
	36, // 18: quorum.pb.ChangeConsensusProof.Req:type_name -> quorum.pb.ChangeConsensusReq
	38, // 19: quorum.pb.ChangeConsensusProof.Resp:type_name -> quorum.pb.ChangeConsensusResp
	36, // 20: quorum.pb.ChangeConsensusResultBundle.Req:type_name -> quorum.pb.ChangeConsensusReq
	38, // 21: quorum.pb.ChangeConsensusResultBundle.Resps:type_name -> quorum.pb.ChangeConsensusResp
	10, // 22: quorum.pb.ChangeConsensusResultBundle.Result:type_name -> quorum.pb.ChangeConsensusResult
	11, // 23: quorum.pb.SyncMsg.Type:type_name -> quorum.pb.SyncMsgType
	12, // 24: quorum.pb.ReqBlockResp.Result:type_name -> quorum.pb.ReqBlkResult
	45, // 25: quorum.pb.ReqBlockResp.Blocks:type_name -> quorum.pb.BlocksBundle
	33, // 26: quorum.pb.BlocksBundle.Blocks:type_name -> quorum.pb.Block
	13, // 27: quorum.pb.BroadcastMsg.Type:type_name -> quorum.pb.BroadcastType
	33, // 28: quorum.pb.GroupItem.GenesisBlock:type_name -> quorum.pb.Block
	14, // 29: quorum.pb.GroupItem.EncryptType:type_name -> quorum.pb.GroupEncryptType
	15, // 30: quorum.pb.GroupItem.ConsenseType:type_name -> quorum.pb.GroupConsenseType
	33, // 31: quorum.pb.GroupSeed.GenesisBlock:type_name -> quorum.pb.Block
	47, // 32: quorum.pb.NodeSDKGroupItem.Group:type_name -> quorum.pb.GroupItem
	16, // 33: quorum.pb.GroupItemRumLite.SyncType:type_name -> quorum.pb.GroupSyncType
	17, // 34: quorum.pb.GroupItemRumLite.CtnType:type_name -> quorum.pb.GroupCtnType
	15, // 35: quorum.pb.GroupItemRumLite.ConsenseType:type_name -> quorum.pb.GroupConsenseType
	51, // 36: quorum.pb.GroupItemRumLite.ConsensusInfo:type_name -> quorum.pb.ConsensusInfoRumLite
	54, // 37: quorum.pb.GroupItemRumLite.GenesisBlock:type_name -> quorum.pb.BlockRumLite
	52, // 38: quorum.pb.ConsensusInfoRumLite.Poa:type_name -> quorum.pb.POAConsensusInfo
	50, // 39: quorum.pb.GroupSeedRumLite.Group:type_name -> quorum.pb.GroupItemRumLite
	32, // 40: quorum.pb.BlockRumLite.Trxs:type_name -> quorum.pb.Trx
	51, // 41: quorum.pb.BlockRumLite.ConsensusInfo:type_name -> quorum.pb.ConsensusInfoRumLite
	32, // 42: quorum.pb.HBTrxBundle.Trxs:type_name -> quorum.pb.Trx
	18, // 43: quorum.pb.HBMsgv1.PayloadType:type_name -> quorum.pb.HBMsgPayloadType
	19, // 44: quorum.pb.RBCMsg.Type:type_name -> quorum.pb.RBCMsgType
	20, // 45: quorum.pb.BBAMsg.Type:type_name -> quorum.pb.BBAMsgType
	46, // [46:46] is the sub-list for method output_type
	46, // [46:46] is the sub-list for method input_type
	46, // [46:46] is the sub-list for extension type_name
	46, // [46:46] is the sub-list for extension extendee
	0,  // [0:46] is the sub-list for field type_name
}

func init() { file_chain_proto_init() }
func file_chain_proto_init() {
	if File_chain_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chain_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Package); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProducerItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdGroupUserItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainConfigItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainSendTrxRuleListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTrxAuthModeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppConfigItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForkItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BftMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeConsensusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeConsensusReqMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeConsensusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeConsensusRespMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeConsensusProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeConsensusResultBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBlockResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlocksBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupSeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeSDKGroupItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupItemRumLite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusInfoRumLite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*POAConsensusInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupSeedRumLite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockRumLite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HBTrxBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HBMsgv1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RBCMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitPropose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Echo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ready); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BBAMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aux); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chain_proto_rawDesc,
			NumEnums:      21,
			NumMessages:   43,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chain_proto_goTypes,
		DependencyIndexes: file_chain_proto_depIdxs,
		EnumInfos:         file_chain_proto_enumTypes,
		MessageInfos:      file_chain_proto_msgTypes,
	}.Build()
	File_chain_proto = out.File
	file_chain_proto_rawDesc = nil
	file_chain_proto_goTypes = nil
	file_chain_proto_depIdxs = nil
}
